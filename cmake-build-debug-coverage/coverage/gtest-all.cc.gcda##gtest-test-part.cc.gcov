        -:    0:Source:C:/Users/stefa/CLionProjects/Gestore-Note/test/lib/googletest/src/gtest-test-part.cc
        -:    0:Graph:C:\Users\stefa\CLionProjects\Gestore-Note\cmake-build-debug-coverage\test\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\stefa\CLionProjects\Gestore-Note\cmake-build-debug-coverage\test\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: mheule@google.com (Markus Heule)
        -:   31://
        -:   32:// The Google C++ Testing Framework (Google Test)
        -:   33:
        -:   34:#include "gtest/gtest-test-part.h"
        -:   35:#include "src/gtest-internal-inl.h"
        -:   36:
        -:   37:namespace testing {
        -:   38:
        -:   39:using internal::GetUnitTestImpl;
        -:   40:
        -:   41:// Gets the summary of the failure message by omitting the stack trace
        -:   42:// in it.
function _ZN7testing14TestPartResult14ExtractSummaryB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####:   43:std::string TestPartResult::ExtractSummary(const char* message) {
    #####:   44:  const char* const stack_trace = strstr(message, internal::kStackTraceMarker);
        -:   45:  return stack_trace == NULL ? message :
    #####:   46:      std::string(message, stack_trace);
    %%%%%:   46-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   46-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   46-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   46-block  3
branch 10 never executed
branch 11 never executed
    %%%%%:   46-block  4
call   12 never executed
    %%%%%:   46-block  5
branch 13 never executed
branch 14 never executed
    %%%%%:   46-block  6
call   15 never executed
    %%%%%:   46-block  7
    %%%%%:   46-block  8
    $$$$$:   46-block  9
branch 16 never executed
branch 17 never executed
    $$$$$:   46-block 10
call   18 never executed
    $$$$$:   46-block 11
    $$$$$:   46-block 12
branch 19 never executed
branch 20 never executed
    $$$$$:   46-block 13
call   21 never executed
        -:   47:}
        -:   48:
        -:   49:// Prints a TestPartResult object.
function _ZN7testinglsERSoRKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   50:std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {
        -:   51:  return os
    #####:   52:      << result.file_name() << ":" << result.line_number() << ": "
    %%%%%:   52-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   53:      << (result.type() == TestPartResult::kSuccess ? "Success" :
    #####:   54:          result.type() == TestPartResult::kFatalFailure ? "Fatal failure" :
    %%%%%:   54-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   54-block  1
    %%%%%:   54-block  2
        -:   55:          "Non-fatal failure") << ":\n"
    #####:   56:      << result.message() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   56-block  0
    %%%%%:   56-block  1
    %%%%%:   56-block  2
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:   57:}
        -:   58:
        -:   59:// Appends a TestPartResult to the array.
function _ZN7testing19TestPartResultArray6AppendERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   60:void TestPartResultArray::Append(const TestPartResult& result) {
    #####:   61:  array_.push_back(result);
    %%%%%:   61-block  0
call    0 never executed
    #####:   62:}
        -:   63:
        -:   64:// Returns the TestPartResult at the given index (0-based).
function _ZNK7testing19TestPartResultArray17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####:   65:const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
    #####:   66:  if (index < 0 || index >= size()) {
    %%%%%:   66-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   66-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   66-block  2
    %%%%%:   66-block  3
    %%%%%:   66-block  4
branch  5 never executed
branch  6 never executed
    #####:   67:    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
    %%%%%:   67-block  0
call    0 never executed
    #####:   68:    internal::posix::Abort();
call    0 never executed
        -:   69:  }
        -:   70:
    #####:   71:  return array_[index];
    %%%%%:   71-block  0
call    0 never executed
        -:   72:}
        -:   73:
        -:   74:// Returns the number of TestPartResult objects in the array.
function _ZNK7testing19TestPartResultArray4sizeEv called 0 returned 0% blocks executed 0%
    #####:   75:int TestPartResultArray::size() const {
    #####:   76:  return static_cast<int>(array_.size());
    %%%%%:   76-block  0
call    0 never executed
        -:   77:}
        -:   78:
        -:   79:namespace internal {
        -:   80:
function _ZN7testing8internal24HasNewFatalFailureHelperC2Ev called 2 returned 100% blocks executed 88%
        2:   81:HasNewFatalFailureHelper::HasNewFatalFailureHelper()
        2:   82:    : has_new_fatal_failure_(false),
        2:   83:      original_reporter_(GetUnitTestImpl()->
        2:   84:                         GetTestPartResultReporterForCurrentThread()) {
        2:   84-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   84-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   85:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
        2:   85-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   85-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   86:}
        2:   86-block  0
    $$$$$:   86-block  1
call    0 never executed
        -:   87:
       2*:   88:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        2:   89:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   90:      original_reporter_);
       2*:   91:}
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD0Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD0Ev called 0 returned 0% blocks executed 0%
    #####:   88:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        -:   89:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        -:   90:      original_reporter_);
    #####:   91:}
    %%%%%:   91-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal24HasNewFatalFailureHelperD2Ev:
function _ZN7testing8internal24HasNewFatalFailureHelperD2Ev called 2 returned 100% blocks executed 100%
        2:   88:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
        2:   89:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
        2:   89-block  0
call    0 returned 2
call    1 returned 2
        -:   90:      original_reporter_);
        2:   91:}
call    0 returned 2
------------------
        -:   92:
function _ZN7testing8internal24HasNewFatalFailureHelper20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   93:void HasNewFatalFailureHelper::ReportTestPartResult(
        -:   94:    const TestPartResult& result) {
    #####:   95:  if (result.fatally_failed())
    %%%%%:   95-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:    has_new_fatal_failure_ = true;
    %%%%%:   96-block  0
    #####:   97:  original_reporter_->ReportTestPartResult(result);
    %%%%%:   97-block  0
call    0 never executed
    #####:   98:}
        -:   99:
        -:  100:}  // namespace internal
        -:  101:
        -:  102:}  // namespace testing
