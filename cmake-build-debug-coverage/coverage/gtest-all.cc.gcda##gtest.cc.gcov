        -:    0:Source:C:/Users/stefa/CLionProjects/Gestore-Note/test/lib/googletest/src/gtest.cc
        -:    0:Graph:C:\Users\stefa\CLionProjects\Gestore-Note\cmake-build-debug-coverage\test\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\stefa\CLionProjects\Gestore-Note\cmake-build-debug-coverage\test\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: wan@google.com (Zhanyong Wan)
        -:   31://
        -:   32:// The Google C++ Testing Framework (Google Test)
        -:   33:
        -:   34:#include "gtest/gtest.h"
        -:   35:#include "gtest/internal/custom/gtest.h"
        -:   36:#include "gtest/gtest-spi.h"
        -:   37:
        -:   38:#include <ctype.h>
        -:   39:#include <math.h>
        -:   40:#include <stdarg.h>
        -:   41:#include <stdio.h>
        -:   42:#include <stdlib.h>
        -:   43:#include <time.h>
        -:   44:#include <wchar.h>
        -:   45:#include <wctype.h>
        -:   46:
        -:   47:#include <algorithm>
        -:   48:#include <iomanip>
        -:   49:#include <limits>
        -:   50:#include <list>
        -:   51:#include <map>
        -:   52:#include <ostream>  // NOLINT
        -:   53:#include <sstream>
        -:   54:#include <vector>
        -:   55:
        -:   56:#if GTEST_OS_LINUX
        -:   57:
        -:   58:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:   59:// gettimeofday().
        -:   60:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   61:
        -:   62:# include <fcntl.h>  // NOLINT
        -:   63:# include <limits.h>  // NOLINT
        -:   64:# include <sched.h>  // NOLINT
        -:   65:// Declares vsnprintf().  This header is not available on Windows.
        -:   66:# include <strings.h>  // NOLINT
        -:   67:# include <sys/mman.h>  // NOLINT
        -:   68:# include <sys/time.h>  // NOLINT
        -:   69:# include <unistd.h>  // NOLINT
        -:   70:# include <string>
        -:   71:
        -:   72:#elif GTEST_OS_SYMBIAN
        -:   73:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   74:# include <sys/time.h>  // NOLINT
        -:   75:
        -:   76:#elif GTEST_OS_ZOS
        -:   77:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:   78:# include <sys/time.h>  // NOLINT
        -:   79:
        -:   80:// On z/OS we additionally need strings.h for strcasecmp.
        -:   81:# include <strings.h>  // NOLINT
        -:   82:
        -:   83:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   84:
        -:   85:# include <windows.h>  // NOLINT
        -:   86:# undef min
        -:   87:
        -:   88:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   89:
        -:   90:# include <io.h>  // NOLINT
        -:   91:# include <sys/timeb.h>  // NOLINT
        -:   92:# include <sys/types.h>  // NOLINT
        -:   93:# include <sys/stat.h>  // NOLINT
        -:   94:
        -:   95:# if GTEST_OS_WINDOWS_MINGW
        -:   96:// MinGW has gettimeofday() but not _ftime64().
        -:   97:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:   98://   gettimeofday().
        -:   99:// TODO(kenton@google.com): There are other ways to get the time on
        -:  100://   Windows, like GetTickCount() or GetSystemTimeAsFileTime().  MinGW
        -:  101://   supports these.  consider using them instead.
        -:  102:#  define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  103:#  include <sys/time.h>  // NOLINT
        -:  104:# endif  // GTEST_OS_WINDOWS_MINGW
        -:  105:
        -:  106:// cpplint thinks that the header is already included, so we want to
        -:  107:// silence it.
        -:  108:# include <windows.h>  // NOLINT
        -:  109:# undef min
        -:  110:
        -:  111:#else
        -:  112:
        -:  113:// Assume other platforms have gettimeofday().
        -:  114:// TODO(kenton@google.com): Use autoconf to detect availability of
        -:  115://   gettimeofday().
        -:  116:# define GTEST_HAS_GETTIMEOFDAY_ 1
        -:  117:
        -:  118:// cpplint thinks that the header is already included, so we want to
        -:  119:// silence it.
        -:  120:# include <sys/time.h>  // NOLINT
        -:  121:# include <unistd.h>  // NOLINT
        -:  122:
        -:  123:#endif  // GTEST_OS_LINUX
        -:  124:
        -:  125:#if GTEST_HAS_EXCEPTIONS
        -:  126:# include <stdexcept>
        -:  127:#endif
        -:  128:
        -:  129:#if GTEST_CAN_STREAM_RESULTS_
        -:  130:# include <arpa/inet.h>  // NOLINT
        -:  131:# include <netdb.h>  // NOLINT
        -:  132:# include <sys/socket.h>  // NOLINT
        -:  133:# include <sys/types.h>  // NOLINT
        -:  134:#endif
        -:  135:
        -:  136:#include "src/gtest-internal-inl.h"
        -:  137:
        -:  138:#if GTEST_OS_WINDOWS
        -:  139:# define vsnprintf _vsnprintf
        -:  140:#endif  // GTEST_OS_WINDOWS
        -:  141:
        -:  142:namespace testing {
        -:  143:
        -:  144:using internal::CountIf;
        -:  145:using internal::ForEach;
        -:  146:using internal::GetElementOr;
        -:  147:using internal::Shuffle;
        -:  148:
        -:  149:// Constants.
        -:  150:
        -:  151:// A test whose test case name or test name matches this filter is
        -:  152:// disabled and not run.
        -:  153:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  154:
        -:  155:// A test case whose name matches this filter is considered a death
        -:  156:// test case and will be run before test cases whose name doesn't
        -:  157:// match this filter.
        -:  158:static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest/*";
        -:  159:
        -:  160:// A test filter that matches everything.
        -:  161:static const char kUniversalFilter[] = "*";
        -:  162:
        -:  163:// The default output format.
        -:  164:static const char kDefaultOutputFormat[] = "xml";
        -:  165:// The default output file.
        -:  166:static const char kDefaultOutputFile[] = "test_detail";
        -:  167:
        -:  168:// The environment variable name for the test shard index.
        -:  169:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  170:// The environment variable name for the total number of test shards.
        -:  171:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  172:// The environment variable name for the test shard status file.
        -:  173:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  174:
        -:  175:namespace internal {
        -:  176:
        -:  177:// The text used in failure messages to indicate the start of the
        -:  178:// stack trace.
        -:  179:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  180:
        -:  181:// g_help_flag is true iff the --help flag or an equivalent form is
        -:  182:// specified on the command line.
        -:  183:bool g_help_flag = false;
        -:  184:
        -:  185:}  // namespace internal
        -:  186:
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 100%
        1:  187:static const char* GetDefaultFilter() {
        -:  188:#ifdef GTEST_TEST_FILTER_ENV_VAR_
        -:  189:  const char* const testbridge_test_only = getenv(GTEST_TEST_FILTER_ENV_VAR_);
        -:  190:  if (testbridge_test_only != NULL) {
        -:  191:    return testbridge_test_only;
        -:  192:  }
        -:  193:#endif  // GTEST_TEST_FILTER_ENV_VAR_
        1:  194:  return kUniversalFilter;
        1:  194-block  0
        -:  195:}
        -:  196:
        -:  197:GTEST_DEFINE_bool_(
        -:  198:    also_run_disabled_tests,
        -:  199:    internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  200:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  201:
        -:  202:GTEST_DEFINE_bool_(
        -:  203:    break_on_failure,
        -:  204:    internal::BoolFromGTestEnv("break_on_failure", false),
        -:  205:    "True iff a failed assertion should be a debugger break-point.");
        -:  206:
        -:  207:GTEST_DEFINE_bool_(
        -:  208:    catch_exceptions,
        -:  209:    internal::BoolFromGTestEnv("catch_exceptions", true),
        -:  210:    "True iff " GTEST_NAME_
        -:  211:    " should catch exceptions and treat them as test failures.");
        -:  212:
        -:  213:GTEST_DEFINE_string_(
        -:  214:    color,
        -:  215:    internal::StringFromGTestEnv("color", "auto"),
        -:  216:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  217:    "and auto.  'auto' means to use colors if the output is "
        -:  218:    "being sent to a terminal and the TERM environment variable "
        -:  219:    "is set to a terminal type that supports colors.");
        -:  220:
        -:  221:GTEST_DEFINE_string_(
        -:  222:    filter,
        -:  223:    internal::StringFromGTestEnv("filter", GetDefaultFilter()),
        -:  224:    "A colon-separated list of glob (not regex) patterns "
        -:  225:    "for filtering the tests to run, optionally followed by a "
        -:  226:    "'-' and a : separated list of negative patterns (tests to "
        -:  227:    "exclude).  A test is run if it matches one of the positive "
        -:  228:    "patterns and does not match any of the negative patterns.");
        -:  229:
        -:  230:GTEST_DEFINE_bool_(list_tests, false,
        -:  231:                   "List all tests without running them.");
        -:  232:
        -:  233:GTEST_DEFINE_string_(
        -:  234:    output,
        -:  235:    internal::StringFromGTestEnv("output", ""),
        -:  236:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  237:    "optionally followed by a colon and an output file name or directory. "
        -:  238:    "A directory is indicated by a trailing pathname separator. "
        -:  239:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  240:    "If a directory is specified, output files will be created "
        -:  241:    "within that directory, with file-names based on the test "
        -:  242:    "executable's name and, if necessary, made unique by adding "
        -:  243:    "digits.");
        -:  244:
        -:  245:GTEST_DEFINE_bool_(
        -:  246:    print_time,
        -:  247:    internal::BoolFromGTestEnv("print_time", true),
        -:  248:    "True iff " GTEST_NAME_
        -:  249:    " should display elapsed time in text output.");
        -:  250:
        -:  251:GTEST_DEFINE_bool_(
        -:  252:    print_utf8,
        -:  253:    internal::BoolFromGTestEnv("print_utf8", true),
        -:  254:    "True iff " GTEST_NAME_
        -:  255:    " prints UTF8 characters as text.");
        -:  256:
        -:  257:GTEST_DEFINE_int32_(
        -:  258:    random_seed,
        -:  259:    internal::Int32FromGTestEnv("random_seed", 0),
        -:  260:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  261:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  262:
        -:  263:GTEST_DEFINE_int32_(
        -:  264:    repeat,
        -:  265:    internal::Int32FromGTestEnv("repeat", 1),
        -:  266:    "How many times to repeat each test.  Specify a negative number "
        -:  267:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  268:
        -:  269:GTEST_DEFINE_bool_(
        -:  270:    show_internal_stack_frames, false,
        -:  271:    "True iff " GTEST_NAME_ " should include internal stack frames when "
        -:  272:    "printing test failure stack traces.");
        -:  273:
        -:  274:GTEST_DEFINE_bool_(
        -:  275:    shuffle,
        -:  276:    internal::BoolFromGTestEnv("shuffle", false),
        -:  277:    "True iff " GTEST_NAME_
        -:  278:    " should randomize tests' order on every run.");
        -:  279:
        -:  280:GTEST_DEFINE_int32_(
        -:  281:    stack_trace_depth,
        -:  282:    internal::Int32FromGTestEnv("stack_trace_depth", kMaxStackTraceDepth),
        -:  283:    "The maximum number of stack frames to print when an "
        -:  284:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  285:
        -:  286:GTEST_DEFINE_string_(
        -:  287:    stream_result_to,
        -:  288:    internal::StringFromGTestEnv("stream_result_to", ""),
        -:  289:    "This flag specifies the host name and the port number on which to stream "
        -:  290:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  291:    "Linux.");
        -:  292:
        -:  293:GTEST_DEFINE_bool_(
        -:  294:    throw_on_failure,
        -:  295:    internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  296:    "When this flag is specified, a failed assertion will throw an exception "
        -:  297:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  298:    "otherwise. For use with an external test framework.");
        -:  299:
        -:  300:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  301:GTEST_DEFINE_string_(
        -:  302:    flagfile,
        -:  303:    internal::StringFromGTestEnv("flagfile", ""),
        -:  304:    "This flag specifies the flagfile to read command-line flags from.");
        -:  305:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  306:
        -:  307:namespace internal {
        -:  308:
        -:  309:// Generates a random number from [0, range), using a Linear
        -:  310:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  311:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  312:UInt32 Random::Generate(UInt32 range) {
        -:  313:  // These constants are the same as are used in glibc's rand(3).
        -:  314:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  315:  state_ = static_cast<UInt32>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -:  316:
    #####:  317:  GTEST_CHECK_(range > 0)
    %%%%%:  317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  317-block  1
call    3 never executed
call    4 never executed
    %%%%%:  317-block  2
call    5 never executed
    $$$$$:  317-block  3
call    6 never executed
    $$$$$:  317-block  4
call    7 never executed
    #####:  318:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  318-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  319:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  319-block  1
call    3 never executed
call    4 never executed
    %%%%%:  319-block  2
call    5 never executed
    $$$$$:  319-block  3
call    6 never executed
    #####:  320:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  320-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  320-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  321:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  321-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  321-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  321-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  322:
        -:  323:  // Converting via modulus introduces a bit of downward bias, but
        -:  324:  // it's simple, and a linear congruential generator isn't too good
        -:  325:  // to begin with.
    #####:  326:  return state_ % range;
    %%%%%:  326-block  0
    %%%%%:  326-block  1
        -:  327:}
        -:  328:
        -:  329:// GTestIsInitialized() returns true iff the user has initialized
        -:  330:// Google Test.  Useful for catching the user mistake of not initializing
        -:  331:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  332:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  332-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  333:
        -:  334:// Iterates over a vector of TestCases, keeping a running sum of the
        -:  335:// results of calling a given int-returning method on each.
        -:  336:// Returns the sum.
function _ZN7testing8internalL19SumOverTestCaseListERKSt6vectorIPNS_8TestCaseESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  337:static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,
        -:  338:                               int (TestCase::*method)() const) {
        5:  339:  int sum = 0;
       30:  340:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  340-block  0
       30:  340-block  1
call    0 returned 30
branch  1 taken 25
branch  2 taken 5 (fallthrough)
      25*:  341:    sum += (case_list[i]->*method)();
       25:  341-block  0
call    0 returned 25
branch  1 taken 0 (fallthrough)
branch  2 taken 25
    %%%%%:  341-block  1
       25:  341-block  2
       25:  341-block  3
call    3 returned 25
        -:  342:  }
        5:  343:  return sum;
        5:  343-block  0
        -:  344:}
        -:  345:
        -:  346:// Returns true iff the test case passed.
function _ZN7testing8internalL14TestCasePassedEPKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####:  347:static bool TestCasePassed(const TestCase* test_case) {
    #####:  348:  return test_case->should_run() && test_case->Passed();
    %%%%%:  348-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  348-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  348-block  2
    %%%%%:  348-block  3
    %%%%%:  348-block  4
        -:  349:}
        -:  350:
        -:  351:// Returns true iff the test case failed.
function _ZN7testing8internalL14TestCaseFailedEPKNS_8TestCaseE called 10 returned 100% blocks executed 88%
       10:  352:static bool TestCaseFailed(const TestCase* test_case) {
      10*:  353:  return test_case->should_run() && test_case->Failed();
       10:  353-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10:  353-block  1
call    3 returned 10
branch  4 taken 0 (fallthrough)
branch  5 taken 10
    %%%%%:  353-block  2
       10:  353-block  3
       10:  353-block  4
        -:  354:}
        -:  355:
        -:  356:// Returns true iff test_case contains at least one test that should
        -:  357:// run.
function _ZN7testing8internalL17ShouldRunTestCaseEPKNS_8TestCaseE called 10 returned 100% blocks executed 100%
       10:  358:static bool ShouldRunTestCase(const TestCase* test_case) {
       10:  359:  return test_case->should_run();
       10:  359-block  0
call    0 returned 10
        -:  360:}
        -:  361:
        -:  362:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  363:AssertHelper::AssertHelper(TestPartResult::Type type,
        -:  364:                           const char* file,
        -:  365:                           int line,
    #####:  366:                           const char* message)
    #####:  367:    : data_(new AssertHelperData(type, file, line, message)) {
    %%%%%:  367-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  367-block  1
call    4 never executed
    #####:  368:}
    %%%%%:  368-block  0
        -:  369:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  370:AssertHelper::~AssertHelper() {
    #####:  371:  delete data_;
    %%%%%:  371-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  371-block  1
call    2 never executed
call    3 never executed
    #####:  372:}
        -:  373:
        -:  374:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  375:void AssertHelper::operator=(const Message& message) const {
        -:  376:  UnitTest::GetInstance()->
    #####:  377:    AddTestPartResult(data_->type, data_->file, data_->line,
    %%%%%:  377-block  0
call    0 never executed
    %%%%%:  377-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  378:                      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  378-block  0
call    3 never executed
    $$$$$:  378-block  1
call    4 never executed
    $$$$$:  378-block  2
        -:  379:                      UnitTest::GetInstance()->impl()
    #####:  380:                      ->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  380-block  0
call    4 never executed
        -:  381:                      // Skips the stack frame for this function itself.
        -:  382:                      );  // NOLINT
    #####:  383:}
        -:  384:
        -:  385:// Mutex for linked pointers.
        -:  386:GTEST_API_ GTEST_DEFINE_STATIC_MUTEX_(g_linked_ptr_mutex);
        -:  387:
        -:  388:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  389:::std::vector<std::string> g_argvs;
        -:  390:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  391:::std::vector<std::string> GetArgvs() {
        -:  392:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  393:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  394:  // ::string. This code converts it to the appropriate type.
        -:  395:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  396:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  397:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  398:  return g_argvs;
        2:  398-block  0
call    0 returned 2
        -:  399:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  400:}
        -:  401:
        -:  402:// Returns the current application's name, removing directory path if that
        -:  403:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  404:FilePath GetCurrentExecutableName() {
    #####:  405:  FilePath result;
    %%%%%:  405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  406:
        -:  407:#if GTEST_OS_WINDOWS
    #####:  408:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  408-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  408-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  408-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  408-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  408-block  5
call   16 never executed
    $$$$$:  408-block  6
    $$$$$:  408-block  7
call   17 never executed
    $$$$$:  408-block  8
    $$$$$:  408-block  9
call   18 never executed
    $$$$$:  408-block 10
        -:  409:#else
        -:  410:  result.Set(FilePath(GetArgvs()[0]));
        -:  411:#endif  // GTEST_OS_WINDOWS
        -:  412:
    #####:  413:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  413-block  0
    #####:  414:}
    %%%%%:  414-block  0
call    0 never executed
    $$$$$:  414-block  1
call    1 never executed
        -:  415:
        -:  416:// Functions for processing the gtest_output flag.
        -:  417:
        -:  418:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 39%
        1:  419:std::string UnitTestOptions::GetOutputFormat() {
        1:  420:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
        1:  420-block  0
call    0 returned 1
       1*:  421:  if (gtest_output_flag == NULL) return std::string("");
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  421-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  421-block  1
call    6 never executed
    $$$$$:  421-block  2
call    7 never executed
    $$$$$:  421-block  3
call    8 never executed
        -:  422:
        1:  423:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  424:  return (colon == NULL) ?
        -:  425:      std::string(gtest_output_flag) :
       1*:  426:      std::string(gtest_output_flag, colon - gtest_output_flag);
        1:  426-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  426-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  426-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  426-block  3
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  426-block  4
call   12 never executed
        1:  426-block  5
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  426-block  6
call   15 returned 1
        1:  426-block  7
    $$$$$:  426-block  8
branch 16 never executed
branch 17 never executed
    $$$$$:  426-block  9
call   18 never executed
    $$$$$:  426-block 10
    $$$$$:  426-block 11
branch 19 never executed
branch 20 never executed
    $$$$$:  426-block 12
call   21 never executed
        -:  427:}
        -:  428:
        -:  429:// Returns the name of the requested output file, or the default if none
        -:  430:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  431:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  432:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
    %%%%%:  432-block  0
call    0 never executed
    #####:  433:  if (gtest_output_flag == NULL)
branch  0 never executed
branch  1 never executed
    #####:  434:    return "";
    %%%%%:  434-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  434-block  1
call    4 never executed
    $$$$$:  434-block  2
call    5 never executed
    $$$$$:  434-block  3
        -:  435:
    #####:  436:  std::string format = GetOutputFormat();
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  437:  if (format.empty())
    %%%%%:  437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  438:    format = std::string(kDefaultOutputFormat);
    %%%%%:  438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  438-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  438-block  2
call    7 never executed
    $$$$$:  438-block  3
        -:  439:
    #####:  440:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  441:  if (colon == NULL)
    %%%%%:  441-block  0
branch  0 never executed
branch  1 never executed
    #####:  442:    return internal::FilePath::MakeFileName(
    %%%%%:  442-block  0
call    0 never executed
    %%%%%:  442-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  442-block  2
call    4 never executed
    $$$$$:  442-block  3
call    5 never executed
    $$$$$:  442-block  4
    #####:  443:        internal::FilePath(
    %%%%%:  443-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  443-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  443-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  443-block  3
call   14 never executed
    $$$$$:  443-block  4
    $$$$$:  443-block  5
call   15 never executed
    $$$$$:  443-block  6
    $$$$$:  443-block  7
call   16 never executed
    $$$$$:  443-block  8
        -:  444:            UnitTest::GetInstance()->original_working_dir()),
    #####:  445:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  445-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  445-block  1
call   10 never executed
    $$$$$:  445-block  2
    $$$$$:  445-block  3
call   11 never executed
    $$$$$:  445-block  4
    $$$$$:  445-block  5
call   12 never executed
    $$$$$:  445-block  6
    #####:  446:        format.c_str()).string();
    %%%%%:  446-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  447:
    #####:  448:  internal::FilePath output_name(colon + 1);
    %%%%%:  448-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  448-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  448-block  2
    $$$$$:  448-block  3
    #####:  449:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  450:    // TODO(wan@google.com): on Windows \some\path is not an absolute
        -:  451:    // path (as its meaning depends on the current drive), yet the
        -:  452:    // following logic for turning it into an absolute path is wrong.
        -:  453:    // Fix it.
    #####:  454:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  454-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  454-block  1
call    3 never executed
    $$$$$:  454-block  2
call    4 never executed
    $$$$$:  454-block  3
    #####:  455:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  455-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  455-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  455-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  455-block  3
call   14 never executed
    $$$$$:  455-block  4
    $$$$$:  455-block  5
call   15 never executed
    $$$$$:  455-block  6
    $$$$$:  455-block  7
call   16 never executed
    $$$$$:  455-block  8
    #####:  456:        internal::FilePath(colon + 1));
    %%%%%:  456-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  456-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  456-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  456-block  3
call   13 never executed
    $$$$$:  456-block  4
    $$$$$:  456-block  5
call   14 never executed
    $$$$$:  456-block  6
    $$$$$:  456-block  7
call   15 never executed
    $$$$$:  456-block  8
        -:  457:
    #####:  458:  if (!output_name.IsDirectory())
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  459:    return output_name.string();
    %%%%%:  459-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  460:
        -:  461:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  462:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  462-block  0
    #####:  463:      GetOutputFormat().c_str()));
    %%%%%:  463-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  463-block  1
call    3 never executed
    %%%%%:  463-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  463-block  3
    #####:  464:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  465:}
    %%%%%:  465-block  0
call    0 never executed
    %%%%%:  465-block  1
call    1 never executed
    %%%%%:  465-block  2
call    2 never executed
    $$$$$:  465-block  3
call    3 never executed
    $$$$$:  465-block  4
call    4 never executed
    $$$$$:  465-block  5
call    5 never executed
        -:  466:
        -:  467:// Returns true iff the wildcard pattern matches the string.  The
        -:  468:// first ':' or '\0' character in pattern marks the end of it.
        -:  469://
        -:  470:// This recursive algorithm isn't very efficient, but is clear and
        -:  471:// works well enough for matching test names, which are short.
function _ZN7testing8internal15UnitTestOptions20PatternMatchesStringEPKcS3_ called 1335 returned 100% blocks executed 61%
     1335:  472:bool UnitTestOptions::PatternMatchesString(const char *pattern,
        -:  473:                                           const char *str) {
     1335:  474:  switch (*pattern) {
     1335:  474-block  0
branch  0 taken 22
branch  1 taken 0
branch  2 taken 814
branch  3 taken 499
       22:  475:    case '\0':
        -:  476:    case ':':  // Either ':' or '\0' marks the end of the pattern.
       22:  477:      return *str == '\0';
       22:  477-block  0
    #####:  478:    case '?':  // Matches any single character.
    #####:  479:      return *str != '\0' && PatternMatchesString(pattern + 1, str + 1);
    %%%%%:  479-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  479-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  479-block  2
    %%%%%:  479-block  3
    %%%%%:  479-block  4
      814:  480:    case '*':  // Matches any string (possibly empty) of characters.
     1302:  481:      return (*str != '\0' && PatternMatchesString(pattern, str + 1)) ||
      814:  481-block  0
branch  0 taken 771 (fallthrough)
branch  1 taken 43
      771:  481-block  1
call    2 returned 771
branch  3 taken 445 (fallthrough)
branch  4 taken 326
      337:  481-block  2
      477:  481-block  3
     1302:  482:          PatternMatchesString(pattern + 1, str);
      488:  482-block  0
call    0 returned 488
branch  1 taken 11 (fallthrough)
branch  2 taken 477
      814:  482-block  1
      499:  483:    default:  // Non-special character.  Matches itself.
     499*:  484:      return *pattern == *str &&
      499:  484-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 499
    %%%%%:  484-block  1
      499:  484-block  2
     499*:  485:          PatternMatchesString(pattern + 1, str + 1);
    %%%%%:  485-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
      499:  485-block  1
        -:  486:  }
        -:  487:}
        -:  488:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 49 returned 100% blocks executed 100%
       49:  489:bool UnitTestOptions::MatchesFilter(
        -:  490:    const std::string& name, const char* filter) {
       49:  491:  const char *cur_pattern = filter;
       49:  491-block  0
        -:  492:  for (;;) {
       76:  493:    if (PatternMatchesString(cur_pattern, name.c_str())) {
       76:  493-block  0
call    0 returned 76
call    1 returned 76
branch  2 taken 11 (fallthrough)
branch  3 taken 65
       11:  494:      return true;
       11:  494-block  0
        -:  495:    }
        -:  496:
        -:  497:    // Finds the next pattern in the filter.
       65:  498:    cur_pattern = strchr(cur_pattern, ':');
        -:  499:
        -:  500:    // Returns if no more pattern can be found.
       65:  501:    if (cur_pattern == NULL) {
       65:  501-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 27
       38:  502:      return false;
       38:  502-block  0
        -:  503:    }
        -:  504:
        -:  505:    // Skips the pattern separater (the ':' character).
       27:  506:    cur_pattern++;
       27:  506-block  0
        -:  507:  }
        -:  508:}
        -:  509:
        -:  510:// Returns true iff the user-specified filter matches the test case
        -:  511:// name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 11 returned 100% blocks executed 45%
       11:  512:bool UnitTestOptions::FilterMatchesTest(const std::string &test_case_name,
        -:  513:                                        const std::string &test_name) {
       11:  514:  const std::string& full_name = test_case_name + "." + test_name.c_str();
       11:  514-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  514-block  1
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
       11:  514-block  2
call    7 returned 11
    $$$$$:  514-block  3
call    8 never executed
    $$$$$:  514-block  4
        -:  515:
        -:  516:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  517:  // positive filter and negative filter portions
       11:  518:  const char* const p = GTEST_FLAG(filter).c_str();
call    0 returned 11
       11:  519:  const char* const dash = strchr(p, '-');
       11:  520:  std::string positive;
call    0 returned 11
       11:  521:  std::string negative;
call    0 returned 11
       11:  522:  if (dash == NULL) {
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  523:    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter
       11:  523-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  524:    negative = "";
       11:  524-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:  525:  } else {
    #####:  526:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%:  526-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  526-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  526-block  2
call    7 never executed
    $$$$$:  526-block  3
    #####:  527:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  527-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  527-block  1
call    7 never executed
    $$$$$:  527-block  2
    #####:  528:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  529:      // Treat '-test1' as the same as '*-test1'
    #####:  530:      positive = kUniversalFilter;
    %%%%%:  530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  531:    }
        -:  532:  }
        -:  533:
        -:  534:  // A filter is a colon-separated list of patterns.  It matches a
        -:  535:  // test if any pattern in it matches the test.
      22*:  536:  return (MatchesFilter(full_name, positive.c_str()) &&
       11:  536-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  536-block  1
branch  4 taken 11 (fallthrough)
branch  5 taken 0
       11:  536-block  2
    %%%%%:  536-block  3
       22:  537:          !MatchesFilter(full_name, negative.c_str()));
       11:  537-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  537-block  1
branch  4 taken 11 (fallthrough)
branch  5 taken 0
       11:  537-block  2
       11:  538:}
       11:  538-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
    $$$$$:  538-block  1
call    3 never executed
    $$$$$:  538-block  2
call    4 never executed
    $$$$$:  538-block  3
call    5 never executed
        -:  539:
        -:  540:#if GTEST_HAS_SEH
        -:  541:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  542:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  543:// This function is useful as an __except condition.
        -:  544:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  545:  // Google Test should handle a SEH exception if:
        -:  546:  //   1. the user wants it to, AND
        -:  547:  //   2. this is not a breakpoint exception, AND
        -:  548:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  549:  //      apparently).
        -:  550:  //
        -:  551:  // SEH exception code for C++ exceptions.
        -:  552:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  553:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  554:
        -:  555:  bool should_handle = true;
        -:  556:
        -:  557:  if (!GTEST_FLAG(catch_exceptions))
        -:  558:    should_handle = false;
        -:  559:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  560:    should_handle = false;
        -:  561:  else if (exception_code == kCxxExceptionCode)
        -:  562:    should_handle = false;
        -:  563:
        -:  564:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  565:}
        -:  566:#endif  // GTEST_HAS_SEH
        -:  567:
        -:  568:}  // namespace internal
        -:  569:
        -:  570:// The c'tor sets this object as the test part result reporter used by
        -:  571:// Google Test.  The 'result' parameter specifies where to report the
        -:  572:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  573:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  574:    TestPartResultArray* result)
    #####:  575:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  576:      result_(result) {
    %%%%%:  576-block  0
call    0 never executed
    #####:  577:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  578:}
    %%%%%:  578-block  0
    $$$$$:  578-block  1
call    0 never executed
        -:  579:
        -:  580:// The c'tor sets this object as the test part result reporter used by
        -:  581:// Google Test.  The 'result' parameter specifies where to report the
        -:  582:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  583:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  584:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  585:    : intercept_mode_(intercept_mode),
    #####:  586:      result_(result) {
    %%%%%:  586-block  0
call    0 never executed
    #####:  587:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  588:}
    %%%%%:  588-block  0
    $$$$$:  588-block  1
call    0 never executed
        -:  589:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  590:void ScopedFakeTestPartResultReporter::Init() {
    #####:  591:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  591-block  0
call    0 never executed
    #####:  592:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  593:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  593-block  0
call    0 never executed
    #####:  594:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  595:  } else {
    #####:  596:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  596-block  0
call    0 never executed
    #####:  597:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  598:  }
    #####:  599:}
        -:  600:
        -:  601:// The d'tor restores the test part result reporter used by Google Test
        -:  602:// before.
    #####:  603:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  604:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  605:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  606:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  607:  } else {
    #####:  608:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  609:  }
    #####:  610:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  603:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  604:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  605:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  606:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  607:  } else {
        -:  608:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  609:  }
    #####:  610:}
    %%%%%:  610-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  603:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  604:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  604-block  0
call    0 never executed
    #####:  605:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  606:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  606-block  0
call    0 never executed
        -:  607:  } else {
    #####:  608:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  608-block  0
call    0 never executed
        -:  609:  }
    #####:  610:}
    %%%%%:  610-block  0
call    0 never executed
------------------
        -:  611:
        -:  612:// Increments the test part result count and remembers the result.
        -:  613:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  614:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  615:    const TestPartResult& result) {
    #####:  616:  result_->Append(result);
    %%%%%:  616-block  0
call    0 never executed
    #####:  617:}
        -:  618:
        -:  619:namespace internal {
        -:  620:
        -:  621:// Returns the type ID of ::testing::Test.  We should always call this
        -:  622:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  623:// testing::Test.  This is to work around a suspected linker bug when
        -:  624:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  625:// GetTypeId< ::testing::Test>() to return different values depending
        -:  626:// on whether the call is from the Google Test framework itself or
        -:  627:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  628:// return the same value, as it always calls GetTypeId<>() from the
        -:  629:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 12 returned 100% blocks executed 100%
       12:  630:TypeId GetTestTypeId() {
       12:  631:  return GetTypeId<Test>();
       12:  631-block  0
call    0 returned 12
        -:  632:}
        -:  633:
        -:  634:// The value of GetTestTypeId() as seen from within the Google Test
        -:  635:// library.  This is solely for testing GetTestTypeId().
        -:  636:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  637:
        -:  638:// This predicate-formatter checks that 'results' contains a test part
        -:  639:// failure of the given type and that the failure message contains the
        -:  640:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  641:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  642:                                     const char* /* type_expr */,
        -:  643:                                     const char* /* substr_expr */,
        -:  644:                                     const TestPartResultArray& results,
        -:  645:                                     TestPartResult::Type type,
        -:  646:                                     const std::string& substr) {
        -:  647:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -:  648:                        "1 fatal failure" :
    #####:  649:                        "1 non-fatal failure");
    %%%%%:  649-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  649-block  1
    %%%%%:  649-block  2
    %%%%%:  649-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  649-block  4
    #####:  650:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  651:  if (results.size() != 1) {
    %%%%%:  651-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  652:    msg << "Expected: " << expected << "\n"
    %%%%%:  652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  652-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  652-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  653:        << "  Actual: " << results.size() << " failures";
    %%%%%:  653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  653-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  653-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  653-block  3
    #####:  654:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  654-block  0
    %%%%%:  654-block  1
    %%%%%:  654-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  655:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  655-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  655-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  656:    }
    #####:  657:    return AssertionFailure() << msg;
    %%%%%:  657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  657-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  657-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  657-block  3
call    9 never executed
    $$$$$:  657-block  4
call   10 never executed
    $$$$$:  657-block  5
        -:  658:  }
        -:  659:
    #####:  660:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  661:  if (r.type() != type) {
    %%%%%:  661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  662:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  662-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  662-block  4
call   12 never executed
    $$$$$:  662-block  5
call   13 never executed
    $$$$$:  662-block  6
    #####:  663:                              << "  Actual:\n"
    %%%%%:  663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  664:                              << r;
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  664-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  665:  }
        -:  666:
    #####:  667:  if (strstr(r.message(), substr.c_str()) == NULL) {
    %%%%%:  667-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  668:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%:  668-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  668-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  668-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  668-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  668-block  4
call   12 never executed
    $$$$$:  668-block  5
call   13 never executed
    $$$$$:  668-block  6
    #####:  669:                              << substr << "\"\n"
    %%%%%:  669-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  669-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  670:                              << "  Actual:\n"
    %%%%%:  670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  671:                              << r;
    %%%%%:  671-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  671-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  672:  }
        -:  673:
    #####:  674:  return AssertionSuccess();
    %%%%%:  674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  675:}
    %%%%%:  675-block  0
call    0 never executed
call    1 never executed
    $$$$$:  675-block  1
call    2 never executed
    $$$$$:  675-block  2
call    3 never executed
        -:  676:
        -:  677:// The constructor of SingleFailureChecker remembers where to look up
        -:  678:// test part results, what type of failure we expect, and what
        -:  679:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  680:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  681:                                           TestPartResult::Type type,
    #####:  682:                                           const std::string& substr)
    #####:  683:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  683-block  0
call    0 never executed
        -:  684:
        -:  685:// The destructor of SingleFailureChecker verifies that the given
        -:  686:// TestPartResultArray contains exactly one failure that has the given
        -:  687:// type and contains the given substring.  If that's not the case, a
        -:  688:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  689:SingleFailureChecker::~SingleFailureChecker() {
    #####:  690:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  690-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  690-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  690-block  2
call   10 never executed
    #####:  691:}
call    0 never executed
        -:  692:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  693:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  694:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  694-block  0
call    0 returned 1
        -:  695:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  696:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  697:    const TestPartResult& result) {
    #####:  698:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  698-block  0
call    0 never executed
call    1 never executed
    #####:  699:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  700:}
        -:  701:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  702:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  703:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  703-block  0
call    0 returned 1
        -:  704:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  705:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  706:    const TestPartResult& result) {
    #####:  707:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%:  707-block  0
call    0 never executed
call    1 never executed
    #####:  708:}
        -:  709:
        -:  710:// Returns the global test part result reporter.
        -:  711:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####:  712:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####:  713:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  714:  return global_test_part_result_repoter_;
    %%%%%:  714-block  0
    #####:  715:}
    %%%%%:  715-block  0
call    0 never executed
        -:  716:
        -:  717:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  718:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -:  719:    TestPartResultReporterInterface* reporter) {
    #####:  720:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  721:  global_test_part_result_repoter_ = reporter;
    #####:  722:}
    %%%%%:  722-block  0
call    0 never executed
        -:  723:
        -:  724:// Returns the test part result reporter for the current thread.
        -:  725:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 2 returned 100% blocks executed 100%
        2:  726:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
        2:  727:  return per_thread_test_part_result_reporter_.get();
        2:  727-block  0
call    0 returned 2
        -:  728:}
        -:  729:
        -:  730:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 4 returned 100% blocks executed 100%
        4:  731:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -:  732:    TestPartResultReporterInterface* reporter) {
        4:  733:  per_thread_test_part_result_reporter_.set(reporter);
        4:  733-block  0
call    0 returned 4
        4:  734:}
        -:  735:
        -:  736:// Gets the number of successful test cases.
function _ZNK7testing8internal12UnitTestImpl26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####:  737:int UnitTestImpl::successful_test_case_count() const {
    #####:  738:  return CountIf(test_cases_, TestCasePassed);
    %%%%%:  738-block  0
call    0 never executed
        -:  739:}
        -:  740:
        -:  741:// Gets the number of failed test cases.
function _ZNK7testing8internal12UnitTestImpl22failed_test_case_countEv called 2 returned 100% blocks executed 100%
        2:  742:int UnitTestImpl::failed_test_case_count() const {
        2:  743:  return CountIf(test_cases_, TestCaseFailed);
        2:  743-block  0
call    0 returned 2
        -:  744:}
        -:  745:
        -:  746:// Gets the number of all test cases.
function _ZNK7testing8internal12UnitTestImpl21total_test_case_countEv called 6 returned 100% blocks executed 100%
        6:  747:int UnitTestImpl::total_test_case_count() const {
        6:  748:  return static_cast<int>(test_cases_.size());
        6:  748-block  0
call    0 returned 6
        -:  749:}
        -:  750:
        -:  751:// Gets the number of all test cases that contain at least one test
        -:  752:// that should run.
function _ZNK7testing8internal12UnitTestImpl22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  753:int UnitTestImpl::test_case_to_run_count() const {
        2:  754:  return CountIf(test_cases_, ShouldRunTestCase);
        2:  754-block  0
call    0 returned 2
        -:  755:}
        -:  756:
        -:  757:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1:  758:int UnitTestImpl::successful_test_count() const {
        1:  759:  return SumOverTestCaseList(test_cases_, &TestCase::successful_test_count);
        1:  759-block  0
call    0 returned 1
        -:  760:}
        -:  761:
        -:  762:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 1 returned 100% blocks executed 100%
        1:  763:int UnitTestImpl::failed_test_count() const {
        1:  764:  return SumOverTestCaseList(test_cases_, &TestCase::failed_test_count);
        1:  764-block  0
call    0 returned 1
        -:  765:}
        -:  766:
        -:  767:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1:  768:int UnitTestImpl::reportable_disabled_test_count() const {
        1:  769:  return SumOverTestCaseList(test_cases_,
        1:  769-block  0
call    0 returned 1
        1:  770:                             &TestCase::reportable_disabled_test_count);
        -:  771:}
        -:  772:
        -:  773:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####:  774:int UnitTestImpl::disabled_test_count() const {
    #####:  775:  return SumOverTestCaseList(test_cases_, &TestCase::disabled_test_count);
    %%%%%:  775-block  0
call    0 never executed
        -:  776:}
        -:  777:
        -:  778:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####:  779:int UnitTestImpl::reportable_test_count() const {
    #####:  780:  return SumOverTestCaseList(test_cases_, &TestCase::reportable_test_count);
    %%%%%:  780-block  0
call    0 never executed
        -:  781:}
        -:  782:
        -:  783:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####:  784:int UnitTestImpl::total_test_count() const {
    #####:  785:  return SumOverTestCaseList(test_cases_, &TestCase::total_test_count);
    %%%%%:  785-block  0
call    0 never executed
        -:  786:}
        -:  787:
        -:  788:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  789:int UnitTestImpl::test_to_run_count() const {
        2:  790:  return SumOverTestCaseList(test_cases_, &TestCase::test_to_run_count);
        2:  790-block  0
call    0 returned 2
        -:  791:}
        -:  792:
        -:  793:// Returns the current OS stack trace as an std::string.
        -:  794://
        -:  795:// The maximum number of stack frames to be included is specified by
        -:  796:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  797:// specifies the number of top frames to be skipped, which doesn't
        -:  798:// count against the number of frames to be included.
        -:  799://
        -:  800:// For example, if Foo() calls Bar(), which in turn calls
        -:  801:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -:  802:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:  803:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####:  804:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%:  804-block  0
call    0 never executed
        -:  805:      static_cast<int>(GTEST_FLAG(stack_trace_depth)),
        -:  806:      skip_count + 1
        -:  807:      // Skips the user-specified number of frames plus this function
        -:  808:      // itself.
    #####:  809:      );  // NOLINT
call    0 never executed
        -:  810:}
        -:  811:
        -:  812:// Returns the current time in milliseconds.
function _ZN7testing8internal15GetTimeInMillisEv called 35 returned 100% blocks executed 100%
       35:  813:TimeInMillis GetTimeInMillis() {
        -:  814:#if GTEST_OS_WINDOWS_MOBILE || defined(__BORLANDC__)
        -:  815:  // Difference between 1970-01-01 and 1601-01-01 in milliseconds.
        -:  816:  // http://analogous.blogspot.com/2005/04/epoch.html
        -:  817:  const TimeInMillis kJavaEpochToWinFileTimeDelta =
        -:  818:    static_cast<TimeInMillis>(116444736UL) * 100000UL;
        -:  819:  const DWORD kTenthMicrosInMilliSecond = 10000;
        -:  820:
        -:  821:  SYSTEMTIME now_systime;
        -:  822:  FILETIME now_filetime;
        -:  823:  ULARGE_INTEGER now_int64;
        -:  824:  // TODO(kenton@google.com): Shouldn't this just use
        -:  825:  //   GetSystemTimeAsFileTime()?
        -:  826:  GetSystemTime(&now_systime);
        -:  827:  if (SystemTimeToFileTime(&now_systime, &now_filetime)) {
        -:  828:    now_int64.LowPart = now_filetime.dwLowDateTime;
        -:  829:    now_int64.HighPart = now_filetime.dwHighDateTime;
        -:  830:    now_int64.QuadPart = (now_int64.QuadPart / kTenthMicrosInMilliSecond) -
        -:  831:      kJavaEpochToWinFileTimeDelta;
        -:  832:    return now_int64.QuadPart;
        -:  833:  }
        -:  834:  return 0;
        -:  835:#elif GTEST_OS_WINDOWS && !GTEST_HAS_GETTIMEOFDAY_
        -:  836:  __timeb64 now;
        -:  837:
        -:  838:  // MSVC 8 deprecates _ftime64(), so we want to suppress warning 4996
        -:  839:  // (deprecated function) there.
        -:  840:  // TODO(kenton@google.com): Use GetTickCount()?  Or use
        -:  841:  //   SystemTimeToFileTime()
        -:  842:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)
        -:  843:  _ftime64(&now);
        -:  844:  GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  845:
        -:  846:  return static_cast<TimeInMillis>(now.time) * 1000 + now.millitm;
        -:  847:#elif GTEST_HAS_GETTIMEOFDAY_
        -:  848:  struct timeval now;
       35:  849:  gettimeofday(&now, NULL);
       35:  849-block  0
call    0 returned 35
branch  1 taken 35 (fallthrough)
branch  2 taken 0 (throw)
       35:  850:  return static_cast<TimeInMillis>(now.tv_sec) * 1000 + now.tv_usec / 1000;
       35:  850-block  0
       35:  850-block  1
        -:  851:#else
        -:  852:# error "Don't know how to get the current time on your system."
        -:  853:#endif
        -:  854:}
        -:  855:
        -:  856:// Utilities
        -:  857:
        -:  858:// class String.
        -:  859:
        -:  860:#if GTEST_OS_WINDOWS_MOBILE
        -:  861:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -:  862:// memory using new. The caller is responsible for deleting the return
        -:  863:// value using delete[]. Returns the wide string, or NULL if the
        -:  864:// input is NULL.
        -:  865:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -:  866:  if (!ansi) return NULL;
        -:  867:  const int length = strlen(ansi);
        -:  868:  const int unicode_length =
        -:  869:      MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -:  870:                          NULL, 0);
        -:  871:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -:  872:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -:  873:                      unicode, unicode_length);
        -:  874:  unicode[unicode_length] = 0;
        -:  875:  return unicode;
        -:  876:}
        -:  877:
        -:  878:// Creates an ANSI string from the given wide string, allocating
        -:  879:// memory using new. The caller is responsible for deleting the return
        -:  880:// value using delete[]. Returns the ANSI string, or NULL if the
        -:  881:// input is NULL.
        -:  882:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -:  883:  if (!utf16_str) return NULL;
        -:  884:  const int ansi_length =
        -:  885:      WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -:  886:                          NULL, 0, NULL, NULL);
        -:  887:  char* ansi = new char[ansi_length + 1];
        -:  888:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
        -:  889:                      ansi, ansi_length, NULL, NULL);
        -:  890:  ansi[ansi_length] = 0;
        -:  891:  return ansi;
        -:  892:}
        -:  893:
        -:  894:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  895:
        -:  896:// Compares two C strings.  Returns true iff they have the same content.
        -:  897://
        -:  898:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -:  899:// C string is considered different to any non-NULL C string,
        -:  900:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2:  901:bool String::CStringEquals(const char * lhs, const char * rhs) {
       2*:  902:  if ( lhs == NULL ) return rhs == NULL;
        2:  902-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  902-block  1
        -:  903:
       2*:  904:  if ( rhs == NULL ) return false;
        2:  904-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  904-block  1
        -:  905:
        2:  906:  return strcmp(lhs, rhs) == 0;
        2:  906-block  0
        -:  907:}
        -:  908:
        -:  909:#if GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -:  910:
        -:  911:// Converts an array of wide chars to a narrow string using the UTF-8
        -:  912:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  913:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -:  914:                                     Message* msg) {
    #####:  915:  for (size_t i = 0; i != length; ) {  // NOLINT
    %%%%%:  915-block  0
    %%%%%:  915-block  1
branch  0 never executed
branch  1 never executed
    #####:  916:    if (wstr[i] != L'\0') {
    %%%%%:  916-block  0
branch  0 never executed
branch  1 never executed
    #####:  917:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%:  917-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  917-block  1
call    4 never executed
    $$$$$:  917-block  2
call    5 never executed
    $$$$$:  917-block  3
call    6 never executed
    #####:  918:      while (i != length && wstr[i] != L'\0')
    %%%%%:  918-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  918-block  1
branch  2 never executed
branch  3 never executed
    #####:  919:        i++;
    %%%%%:  919-block  0
        -:  920:    } else {
    #####:  921:      *msg << '\0';
    %%%%%:  921-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:      i++;
    %%%%%:  922-block  0
        -:  923:    }
        -:  924:  }
    #####:  925:}
    %%%%%:  925-block  0
        -:  926:
        -:  927:#endif  // GTEST_HAS_STD_WSTRING || GTEST_HAS_GLOBAL_WSTRING
        -:  928:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####:  929:void SplitString(const ::std::string& str, char delimiter,
        -:  930:                 ::std::vector< ::std::string>* dest) {
    #####:  931:  ::std::vector< ::std::string> parsed;
    %%%%%:  931-block  0
call    0 never executed
    #####:  932:  ::std::string::size_type pos = 0;
    #####:  933:  while (::testing::internal::AlwaysTrue()) {
    %%%%%:  933-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  933-block  1
branch  3 never executed
branch  4 never executed
    #####:  934:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%:  934-block  0
call    0 never executed
    #####:  935:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  936:      parsed.push_back(str.substr(pos));
    %%%%%:  936-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  936-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  936-block  2
call    6 never executed
    $$$$$:  936-block  3
call    7 never executed
    $$$$$:  936-block  4
    #####:  937:      break;
        -:  938:    } else {
    #####:  939:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  939-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  939-block  2
call    6 never executed
    $$$$$:  939-block  3
call    7 never executed
    $$$$$:  939-block  4
    #####:  940:      pos = colon + 1;
        -:  941:    }
        -:  942:  }
    #####:  943:  dest->swap(parsed);
    %%%%%:  943-block  0
call    0 never executed
    #####:  944:}
call    0 never executed
    $$$$$:  944-block  0
call    1 never executed
        -:  945:
        -:  946:}  // namespace internal
        -:  947:
        -:  948:// Constructs an empty Message.
        -:  949:// We allocate the stringstream separately because otherwise each use of
        -:  950:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -:  951:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -:  952:// the stack space.
function _ZN7testing7MessageC2Ev called 69 returned 100% blocks executed 73%
       69:  953:Message::Message() : ss_(new ::std::stringstream) {
       69:  953-block  0
call    0 returned 69
call    1 returned 69
branch  2 taken 69 (fallthrough)
branch  3 taken 0 (throw)
       69:  953-block  1
call    4 returned 69
    $$$$$:  953-block  2
call    5 never executed
        -:  954:  // By default, we want there to be enough precision when printing
        -:  955:  // a double to a Message.
       69:  956:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 69
call    1 returned 69
call    2 returned 69
branch  3 taken 69 (fallthrough)
branch  4 taken 0 (throw)
       69:  957:}
       69:  957-block  0
    $$$$$:  957-block  1
call    0 never executed
        -:  958:
        -:  959:// These two overloads allow streaming a wide C string to a Message
        -:  960:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####:  961:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####:  962:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%:  962-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  962-block  1
call    4 never executed
    %%%%%:  962-block  2
    $$$$$:  962-block  3
call    5 never executed
        -:  963:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####:  964:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####:  965:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%:  965-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  965-block  1
call    4 never executed
    %%%%%:  965-block  2
    $$$$$:  965-block  3
call    5 never executed
        -:  966:}
        -:  967:
        -:  968:#if GTEST_HAS_STD_WSTRING
        -:  969:// Converts the given wide string to a narrow string using the UTF-8
        -:  970:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####:  971:Message& Message::operator <<(const ::std::wstring& wstr) {
    #####:  972:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%:  972-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  973:  return *this;
        -:  974:}
        -:  975:#endif  // GTEST_HAS_STD_WSTRING
        -:  976:
        -:  977:#if GTEST_HAS_GLOBAL_WSTRING
        -:  978:// Converts the given wide string to a narrow string using the UTF-8
        -:  979:// encoding, and streams the result to this Message object.
        -:  980:Message& Message::operator <<(const ::wstring& wstr) {
        -:  981:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
        -:  982:  return *this;
        -:  983:}
        -:  984:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  985:
        -:  986:// Gets the text streamed to this object so far as an std::string.
        -:  987:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 69 returned 100% blocks executed 100%
       69:  988:std::string Message::GetString() const {
       69:  989:  return internal::StringStreamToString(ss_.get());
       69:  989-block  0
call    0 returned 69
call    1 returned 69
        -:  990:}
        -:  991:
        -:  992:// AssertionResult constructors.
        -:  993:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:  994:AssertionResult::AssertionResult(const AssertionResult& other)
    #####:  995:    : success_(other.success_),
    #####:  996:      message_(other.message_.get() != NULL ?
    %%%%%:  996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  996-block  1
    %%%%%:  996-block  2
    %%%%%:  996-block  3
call    3 never executed
    #####:  997:               new ::std::string(*other.message_) :
    %%%%%:  997-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  997-block  1
call    5 never executed
        -:  998:               static_cast< ::std::string*>(NULL)) {
    #####:  999:}
        -: 1000:
        -: 1001:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 1002:void AssertionResult::swap(AssertionResult& other) {
        -: 1003:  using std::swap;
    #####: 1004:  swap(success_, other.success_);
    %%%%%: 1004-block  0
call    0 never executed
    #####: 1005:  swap(message_, other.message_);
call    0 never executed
    #####: 1006:}
        -: 1007:
        -: 1008:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 1009:AssertionResult AssertionResult::operator!() const {
    #####: 1010:  AssertionResult negation(!success_);
    %%%%%: 1010-block  0
call    0 never executed
    #####: 1011:  if (message_.get() != NULL)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1012:    negation << *message_;
    %%%%%: 1012-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1013:  return negation;
    %%%%%: 1013-block  0
    %%%%%: 1013-block  1
    =====: 1014:}
    $$$$$: 1014-block  0
call    0 never executed
        -: 1015:
        -: 1016:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 18 returned 100% blocks executed 100%
       18: 1017:AssertionResult AssertionSuccess() {
       18: 1018:  return AssertionResult(true);
       18: 1018-block  0
call    0 returned 18
        -: 1019:}
        -: 1020:
        -: 1021:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 0 returned 0% blocks executed 0%
    #####: 1022:AssertionResult AssertionFailure() {
    #####: 1023:  return AssertionResult(false);
    %%%%%: 1023-block  0
call    0 never executed
        -: 1024:}
        -: 1025:
        -: 1026:// Makes a failed assertion result with the given failure message.
        -: 1027:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1028:AssertionResult AssertionFailure(const Message& message) {
    #####: 1029:  return AssertionFailure() << message;
    %%%%%: 1029-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1029-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1029-block  2
call    7 never executed
    %%%%%: 1029-block  3
    $$$$$: 1029-block  4
call    8 never executed
        -: 1030:}
        -: 1031:
        -: 1032:namespace internal {
        -: 1033:
        -: 1034:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1035:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1036:                                            const std::vector<size_t>& right) {
        -: 1037:  std::vector<std::vector<double> > costs(
    #####: 1038:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1038-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1038-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 1038-block  2
    $$$$$: 1038-block  3
    $$$$$: 1038-block  4
        -: 1039:  std::vector<std::vector<EditType> > best_move(
    #####: 1040:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1040-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 1040-block  1
    $$$$$: 1040-block  2
    $$$$$: 1040-block  3
        -: 1041:
        -: 1042:  // Populate for empty right.
    #####: 1043:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1044:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1044-block  0
call    0 never executed
call    1 never executed
    #####: 1045:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1046:  }
        -: 1047:  // Populate for empty left.
    #####: 1048:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1048-block  0
    %%%%%: 1048-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1049:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1049-block  0
call    0 never executed
call    1 never executed
    #####: 1050:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1051:  }
        -: 1052:
    #####: 1053:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1053-block  0
    %%%%%: 1053-block  1
    %%%%%: 1053-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1054-block  0
    %%%%%: 1054-block  1
    %%%%%: 1054-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1055:      if (left[l_i] == right[r_i]) {
    %%%%%: 1055-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1056:        // Found a match. Consume it.
    #####: 1057:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1057-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1058:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1059:        continue;
        -: 1060:      }
        -: 1061:
    #####: 1062:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1062-block  0
call    0 never executed
call    1 never executed
    #####: 1063:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1064:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1065:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1065-block  0
branch  2 never executed
branch  3 never executed
    #####: 1066:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1066-block  0
call    0 never executed
call    1 never executed
    #####: 1067:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1068:      } else if (remove < add && remove < replace) {
    %%%%%: 1068-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1068-block  1
branch  2 never executed
branch  3 never executed
    #####: 1069:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1069-block  0
call    0 never executed
call    1 never executed
    #####: 1070:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1071:      } else {
        -: 1072:        // We make replace a little more expensive than add/remove to lower
        -: 1073:        // their priority.
    #####: 1074:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1074-block  0
call    0 never executed
call    1 never executed
    #####: 1075:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1076:      }
        -: 1077:    }
        -: 1078:  }
        -: 1079:
        -: 1080:  // Reconstruct the best path. We do it in reverse order.
    #####: 1081:  std::vector<EditType> best_path;
    %%%%%: 1081-block  0
call    0 never executed
    #####: 1082:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1082-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1082-block  1
branch  4 never executed
branch  5 never executed
    #####: 1083:    EditType move = best_move[l_i][r_i];
    %%%%%: 1083-block  0
call    0 never executed
call    1 never executed
    #####: 1084:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1085:    l_i -= move != kAdd;
    #####: 1086:    r_i -= move != kRemove;
    %%%%%: 1086-block  0
        -: 1087:  }
    #####: 1088:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1088-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1089:  return best_path;
    %%%%%: 1089-block  0
    %%%%%: 1089-block  1
    #####: 1090:}
    %%%%%: 1090-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1090-block  1
call    2 never executed
    $$$$$: 1090-block  2
call    3 never executed
    $$$$$: 1090-block  3
call    4 never executed
        -: 1091:
        -: 1092:namespace {
        -: 1093:
        -: 1094:// Helper class to convert string into ids with deduplication.
        -: 1095:class InternalStrings {
        -: 1096: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1097:  size_t GetId(const std::string& str) {
    #####: 1098:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1099:    if (it != ids_.end()) return it->second;
    %%%%%: 1099-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1099-block  1
call    4 never executed
    #####: 1100:    size_t id = ids_.size();
    %%%%%: 1100-block  0
call    0 never executed
    #####: 1101:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1101-block  0
        -: 1102:  }
        -: 1103:
        -: 1104: private:
        -: 1105:  typedef std::map<std::string, size_t> IdMap;
        -: 1106:  IdMap ids_;
        -: 1107:};
        -: 1108:
        -: 1109:}  // namespace
        -: 1110:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1111:std::vector<EditType> CalculateOptimalEdits(
        -: 1112:    const std::vector<std::string>& left,
        -: 1113:    const std::vector<std::string>& right) {
    #####: 1114:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1114-block  0
call    0 never executed
call    1 never executed
        -: 1115:  {
    #####: 1116:    InternalStrings intern_table;
call    0 never executed
    #####: 1117:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1118:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1118-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1118-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1118-block  2
    $$$$$: 1118-block  3
        -: 1119:    }
    #####: 1120:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1120-block  0
    %%%%%: 1120-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1121:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1121-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1121-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1121-block  2
    $$$$$: 1121-block  3
        -: 1122:    }
    #####: 1123:  }
    %%%%%: 1123-block  0
call    0 never executed
    $$$$$: 1123-block  1
call    1 never executed
    #####: 1124:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1124-block  0
    #####: 1125:}
    %%%%%: 1125-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1125-block  1
call    2 never executed
    $$$$$: 1125-block  2
call    3 never executed
        -: 1126:
        -: 1127:namespace {
        -: 1128:
        -: 1129:// Helper class that holds the state for one hunk and prints it out to the
        -: 1130:// stream.
        -: 1131:// It reorders adds/removes when possible to group all removes before all
        -: 1132:// adds. It also adds the hunk header before printint into the stream.
        -: 1133:class Hunk {
        -: 1134: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1135:  Hunk(size_t left_start, size_t right_start)
    #####: 1136:      : left_start_(left_start),
    #####: 1137:        right_start_(right_start),
    #####: 1138:        adds_(),
    #####: 1139:        removes_(),
    #####: 1140:        common_() {}
    %%%%%: 1140-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1141:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1142:  void PushLine(char edit, const char* line) {
    #####: 1143:    switch (edit) {
    %%%%%: 1143-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1144:      case ' ':
    #####: 1145:        ++common_;
    #####: 1146:        FlushEdits();
    %%%%%: 1146-block  0
call    0 never executed
    #####: 1147:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1147-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1147-block  1
    $$$$$: 1147-block  2
call    6 never executed
    #####: 1148:        break;
    %%%%%: 1148-block  0
    #####: 1149:      case '-':
    #####: 1150:        ++removes_;
    #####: 1151:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1151-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1151-block  2
    $$$$$: 1151-block  3
call    6 never executed
    #####: 1152:        break;
    %%%%%: 1152-block  0
    #####: 1153:      case '+':
    #####: 1154:        ++adds_;
    #####: 1155:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1155-block  2
    #####: 1156:        break;
    %%%%%: 1156-block  0
        -: 1157:    }
    #####: 1158:  }
    %%%%%: 1158-block  0
        -: 1159:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1160:  void PrintTo(std::ostream* os) {
    #####: 1161:    PrintHeader(os);
    %%%%%: 1161-block  0
call    0 never executed
    #####: 1162:    FlushEdits();
call    0 never executed
    #####: 1163:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1164:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1165:         it != hunk_.end(); ++it) {
    %%%%%: 1165-block  0
call    0 never executed
    %%%%%: 1165-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1166:      *os << it->first << it->second << "\n";
    %%%%%: 1166-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1166-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1166-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1167:    }
    #####: 1168:  }
    %%%%%: 1168-block  0
        -: 1169:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1170:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1170-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1170-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1170-block  2
    %%%%%: 1170-block  3
    %%%%%: 1170-block  4
        -: 1171:
        -: 1172: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1173:  void FlushEdits() {
    #####: 1174:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1174-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1175:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1176:  }
        -: 1177:
        -: 1178:  // Print a unified diff header for one hunk.
        -: 1179:  // The format is
        -: 1180:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1181:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1182:  void PrintHeader(std::ostream* ss) const {
    #####: 1183:    *ss << "@@ ";
    %%%%%: 1183-block  0
call    0 never executed
    #####: 1184:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1185:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1185-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1186:    }
    #####: 1187:    if (removes_ && adds_) {
    %%%%%: 1187-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1187-block  1
branch  2 never executed
branch  3 never executed
    #####: 1188:      *ss << " ";
    %%%%%: 1188-block  0
call    0 never executed
        -: 1189:    }
    #####: 1190:    if (adds_) {
    %%%%%: 1190-block  0
branch  0 never executed
branch  1 never executed
    #####: 1191:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1191-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1192:    }
    #####: 1193:    *ss << " @@\n";
    %%%%%: 1193-block  0
call    0 never executed
    #####: 1194:  }
        -: 1195:
        -: 1196:  size_t left_start_, right_start_;
        -: 1197:  size_t adds_, removes_, common_;
        -: 1198:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1199:};
        -: 1200:
        -: 1201:}  // namespace
        -: 1202:
        -: 1203:// Create a list of diff hunks in Unified diff format.
        -: 1204:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1205:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1206:// addition.
        -: 1207:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1208:// If two hunks are close enough that their contexts overlap, then they are
        -: 1209:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1210:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1211:                              const std::vector<std::string>& right,
        -: 1212:                              size_t context) {
    #####: 1213:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1214:
    #####: 1215:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1216:  std::stringstream ss;
    %%%%%: 1216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1217:  while (edit_i < edits.size()) {
    %%%%%: 1217-block  0
    %%%%%: 1217-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1218:    // Find first edit.
    #####: 1219:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1219-block  0
    %%%%%: 1219-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1219-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1219-block  3
    %%%%%: 1219-block  4
    %%%%%: 1219-block  5
branch  6 never executed
branch  7 never executed
    #####: 1220:      ++l_i;
    #####: 1221:      ++r_i;
    #####: 1222:      ++edit_i;
    %%%%%: 1222-block  0
        -: 1223:    }
        -: 1224:
        -: 1225:    // Find the first line to include in the hunk.
    #####: 1226:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1226-block  0
call    0 never executed
    #####: 1227:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1228:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1228-block  0
    %%%%%: 1228-block  1
branch  0 never executed
branch  1 never executed
    #####: 1229:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1230:    }
        -: 1231:
        -: 1232:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1233:    // is over.
    #####: 1234:    size_t n_suffix = 0;
    #####: 1235:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1235-block  0
    %%%%%: 1235-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1236:      if (n_suffix >= context) {
    %%%%%: 1236-block  0
branch  0 never executed
branch  1 never executed
        -: 1237:        // Continue only if the next hunk is very close.
    #####: 1238:        std::vector<EditType>::const_iterator it = edits.begin() + edit_i;
    %%%%%: 1238-block  0
call    0 never executed
call    1 never executed
    #####: 1239:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1239-block  0
call    0 never executed
    %%%%%: 1239-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1239-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1239-block  3
    %%%%%: 1239-block  4
    %%%%%: 1239-block  5
branch  8 never executed
branch  9 never executed
    #####: 1240:        if (it == edits.end() || (it - edits.begin()) - edit_i >= context) {
    %%%%%: 1240-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1240-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1240-block  2
    %%%%%: 1240-block  3
    %%%%%: 1240-block  4
branch  8 never executed
branch  9 never executed
        -: 1241:          // There is no next edit or it is too far away.
    #####: 1242:          break;
    %%%%%: 1242-block  0
        -: 1243:        }
        -: 1244:      }
        -: 1245:
    #####: 1246:      EditType edit = edits[edit_i];
    %%%%%: 1246-block  0
call    0 never executed
        -: 1247:      // Reset count when a non match is found.
    #####: 1248:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1248-block  0
    %%%%%: 1248-block  1
        -: 1249:
    #####: 1250:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1250-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1250-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1250-block  2
branch  4 never executed
branch  5 never executed
    #####: 1251:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1251-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1251-block  1
    %%%%%: 1251-block  2
    %%%%%: 1251-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1252:      }
    #####: 1253:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1253-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1253-block  1
branch  2 never executed
branch  3 never executed
    #####: 1254:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1254-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1255:      }
        -: 1256:
        -: 1257:      // Advance indices, depending on edit type.
    #####: 1258:      l_i += edit != kAdd;
    #####: 1259:      r_i += edit != kRemove;
    %%%%%: 1259-block  0
        -: 1260:    }
        -: 1261:
    #####: 1262:    if (!hunk.has_edits()) {
    %%%%%: 1262-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1263:      // We are done. We don't want this hunk.
    #####: 1264:      break;
    %%%%%: 1264-block  0
        -: 1265:    }
        -: 1266:
    #####: 1267:    hunk.PrintTo(&ss);
    %%%%%: 1267-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1268:  }
    %%%%%: 1268-block  0
    %%%%%: 1268-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1268-block  2
call    3 never executed
    #####: 1269:  return ss.str();
    %%%%%: 1269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1269-block  1
    #####: 1270:}
    %%%%%: 1270-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1270-block  1
call    2 never executed
    $$$$$: 1270-block  2
call    3 never executed
        -: 1271:
        -: 1272:}  // namespace edit_distance
        -: 1273:
        -: 1274:namespace {
        -: 1275:
        -: 1276:// The string representation of the values received in EqFailure() are already
        -: 1277:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1278:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1279:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1280:  std::vector<std::string> lines;
    %%%%%: 1280-block  0
call    0 never executed
    #####: 1281:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1282:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1282-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1282-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1282-block  2
    %%%%%: 1282-block  3
    %%%%%: 1282-block  4
branch  8 never executed
branch  9 never executed
    #####: 1283:    ++start;
    #####: 1284:    --end;
    %%%%%: 1284-block  0
        -: 1285:  }
    #####: 1286:  bool escaped = false;
    #####: 1287:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1287-block  0
    %%%%%: 1287-block  1
    %%%%%: 1287-block  2
branch  0 never executed
branch  1 never executed
    #####: 1288:    if (escaped) {
    %%%%%: 1288-block  0
branch  0 never executed
branch  1 never executed
    #####: 1289:      escaped = false;
    #####: 1290:      if (str[i] == 'n') {
    %%%%%: 1290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1291:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1291-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1291-block  2
call    6 never executed
    $$$$$: 1291-block  3
call    7 never executed
    $$$$$: 1291-block  4
    #####: 1292:        start = i + 1;
        -: 1293:      }
        -: 1294:    } else {
    #####: 1295:      escaped = str[i] == '\\';
    %%%%%: 1295-block  0
call    0 never executed
        -: 1296:    }
        -: 1297:  }
    #####: 1298:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1298-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1298-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1298-block  2
call    6 never executed
    $$$$$: 1298-block  3
call    7 never executed
    $$$$$: 1298-block  4
    #####: 1299:  return lines;
    %%%%%: 1299-block  0
    =====: 1300:}
    $$$$$: 1300-block  0
call    0 never executed
        -: 1301:
        -: 1302:}  // namespace
        -: 1303:
        -: 1304:// Constructs and returns the message for an equality assertion
        -: 1305:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1306://
        -: 1307:// The first four parameters are the expressions used in the assertion
        -: 1308:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1309:// where foo is 5 and bar is 6, we have:
        -: 1310://
        -: 1311://   lhs_expression: "foo"
        -: 1312://   rhs_expression: "bar"
        -: 1313://   lhs_value:      "5"
        -: 1314://   rhs_value:      "6"
        -: 1315://
        -: 1316:// The ignoring_case parameter is true iff the assertion is a
        -: 1317:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1318:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1319:AssertionResult EqFailure(const char* lhs_expression,
        -: 1320:                          const char* rhs_expression,
        -: 1321:                          const std::string& lhs_value,
        -: 1322:                          const std::string& rhs_value,
        -: 1323:                          bool ignoring_case) {
    #####: 1324:  Message msg;
    %%%%%: 1324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1325:  msg << "Expected equality of these values:";
    %%%%%: 1325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1326:  msg << "\n  " << lhs_expression;
    %%%%%: 1326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1326-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1327:  if (lhs_value != lhs_expression) {
    %%%%%: 1327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1327-block  1
branch  3 never executed
branch  4 never executed
    #####: 1328:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1328-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1329:  }
    #####: 1330:  msg << "\n  " << rhs_expression;
    %%%%%: 1330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1330-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1331:  if (rhs_value != rhs_expression) {
    %%%%%: 1331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1331-block  1
branch  3 never executed
branch  4 never executed
    #####: 1332:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1332-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1333:  }
        -: 1334:
    #####: 1335:  if (ignoring_case) {
    %%%%%: 1335-block  0
branch  0 never executed
branch  1 never executed
    #####: 1336:    msg << "\nIgnoring case";
    %%%%%: 1336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1337:  }
        -: 1338:
    #####: 1339:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1339-block  2
    %%%%%: 1339-block  3
    %%%%%: 1339-block  4
branch  6 never executed
branch  7 never executed
        -: 1340:    const std::vector<std::string> lhs_lines =
    #####: 1341:        SplitEscapedString(lhs_value);
    %%%%%: 1341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1342:    const std::vector<std::string> rhs_lines =
    #####: 1343:        SplitEscapedString(rhs_value);
    %%%%%: 1343-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1344:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1344-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1344-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1344-block  2
    %%%%%: 1344-block  3
    %%%%%: 1344-block  4
branch  6 never executed
branch  7 never executed
    #####: 1345:      msg << "\nWith diff:\n"
    %%%%%: 1345-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1346:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1346-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1346-block  2
call    6 never executed
    $$$$$: 1346-block  3
call    7 never executed
    $$$$$: 1346-block  4
        -: 1347:    }
    #####: 1348:  }
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1348-block  1
call    2 never executed
    $$$$$: 1348-block  2
call    3 never executed
        -: 1349:
    #####: 1350:  return AssertionFailure() << msg;
    %%%%%: 1350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1350-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1350-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1350-block  3
call    9 never executed
    %%%%%: 1350-block  4
    $$$$$: 1350-block  5
call   10 never executed
    $$$$$: 1350-block  6
    #####: 1351:}
call    0 never executed
    $$$$$: 1351-block  0
call    1 never executed
        -: 1352:
        -: 1353:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1354:std::string GetBoolAssertionFailureMessage(
        -: 1355:    const AssertionResult& assertion_result,
        -: 1356:    const char* expression_text,
        -: 1357:    const char* actual_predicate_value,
        -: 1358:    const char* expected_predicate_value) {
    #####: 1359:  const char* actual_message = assertion_result.message();
    %%%%%: 1359-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1360:  Message msg;
    %%%%%: 1360-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:  msg << "Value of: " << expression_text
    %%%%%: 1361-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1361-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1362:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1362-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1362-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1363:  if (actual_message[0] != '\0')
    %%%%%: 1363-block  0
branch  0 never executed
branch  1 never executed
    #####: 1364:    msg << " (" << actual_message << ")";
    %%%%%: 1364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1364-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1364-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1365:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1366:  return msg.GetString();
    %%%%%: 1366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1366-block  1
    #####: 1367:}
    %%%%%: 1367-block  0
call    0 never executed
    $$$$$: 1367-block  1
call    1 never executed
        -: 1368:
        -: 1369:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1370:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 1371:                                     const char* expr2,
        -: 1372:                                     const char* abs_error_expr,
        -: 1373:                                     double val1,
        -: 1374:                                     double val2,
        -: 1375:                                     double abs_error) {
    #####: 1376:  const double diff = fabs(val1 - val2);
    #####: 1377:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1377-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1377-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1378:
        -: 1379:  // TODO(wan): do not print the value of an expression if it's
        -: 1380:  // already a literal.
    #####: 1381:  return AssertionFailure()
    %%%%%: 1381-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1381-block  1
call    3 never executed
    $$$$$: 1381-block  2
call    4 never executed
    $$$$$: 1381-block  3
    #####: 1382:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 1382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1382-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1382-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1383:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1383-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1383-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1383-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1383-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1383-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1384:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1384-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1384-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1384-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1385:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1385-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1385-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1385-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1385-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1386:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1386-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1386-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1386-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1386-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1386-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1387:}
        -: 1388:
        -: 1389:
        -: 1390:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1391:template <typename RawType>
    #####: 1392:AssertionResult FloatingPointLE(const char* expr1,
        -: 1393:                                const char* expr2,
        -: 1394:                                RawType val1,
        -: 1395:                                RawType val2) {
        -: 1396:  // Returns success if val1 is less than val2,
    #####: 1397:  if (val1 < val2) {
    #####: 1398:    return AssertionSuccess();
        -: 1399:  }
        -: 1400:
        -: 1401:  // or if val1 is almost equal to val2.
    #####: 1402:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1403:  if (lhs.AlmostEquals(rhs)) {
    #####: 1404:    return AssertionSuccess();
        -: 1405:  }
        -: 1406:
        -: 1407:  // Note that the above two checks will both fail if either val1 or
        -: 1408:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1409:  // any predicate involving a NaN must return false.
        -: 1410:
    #####: 1411:  ::std::stringstream val1_ss;
    #####: 1412:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1413:          << val1;
        -: 1414:
    #####: 1415:  ::std::stringstream val2_ss;
    #####: 1416:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1417:          << val2;
        -: 1418:
        -: 1419:  return AssertionFailure()
    #####: 1420:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1421:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1422:      << StringStreamToString(&val2_ss);
    #####: 1423:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1392:AssertionResult FloatingPointLE(const char* expr1,
        -: 1393:                                const char* expr2,
        -: 1394:                                RawType val1,
        -: 1395:                                RawType val2) {
        -: 1396:  // Returns success if val1 is less than val2,
    #####: 1397:  if (val1 < val2) {
    %%%%%: 1397-block  0
branch  0 never executed
branch  1 never executed
    #####: 1398:    return AssertionSuccess();
    %%%%%: 1398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1399:  }
        -: 1400:
        -: 1401:  // or if val1 is almost equal to val2.
    #####: 1402:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1402-block  0
call    0 never executed
call    1 never executed
    #####: 1403:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1403-block  0
branch  3 never executed
branch  4 never executed
    #####: 1404:    return AssertionSuccess();
    %%%%%: 1404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1405:  }
        -: 1406:
        -: 1407:  // Note that the above two checks will both fail if either val1 or
        -: 1408:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1409:  // any predicate involving a NaN must return false.
        -: 1410:
    #####: 1411:  ::std::stringstream val1_ss;
    %%%%%: 1411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1412:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1412-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1413:          << val1;
    %%%%%: 1413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1414:
    #####: 1415:  ::std::stringstream val2_ss;
    %%%%%: 1415-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1416:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1417:          << val2;
    %%%%%: 1417-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1418:
        -: 1419:  return AssertionFailure()
    #####: 1420:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1420-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1420-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1420-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1420-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1420-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1420-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1420-block  6
call   18 never executed
    $$$$$: 1420-block  7
    #####: 1421:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1421-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1421-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1421-block  4
call   13 never executed
    $$$$$: 1421-block  5
    #####: 1422:      << StringStreamToString(&val2_ss);
    %%%%%: 1422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1422-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1422-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1422-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1422-block  4
call   11 never executed
    $$$$$: 1422-block  5
    #####: 1423:}
call    0 never executed
call    1 never executed
    $$$$$: 1423-block  0
call    2 never executed
    $$$$$: 1423-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1392:AssertionResult FloatingPointLE(const char* expr1,
        -: 1393:                                const char* expr2,
        -: 1394:                                RawType val1,
        -: 1395:                                RawType val2) {
        -: 1396:  // Returns success if val1 is less than val2,
    #####: 1397:  if (val1 < val2) {
    %%%%%: 1397-block  0
branch  0 never executed
branch  1 never executed
    #####: 1398:    return AssertionSuccess();
    %%%%%: 1398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1399:  }
        -: 1400:
        -: 1401:  // or if val1 is almost equal to val2.
    #####: 1402:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1402-block  0
call    0 never executed
call    1 never executed
    #####: 1403:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1403-block  0
branch  3 never executed
branch  4 never executed
    #####: 1404:    return AssertionSuccess();
    %%%%%: 1404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1405:  }
        -: 1406:
        -: 1407:  // Note that the above two checks will both fail if either val1 or
        -: 1408:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1409:  // any predicate involving a NaN must return false.
        -: 1410:
    #####: 1411:  ::std::stringstream val1_ss;
    %%%%%: 1411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1412:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1412-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1413:          << val1;
    %%%%%: 1413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1414:
    #####: 1415:  ::std::stringstream val2_ss;
    %%%%%: 1415-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1416:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1417:          << val2;
    %%%%%: 1417-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1418:
        -: 1419:  return AssertionFailure()
    #####: 1420:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1420-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1420-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1420-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1420-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1420-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1420-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1420-block  6
call   18 never executed
    $$$$$: 1420-block  7
    #####: 1421:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1421-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1421-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1421-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1421-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1421-block  4
call   13 never executed
    $$$$$: 1421-block  5
    #####: 1422:      << StringStreamToString(&val2_ss);
    %%%%%: 1422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1422-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1422-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1422-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1422-block  4
call   11 never executed
    $$$$$: 1422-block  5
    #####: 1423:}
call    0 never executed
call    1 never executed
    $$$$$: 1423-block  0
call    2 never executed
    $$$$$: 1423-block  1
call    3 never executed
------------------
        -: 1424:
        -: 1425:}  // namespace internal
        -: 1426:
        -: 1427:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1428:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1429:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 1430:                        float val1, float val2) {
    #####: 1431:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1431-block  0
call    0 never executed
        -: 1432:}
        -: 1433:
        -: 1434:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1435:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1436:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 1437:                         double val1, double val2) {
    #####: 1438:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1438-block  0
call    0 never executed
        -: 1439:}
        -: 1440:
        -: 1441:namespace internal {
        -: 1442:
        -: 1443:// The helper function for {ASSERT|EXPECT}_EQ with int or enum
        -: 1444:// arguments.
function _ZN7testing8internal11CmpHelperEQEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1445:AssertionResult CmpHelperEQ(const char* lhs_expression,
        -: 1446:                            const char* rhs_expression,
        -: 1447:                            BiggestInt lhs,
        -: 1448:                            BiggestInt rhs) {
    #####: 1449:  if (lhs == rhs) {
    %%%%%: 1449-block  0
branch  0 never executed
branch  1 never executed
    #####: 1450:    return AssertionSuccess();
    %%%%%: 1450-block  0
call    0 never executed
        -: 1451:  }
        -: 1452:
        -: 1453:  return EqFailure(lhs_expression,
        -: 1454:                   rhs_expression,
    #####: 1455:                   FormatForComparisonFailureMessage(lhs, rhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1455-block  0
call    3 never executed
    $$$$$: 1455-block  1
call    4 never executed
    $$$$$: 1455-block  2
    #####: 1456:                   FormatForComparisonFailureMessage(rhs, lhs),
    %%%%%: 1456-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1456-block  1
call    2 never executed
    #####: 1457:                   false);
    %%%%%: 1457-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1458:}
        -: 1459:
        -: 1460:// A macro for implementing the helper functions needed to implement
        -: 1461:// ASSERT_?? and EXPECT_?? with integer or enum arguments.  It is here
        -: 1462:// just to avoid copy-and-paste of similar code.
        -: 1463:#define GTEST_IMPL_CMP_HELPER_(op_name, op)\
        -: 1464:AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
        -: 1465:                                   BiggestInt val1, BiggestInt val2) {\
        -: 1466:  if (val1 op val2) {\
        -: 1467:    return AssertionSuccess();\
        -: 1468:  } else {\
        -: 1469:    return AssertionFailure() \
        -: 1470:        << "Expected: (" << expr1 << ") " #op " (" << expr2\
        -: 1471:        << "), actual: " << FormatForComparisonFailureMessage(val1, val2)\
        -: 1472:        << " vs " << FormatForComparisonFailureMessage(val2, val1);\
        -: 1473:  }\
        -: 1474:}
        -: 1475:
        -: 1476:// Implements the helper function for {ASSERT|EXPECT}_NE with int or
        -: 1477:// enum arguments.
function _ZN7testing8internal11CmpHelperNEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1478:GTEST_IMPL_CMP_HELPER_(NE, !=)
    %%%%%: 1478-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1478-block  1
call    2 never executed
    %%%%%: 1478-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1478-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1478-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1478-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1478-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 1478-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 1478-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 1478-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 1478-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 1478-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 1478-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 1478-block 13
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1478-block 14
call   40 never executed
    $$$$$: 1478-block 15
    $$$$$: 1478-block 16
call   41 never executed
    $$$$$: 1478-block 17
    $$$$$: 1478-block 18
call   42 never executed
        -: 1479:// Implements the helper function for {ASSERT|EXPECT}_LE with int or
        -: 1480:// enum arguments.
function _ZN7testing8internal11CmpHelperLEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1481:GTEST_IMPL_CMP_HELPER_(LE, <=)
    %%%%%: 1481-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1481-block  1
call    2 never executed
    %%%%%: 1481-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1481-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1481-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1481-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1481-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 1481-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 1481-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 1481-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 1481-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 1481-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 1481-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 1481-block 13
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1481-block 14
call   40 never executed
    $$$$$: 1481-block 15
    $$$$$: 1481-block 16
call   41 never executed
    $$$$$: 1481-block 17
    $$$$$: 1481-block 18
call   42 never executed
        -: 1482:// Implements the helper function for {ASSERT|EXPECT}_LT with int or
        -: 1483:// enum arguments.
function _ZN7testing8internal11CmpHelperLTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1484:GTEST_IMPL_CMP_HELPER_(LT, < )
    %%%%%: 1484-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1484-block  1
call    2 never executed
    %%%%%: 1484-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1484-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1484-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1484-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1484-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 1484-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 1484-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 1484-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 1484-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 1484-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 1484-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 1484-block 13
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1484-block 14
call   40 never executed
    $$$$$: 1484-block 15
    $$$$$: 1484-block 16
call   41 never executed
    $$$$$: 1484-block 17
    $$$$$: 1484-block 18
call   42 never executed
        -: 1485:// Implements the helper function for {ASSERT|EXPECT}_GE with int or
        -: 1486:// enum arguments.
function _ZN7testing8internal11CmpHelperGEEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1487:GTEST_IMPL_CMP_HELPER_(GE, >=)
    %%%%%: 1487-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1487-block  1
call    2 never executed
    %%%%%: 1487-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1487-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1487-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1487-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1487-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 1487-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 1487-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 1487-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 1487-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 1487-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 1487-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 1487-block 13
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1487-block 14
call   40 never executed
    $$$$$: 1487-block 15
    $$$$$: 1487-block 16
call   41 never executed
    $$$$$: 1487-block 17
    $$$$$: 1487-block 18
call   42 never executed
        -: 1488:// Implements the helper function for {ASSERT|EXPECT}_GT with int or
        -: 1489:// enum arguments.
function _ZN7testing8internal11CmpHelperGTEPKcS2_xx called 0 returned 0% blocks executed 0%
    #####: 1490:GTEST_IMPL_CMP_HELPER_(GT, > )
    %%%%%: 1490-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1490-block  1
call    2 never executed
    %%%%%: 1490-block  2
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1490-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1490-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 1490-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 1490-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 1490-block  7
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%: 1490-block  8
call   22 never executed
branch 23 never executed
branch 24 never executed
    %%%%%: 1490-block  9
call   25 never executed
branch 26 never executed
branch 27 never executed
    %%%%%: 1490-block 10
call   28 never executed
branch 29 never executed
branch 30 never executed
    %%%%%: 1490-block 11
call   31 never executed
branch 32 never executed
branch 33 never executed
    %%%%%: 1490-block 12
call   34 never executed
branch 35 never executed
branch 36 never executed
    %%%%%: 1490-block 13
call   37 never executed
call   38 never executed
call   39 never executed
    $$$$$: 1490-block 14
call   40 never executed
    $$$$$: 1490-block 15
    $$$$$: 1490-block 16
call   41 never executed
    $$$$$: 1490-block 17
    $$$$$: 1490-block 18
call   42 never executed
        -: 1491:
        -: 1492:#undef GTEST_IMPL_CMP_HELPER_
        -: 1493:
        -: 1494:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1495:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1496:                               const char* rhs_expression,
        -: 1497:                               const char* lhs,
        -: 1498:                               const char* rhs) {
    #####: 1499:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1500:    return AssertionSuccess();
    %%%%%: 1500-block  0
call    0 never executed
        -: 1501:  }
        -: 1502:
        -: 1503:  return EqFailure(lhs_expression,
        -: 1504:                   rhs_expression,
    #####: 1505:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1505-block  0
call    3 never executed
    $$$$$: 1505-block  1
call    4 never executed
    $$$$$: 1505-block  2
    #####: 1506:                   PrintToString(rhs),
    %%%%%: 1506-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1506-block  1
call    2 never executed
    #####: 1507:                   false);
    %%%%%: 1507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1508:}
        -: 1509:
        -: 1510:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1511:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1512:                                   const char* rhs_expression,
        -: 1513:                                   const char* lhs,
        -: 1514:                                   const char* rhs) {
    #####: 1515:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1516:    return AssertionSuccess();
    %%%%%: 1516-block  0
call    0 never executed
        -: 1517:  }
        -: 1518:
        -: 1519:  return EqFailure(lhs_expression,
        -: 1520:                   rhs_expression,
    #####: 1521:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1521-block  0
call    3 never executed
    $$$$$: 1521-block  1
call    4 never executed
    $$$$$: 1521-block  2
    #####: 1522:                   PrintToString(rhs),
    %%%%%: 1522-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1522-block  1
call    2 never executed
    #####: 1523:                   true);
    %%%%%: 1523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1524:}
        -: 1525:
        -: 1526:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1527:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1528:                               const char* s2_expression,
        -: 1529:                               const char* s1,
        -: 1530:                               const char* s2) {
    #####: 1531:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1532:    return AssertionSuccess();
    %%%%%: 1532-block  0
call    0 never executed
        -: 1533:  } else {
    #####: 1534:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1534-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1534-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1534-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1534-block  3
call   10 never executed
    $$$$$: 1534-block  4
call   11 never executed
    #####: 1535:                              << s2_expression << "), actual: \""
    %%%%%: 1535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1535-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1536:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1536-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1536-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1536-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1536-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1537:  }
        -: 1538:}
        -: 1539:
        -: 1540:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1541:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1542:                                   const char* s2_expression,
        -: 1543:                                   const char* s1,
        -: 1544:                                   const char* s2) {
    #####: 1545:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1546:    return AssertionSuccess();
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:  } else {
    #####: 1548:    return AssertionFailure()
    %%%%%: 1548-block  0
call    0 never executed
    %%%%%: 1548-block  1
call    1 never executed
    $$$$$: 1548-block  2
call    2 never executed
    #####: 1549:        << "Expected: (" << s1_expression << ") != ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1549-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1549-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1550:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 1550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1550-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1551:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1551-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1551-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1551-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1551-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1552:  }
        -: 1553:}
        -: 1554:
        -: 1555:}  // namespace internal
        -: 1556:
        -: 1557:namespace {
        -: 1558:
        -: 1559:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1560:
        -: 1561:// This group of overloaded functions return true iff needle is a
        -: 1562:// substring of haystack.  NULL is considered a substring of itself
        -: 1563:// only.
        -: 1564:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1565:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1566:  if (needle == NULL || haystack == NULL)
    %%%%%: 1566-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1566-block  1
branch  2 never executed
branch  3 never executed
    #####: 1567:    return needle == haystack;
    %%%%%: 1567-block  0
        -: 1568:
    #####: 1569:  return strstr(haystack, needle) != NULL;
    %%%%%: 1569-block  0
        -: 1570:}
        -: 1571:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1572:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1573:  if (needle == NULL || haystack == NULL)
    %%%%%: 1573-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1573-block  1
branch  2 never executed
branch  3 never executed
    #####: 1574:    return needle == haystack;
    %%%%%: 1574-block  0
        -: 1575:
    #####: 1576:  return wcsstr(haystack, needle) != NULL;
    %%%%%: 1576-block  0
call    0 never executed
        -: 1577:}
        -: 1578:
        -: 1579:// StringType here can be either ::std::string or ::std::wstring.
        -: 1580:template <typename StringType>
    #####: 1581:bool IsSubstringPred(const StringType& needle,
        -: 1582:                     const StringType& haystack) {
    #####: 1583:  return haystack.find(needle) != StringType::npos;
        -: 1584:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1581:bool IsSubstringPred(const StringType& needle,
        -: 1582:                     const StringType& haystack) {
    #####: 1583:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1583-block  0
call    0 never executed
        -: 1584:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1581:bool IsSubstringPred(const StringType& needle,
        -: 1582:                     const StringType& haystack) {
    #####: 1583:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1583-block  0
call    0 never executed
        -: 1584:}
------------------
        -: 1585:
        -: 1586:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1587:// depending on the value of the expected_to_be_substring parameter.
        -: 1588:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1589:// or ::std::wstring.
        -: 1590:template <typename StringType>
    #####: 1591:AssertionResult IsSubstringImpl(
        -: 1592:    bool expected_to_be_substring,
        -: 1593:    const char* needle_expr, const char* haystack_expr,
        -: 1594:    const StringType& needle, const StringType& haystack) {
    #####: 1595:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1596:    return AssertionSuccess();
        -: 1597:
    #####: 1598:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1599:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1600:  return AssertionFailure()
    #####: 1601:      << "Value of: " << needle_expr << "\n"
    #####: 1602:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1603:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1604:      << "a substring of " << haystack_expr << "\n"
    #####: 1605:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1606:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1591:AssertionResult IsSubstringImpl(
        -: 1592:    bool expected_to_be_substring,
        -: 1593:    const char* needle_expr, const char* haystack_expr,
        -: 1594:    const StringType& needle, const StringType& haystack) {
    #####: 1595:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:
    #####: 1598:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1599:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1600:  return AssertionFailure()
    #####: 1601:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1601-block  4
call   12 never executed
    $$$$$: 1601-block  5
    #####: 1602:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1602-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1602-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1602-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1603:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1603-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1603-block  2
    %%%%%: 1603-block  3
    %%%%%: 1603-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1603-block  5
call    8 never executed
    $$$$$: 1603-block  6
    #####: 1604:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1605:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1605-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1606:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1591:AssertionResult IsSubstringImpl(
        -: 1592:    bool expected_to_be_substring,
        -: 1593:    const char* needle_expr, const char* haystack_expr,
        -: 1594:    const StringType& needle, const StringType& haystack) {
    #####: 1595:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:
    #####: 1598:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1599:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1600:  return AssertionFailure()
    #####: 1601:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1601-block  4
call   12 never executed
    $$$$$: 1601-block  5
    #####: 1602:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1602-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1602-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1602-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1603:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1603-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1603-block  2
    %%%%%: 1603-block  3
    %%%%%: 1603-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1603-block  5
call    8 never executed
    $$$$$: 1603-block  6
    #####: 1604:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1605:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1605-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1606:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1591:AssertionResult IsSubstringImpl(
        -: 1592:    bool expected_to_be_substring,
        -: 1593:    const char* needle_expr, const char* haystack_expr,
        -: 1594:    const StringType& needle, const StringType& haystack) {
    #####: 1595:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:
    #####: 1598:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1599:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1600:  return AssertionFailure()
    #####: 1601:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1601-block  4
call   12 never executed
    $$$$$: 1601-block  5
    #####: 1602:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1602-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1602-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1602-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1603:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1603-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1603-block  2
    %%%%%: 1603-block  3
    %%%%%: 1603-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1603-block  5
call    8 never executed
    $$$$$: 1603-block  6
    #####: 1604:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1605:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1605-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1606:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1591:AssertionResult IsSubstringImpl(
        -: 1592:    bool expected_to_be_substring,
        -: 1593:    const char* needle_expr, const char* haystack_expr,
        -: 1594:    const StringType& needle, const StringType& haystack) {
    #####: 1595:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:
    #####: 1598:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1599:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1600:  return AssertionFailure()
    #####: 1601:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1601-block  4
call   12 never executed
    $$$$$: 1601-block  5
    #####: 1602:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1602-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1602-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1602-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1603:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1603-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1603-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1603-block  2
    %%%%%: 1603-block  3
    %%%%%: 1603-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1603-block  5
call    8 never executed
    $$$$$: 1603-block  6
    #####: 1604:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1604-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1604-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1604-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1605:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1605-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1605-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1605-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1605-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1606:}
------------------
        -: 1607:
        -: 1608:}  // namespace
        -: 1609:
        -: 1610:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1611:// substring of haystack (NULL is considered a substring of itself
        -: 1612:// only), and return an appropriate error message when they fail.
        -: 1613:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1614:AssertionResult IsSubstring(
        -: 1615:    const char* needle_expr, const char* haystack_expr,
        -: 1616:    const char* needle, const char* haystack) {
    #####: 1617:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1617-block  0
call    0 never executed
        -: 1618:}
        -: 1619:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1620:AssertionResult IsSubstring(
        -: 1621:    const char* needle_expr, const char* haystack_expr,
        -: 1622:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1623:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1623-block  0
call    0 never executed
        -: 1624:}
        -: 1625:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1626:AssertionResult IsNotSubstring(
        -: 1627:    const char* needle_expr, const char* haystack_expr,
        -: 1628:    const char* needle, const char* haystack) {
    #####: 1629:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1629-block  0
call    0 never executed
        -: 1630:}
        -: 1631:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1632:AssertionResult IsNotSubstring(
        -: 1633:    const char* needle_expr, const char* haystack_expr,
        -: 1634:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1635:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1635-block  0
call    0 never executed
        -: 1636:}
        -: 1637:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1638:AssertionResult IsSubstring(
        -: 1639:    const char* needle_expr, const char* haystack_expr,
        -: 1640:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1641:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1641-block  0
call    0 never executed
        -: 1642:}
        -: 1643:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1644:AssertionResult IsNotSubstring(
        -: 1645:    const char* needle_expr, const char* haystack_expr,
        -: 1646:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1647:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1647-block  0
call    0 never executed
        -: 1648:}
        -: 1649:
        -: 1650:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1651:AssertionResult IsSubstring(
        -: 1652:    const char* needle_expr, const char* haystack_expr,
        -: 1653:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1654:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1654-block  0
call    0 never executed
        -: 1655:}
        -: 1656:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1657:AssertionResult IsNotSubstring(
        -: 1658:    const char* needle_expr, const char* haystack_expr,
        -: 1659:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1660:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1660-block  0
call    0 never executed
        -: 1661:}
        -: 1662:#endif  // GTEST_HAS_STD_WSTRING
        -: 1663:
        -: 1664:namespace internal {
        -: 1665:
        -: 1666:#if GTEST_OS_WINDOWS
        -: 1667:
        -: 1668:namespace {
        -: 1669:
        -: 1670:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1671:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 1672:                                     const char* expected,
        -: 1673:                                     long hr) {  // NOLINT
        -: 1674:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1675:
        -: 1676:  // Windows CE doesn't support FormatMessage.
        -: 1677:  const char error_text[] = "";
        -: 1678:
        -: 1679:# else
        -: 1680:
        -: 1681:  // Looks up the human-readable system message for the HRESULT code
        -: 1682:  // and since we're not passing any params to FormatMessage, we don't
        -: 1683:  // want inserts expanded.
    #####: 1684:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 1685:                       FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1686:  const DWORD kBufSize = 4096;
        -: 1687:  // Gets the system's human readable message string for this HRESULT.
    #####: 1688:  char error_text[kBufSize] = { '\0' };
    #####: 1689:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1690:                                          0,  // no source, we're asking system
        -: 1691:                                          hr,  // the error
        -: 1692:                                          0,  // no line width restrictions
        -: 1693:                                          error_text,  // output buffer
        -: 1694:                                          kBufSize,  // buf size
        -: 1695:                                          NULL);  // no arguments for inserts
        -: 1696:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1697:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1697-block  0
    %%%%%: 1697-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1697-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1697-block  3
    %%%%%: 1697-block  4
    %%%%%: 1697-block  5
branch  5 never executed
branch  6 never executed
        -: 1698:          --message_length) {
    #####: 1699:    error_text[message_length - 1] = '\0';
    %%%%%: 1699-block  0
        -: 1700:  }
        -: 1701:
        -: 1702:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1703:
    #####: 1704:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1704-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1704-block  2
    #####: 1705:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1705-block  0
call    3 never executed
    $$$$$: 1705-block  1
call    4 never executed
    $$$$$: 1705-block  2
    #####: 1706:      << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1706-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1706-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1706-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1706-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1707:      << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1707-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1707-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1707-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1707-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1707-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1707-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 1707-block  6
    #####: 1708:}
call    0 never executed
    $$$$$: 1708-block  0
call    1 never executed
        -: 1709:
        -: 1710:}  // namespace
        -: 1711:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1712:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1713:  if (SUCCEEDED(hr)) {
    %%%%%: 1713-block  0
branch  0 never executed
branch  1 never executed
    #####: 1714:    return AssertionSuccess();
    %%%%%: 1714-block  0
call    0 never executed
        -: 1715:  }
    #####: 1716:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1716-block  0
call    0 never executed
        -: 1717:}
        -: 1718:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1719:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1720:  if (FAILED(hr)) {
    %%%%%: 1720-block  0
branch  0 never executed
branch  1 never executed
    #####: 1721:    return AssertionSuccess();
    %%%%%: 1721-block  0
call    0 never executed
        -: 1722:  }
    #####: 1723:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1723-block  0
call    0 never executed
        -: 1724:}
        -: 1725:
        -: 1726:#endif  // GTEST_OS_WINDOWS
        -: 1727:
        -: 1728:// Utility functions for encoding Unicode text (wide strings) in
        -: 1729:// UTF-8.
        -: 1730:
        -: 1731:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1732:// like this:
        -: 1733://
        -: 1734:// Code-point length   Encoding
        -: 1735://   0 -  7 bits       0xxxxxxx
        -: 1736://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1737://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1738://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1739:
        -: 1740:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1741:const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;
        -: 1742:
        -: 1743:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1744:const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;
        -: 1745:
        -: 1746:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1747:const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;
        -: 1748:
        -: 1749:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1750:const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;
        -: 1751:
        -: 1752:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1753:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1754:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1755:inline UInt32 ChopLowBits(UInt32* bits, int n) {
    #####: 1756:  const UInt32 low_bits = *bits & ((static_cast<UInt32>(1) << n) - 1);
    #####: 1757:  *bits >>= n;
    #####: 1758:  return low_bits;
    %%%%%: 1758-block  0
        -: 1759:}
        -: 1760:
        -: 1761:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1762:// code_point parameter is of type UInt32 because wchar_t may not be
        -: 1763:// wide enough to contain a code point.
        -: 1764:// If the code_point is not a valid Unicode code point
        -: 1765:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1766:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1767:std::string CodePointToUtf8(UInt32 code_point) {
    #####: 1768:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1768-block  0
branch  0 never executed
branch  1 never executed
    #####: 1769:    return "(Invalid Unicode 0x" + String::FormatHexInt(code_point) + ")";
    %%%%%: 1769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1769-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1769-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1769-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1769-block  4
call   11 never executed
    $$$$$: 1769-block  5
    $$$$$: 1769-block  6
call   12 never executed
    $$$$$: 1769-block  7
        -: 1770:  }
        -: 1771:
        -: 1772:  char str[5];  // Big enough for the largest valid code point.
    #####: 1773:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1773-block  0
branch  0 never executed
branch  1 never executed
    #####: 1774:    str[1] = '\0';
    #####: 1775:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 1775-block  0
    #####: 1776:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1776-block  0
branch  0 never executed
branch  1 never executed
    #####: 1777:    str[2] = '\0';
    #####: 1778:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1778-block  0
call    0 never executed
    #####: 1779:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1780:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1780-block  0
branch  0 never executed
branch  1 never executed
    #####: 1781:    str[3] = '\0';
    #####: 1782:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1782-block  0
call    0 never executed
    #####: 1783:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1784:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1785:  } else {  // code_point <= kMaxCodePoint4
    #####: 1786:    str[4] = '\0';
    #####: 1787:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1787-block  0
call    0 never executed
    #####: 1788:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1789:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1790:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1791:  }
    #####: 1792:  return str;
    %%%%%: 1792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1792-block  1
call    4 never executed
    $$$$$: 1792-block  2
call    5 never executed
    $$$$$: 1792-block  3
        -: 1793:}
        -: 1794:
        -: 1795:// The following two functions only make sense if the system
        -: 1796:// uses UTF-16 for wide string encoding. All supported systems
        -: 1797:// with 16 bit wchar_t (Windows, Cygwin, Symbian OS) do use UTF-16.
        -: 1798:
        -: 1799:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1800:// and thus should be combined into a single Unicode code point
        -: 1801:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1802:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1803:  return sizeof(wchar_t) == 2 &&
    #####: 1804:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 1804-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1804-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1804-block  2
    %%%%%: 1804-block  3
    %%%%%: 1804-block  4
        -: 1805:}
        -: 1806:
        -: 1807:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1808:inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1809:                                                    wchar_t second) {
    #####: 1810:  const UInt32 mask = (1 << 10) - 1;
        -: 1811:  return (sizeof(wchar_t) == 2) ?
    #####: 1812:      (((first & mask) << 10) | (second & mask)) + 0x10000 :
        -: 1813:      // This function should not be called when the condition is
        -: 1814:      // false, but we provide a sensible default in case it is.
    #####: 1815:      static_cast<UInt32>(first);
    %%%%%: 1815-block  0
        -: 1816:}
        -: 1817:
        -: 1818:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 1819:// The wide string is assumed to have the following encoding:
        -: 1820://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
        -: 1821://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 1822:// Parameter str points to a null-terminated wide string.
        -: 1823:// Parameter num_chars may additionally limit the number
        -: 1824:// of wchar_t characters processed. -1 is used when the entire string
        -: 1825:// should be processed.
        -: 1826:// If the string contains code points that are not valid Unicode code points
        -: 1827:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 1828:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 1829:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 1830:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 1831:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 1832:  if (num_chars == -1)
    %%%%%: 1832-block  0
branch  0 never executed
branch  1 never executed
    #####: 1833:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 1833-block  0
call    0 never executed
        -: 1834:
    #####: 1835:  ::std::stringstream stream;
    %%%%%: 1835-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1836:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 1836-block  0
    %%%%%: 1836-block  1
branch  0 never executed
branch  1 never executed
        -: 1837:    UInt32 unicode_code_point;
        -: 1838:
    #####: 1839:    if (str[i] == L'\0') {
    %%%%%: 1839-block  0
branch  0 never executed
branch  1 never executed
    #####: 1840:      break;
    %%%%%: 1840-block  0
    #####: 1841:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 1841-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1841-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1841-block  2
    %%%%%: 1841-block  3
    %%%%%: 1841-block  4
branch  5 never executed
branch  6 never executed
    #####: 1842:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 1843:                                                                 str[i + 1]);
    %%%%%: 1843-block  0
call    0 never executed
    #####: 1844:      i++;
        -: 1845:    } else {
    #####: 1846:      unicode_code_point = static_cast<UInt32>(str[i]);
    %%%%%: 1846-block  0
        -: 1847:    }
        -: 1848:
    #####: 1849:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1849-block  2
call    6 never executed
    $$$$$: 1849-block  3
call    7 never executed
    $$$$$: 1849-block  4
        -: 1850:  }
    #####: 1851:  return StringStreamToString(&stream);
    %%%%%: 1851-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1851-block  1
    #####: 1852:}
    %%%%%: 1852-block  0
call    0 never executed
    $$$$$: 1852-block  1
call    1 never executed
        -: 1853:
        -: 1854:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 1855:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 1856:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 1857:  if (wide_c_str == NULL)  return "(null)";
    %%%%%: 1857-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1857-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1857-block  2
call    6 never executed
    $$$$$: 1857-block  3
call    7 never executed
        -: 1858:
    #####: 1859:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 1859-block  0
call    0 never executed
        -: 1860:}
        -: 1861:
        -: 1862:// Compares two wide C strings.  Returns true iff they have the same
        -: 1863:// content.
        -: 1864://
        -: 1865:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 1866:// C string is considered different to any non-NULL C string,
        -: 1867:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1868:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 1869:  if (lhs == NULL) return rhs == NULL;
    %%%%%: 1869-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1869-block  1
        -: 1870:
    #####: 1871:  if (rhs == NULL) return false;
    %%%%%: 1871-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1871-block  1
        -: 1872:
    #####: 1873:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 1873-block  0
call    0 never executed
        -: 1874:}
        -: 1875:
        -: 1876:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 1877:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1878:                               const char* rhs_expression,
        -: 1879:                               const wchar_t* lhs,
        -: 1880:                               const wchar_t* rhs) {
    #####: 1881:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 1881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1882:    return AssertionSuccess();
    %%%%%: 1882-block  0
call    0 never executed
        -: 1883:  }
        -: 1884:
        -: 1885:  return EqFailure(lhs_expression,
        -: 1886:                   rhs_expression,
    #####: 1887:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1887-block  0
call    3 never executed
    $$$$$: 1887-block  1
call    4 never executed
    $$$$$: 1887-block  2
    #####: 1888:                   PrintToString(rhs),
    %%%%%: 1888-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1888-block  1
call    2 never executed
    #####: 1889:                   false);
    %%%%%: 1889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1890:}
        -: 1891:
        -: 1892:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 1893:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1894:                               const char* s2_expression,
        -: 1895:                               const wchar_t* s1,
        -: 1896:                               const wchar_t* s2) {
    #####: 1897:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 1897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1898:    return AssertionSuccess();
    %%%%%: 1898-block  0
call    0 never executed
        -: 1899:  }
        -: 1900:
    #####: 1901:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1901-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1901-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1901-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1901-block  3
call   10 never executed
    #####: 1902:                            << s2_expression << "), actual: "
    %%%%%: 1902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1902-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1903:                            << PrintToString(s1)
    %%%%%: 1903-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1903-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 1903-block  2
call    7 never executed
    $$$$$: 1903-block  3
    #####: 1904:                            << " vs " << PrintToString(s2);
    %%%%%: 1904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1904-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1904-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1904-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1904-block  4
call   12 never executed
call   13 never executed
    $$$$$: 1904-block  5
call   14 never executed
    $$$$$: 1904-block  6
        -: 1905:}
        -: 1906:
        -: 1907:// Compares two C strings, ignoring case.  Returns true iff they have
        -: 1908:// the same content.
        -: 1909://
        -: 1910:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 1911:// NULL C string is considered different to any non-NULL C string,
        -: 1912:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 1913:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
        4: 1914:  if (lhs == NULL)
        4: 1914-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1915:    return rhs == NULL;
    %%%%%: 1915-block  0
        4: 1916:  if (rhs == NULL)
        4: 1916-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 1917:    return false;
    %%%%%: 1917-block  0
        4: 1918:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 1918-block  0
call    0 returned 4
        -: 1919:}
        -: 1920:
        -: 1921:  // Compares two wide C strings, ignoring case.  Returns true iff they
        -: 1922:  // have the same content.
        -: 1923:  //
        -: 1924:  // Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 1925:  // A NULL C string is considered different to any non-NULL wide C string,
        -: 1926:  // including the empty string.
        -: 1927:  // NB: The implementations on different platforms slightly differ.
        -: 1928:  // On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 1929:  // environment variable. On GNU platform this method uses wcscasecmp
        -: 1930:  // which compares according to LC_CTYPE category of the current locale.
        -: 1931:  // On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 1932:  // current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1933:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 1934:                                              const wchar_t* rhs) {
    #####: 1935:  if (lhs == NULL) return rhs == NULL;
    %%%%%: 1935-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1935-block  1
        -: 1936:
    #####: 1937:  if (rhs == NULL) return false;
    %%%%%: 1937-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1937-block  1
        -: 1938:
        -: 1939:#if GTEST_OS_WINDOWS
    #####: 1940:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 1940-block  0
call    0 never executed
        -: 1941:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
        -: 1942:  return wcscasecmp(lhs, rhs) == 0;
        -: 1943:#else
        -: 1944:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 1945:  // Other unknown OSes may not define it either.
        -: 1946:  wint_t left, right;
        -: 1947:  do {
        -: 1948:    left = towlower(*lhs++);
        -: 1949:    right = towlower(*rhs++);
        -: 1950:  } while (left && left == right);
        -: 1951:  return left == right;
        -: 1952:#endif  // OS selector
        -: 1953:}
        -: 1954:
        -: 1955:// Returns true iff str ends with the given suffix, ignoring case.
        -: 1956:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1957:bool String::EndsWithCaseInsensitive(
        -: 1958:    const std::string& str, const std::string& suffix) {
    #####: 1959:  const size_t str_len = str.length();
    %%%%%: 1959-block  0
call    0 never executed
    #####: 1960:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 1961:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 1961-block  0
    %%%%%: 1961-block  1
    #####: 1962:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 1962-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1963:                                      suffix.c_str());
    %%%%%: 1963-block  0
        -: 1964:}
        -: 1965:
        -: 1966:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1967:std::string String::FormatIntWidth2(int value) {
    #####: 1968:  std::stringstream ss;
    %%%%%: 1968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1969:  ss << std::setfill('0') << std::setw(2) << value;
    %%%%%: 1969-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1969-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1969-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1970:  return ss.str();
    %%%%%: 1970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1970-block  1
    #####: 1971:}
    %%%%%: 1971-block  0
call    0 never executed
    $$$$$: 1971-block  1
call    1 never executed
        -: 1972:
        -: 1973:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1974:std::string String::FormatHexInt(int value) {
    #####: 1975:  std::stringstream ss;
    %%%%%: 1975-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1976:  ss << std::hex << std::uppercase << value;
    %%%%%: 1976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1976-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1976-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1977:  return ss.str();
    %%%%%: 1977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1977-block  1
    #####: 1978:}
    %%%%%: 1978-block  0
call    0 never executed
    $$$$$: 1978-block  1
call    1 never executed
        -: 1979:
        -: 1980:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 1981:std::string String::FormatByte(unsigned char value) {
    #####: 1982:  std::stringstream ss;
    %%%%%: 1982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1983:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 1983-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1983-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1983-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 1983-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1984:     << static_cast<unsigned int>(value);
    %%%%%: 1984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1985:  return ss.str();
    %%%%%: 1985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1985-block  1
    #####: 1986:}
    %%%%%: 1986-block  0
call    0 never executed
    $$$$$: 1986-block  1
call    1 never executed
        -: 1987:
        -: 1988:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 1989:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 69 returned 100% blocks executed 75%
       69: 1990:std::string StringStreamToString(::std::stringstream* ss) {
       69: 1991:  const ::std::string& str = ss->str();
       69: 1991-block  0
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
       69: 1992:  const char* const start = str.c_str();
       69: 1992-block  0
call    0 returned 69
       69: 1993:  const char* const end = start + str.length();
call    0 returned 69
        -: 1994:
       69: 1995:  std::string result;
call    0 returned 69
       69: 1996:  result.reserve(2 * (end - start));
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
      842: 1997:  for (const char* ch = start; ch != end; ++ch) {
       69: 1997-block  0
      773: 1997-block  1
      842: 1997-block  2
branch  0 taken 773
branch  1 taken 69 (fallthrough)
      773: 1998:    if (*ch == '\0') {
      773: 1998-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 773
    #####: 1999:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 1999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2000:    } else {
      773: 2001:      result += *ch;
      773: 2001-block  0
call    0 returned 773
branch  1 taken 773 (fallthrough)
branch  2 taken 0 (throw)
        -: 2002:    }
        -: 2003:  }
        -: 2004:
      138: 2005:  return result;
       69: 2005-block  0
       69: 2005-block  1
       69: 2006:}
       69: 2006-block  0
call    0 returned 69
    $$$$$: 2006-block  1
call    1 never executed
    $$$$$: 2006-block  2
call    2 never executed
        -: 2007:
        -: 2008:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2009:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2010:                              const Message& user_msg) {
        -: 2011:  // Appends the user message if it's non-empty.
    #####: 2012:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2012-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2013:  if (user_msg_string.empty()) {
    %%%%%: 2013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2014:    return gtest_msg;
    %%%%%: 2014-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2015:  }
        -: 2016:
    #####: 2017:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2017-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2017-block  2
call    6 never executed
    $$$$$: 2017-block  3
call    7 never executed
    $$$$$: 2017-block  4
    #####: 2018:}
    %%%%%: 2018-block  0
call    0 never executed
    $$$$$: 2018-block  1
call    1 never executed
        -: 2019:
        -: 2020:}  // namespace internal
        -: 2021:
        -: 2022:// class TestResult
        -: 2023:
        -: 2024:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 17 returned 100% blocks executed 100%
       17: 2025:TestResult::TestResult()
       17: 2026:    : death_test_count_(0),
       17: 2027:      elapsed_time_(0) {
       17: 2027-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
       17: 2028:}
        -: 2029:
        -: 2030:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2031:TestResult::~TestResult() {
    #####: 2032:}
    %%%%%: 2032-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2033:
        -: 2034:// Returns the i-th test part result among all the results. i can
        -: 2035:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2036:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2037:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2038:  if (i < 0 || i >= total_part_count())
    %%%%%: 2038-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2038-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2038-block  2
    %%%%%: 2038-block  3
    %%%%%: 2038-block  4
branch  5 never executed
branch  6 never executed
    #####: 2039:    internal::posix::Abort();
    %%%%%: 2039-block  0
call    0 never executed
    #####: 2040:  return test_part_results_.at(i);
    %%%%%: 2040-block  0
call    0 never executed
        -: 2041:}
        -: 2042:
        -: 2043:// Returns the i-th test property. i can range from 0 to
        -: 2044:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2045:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2046:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2047:  if (i < 0 || i >= test_property_count())
    %%%%%: 2047-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2047-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2047-block  2
    %%%%%: 2047-block  3
    %%%%%: 2047-block  4
branch  5 never executed
branch  6 never executed
    #####: 2048:    internal::posix::Abort();
    %%%%%: 2048-block  0
call    0 never executed
    #####: 2049:  return test_properties_.at(i);
    %%%%%: 2049-block  0
call    0 never executed
        -: 2050:}
        -: 2051:
        -: 2052:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2053:void TestResult::ClearTestPartResults() {
    #####: 2054:  test_part_results_.clear();
    %%%%%: 2054-block  0
call    0 never executed
    #####: 2055:}
        -: 2056:
        -: 2057:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2058:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2059:  test_part_results_.push_back(test_part_result);
    %%%%%: 2059-block  0
call    0 never executed
    #####: 2060:}
        -: 2061:
        -: 2062:// Adds a test property to the list. If a property with the same key as the
        -: 2063:// supplied property is already represented, the value of this test_property
        -: 2064:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2065:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2066:                                const TestProperty& test_property) {
    #####: 2067:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2067-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2067-block  1
branch  3 never executed
branch  4 never executed
    #####: 2068:    return;
    %%%%%: 2068-block  0
    %%%%%: 2068-block  1
        -: 2069:  }
    #####: 2070:  internal::MutexLock lock(&test_properites_mutex_);
    %%%%%: 2070-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2071:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2072:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2072-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2073:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2073-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2073-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2073-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2073-block  3
call   11 never executed
    $$$$$: 2073-block  4
    $$$$$: 2073-block  5
call   12 never executed
    $$$$$: 2073-block  6
    $$$$$: 2073-block  7
call   13 never executed
    $$$$$: 2073-block  8
    #####: 2074:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2075:    test_properties_.push_back(test_property);
    %%%%%: 2075-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2076:    return;
    %%%%%: 2076-block  0
        -: 2077:  }
    #####: 2078:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2078-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2078-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2078-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2078-block  3
call   11 never executed
    $$$$$: 2078-block  4
    $$$$$: 2078-block  5
call   12 never executed
    $$$$$: 2078-block  6
    #####: 2079:}
    %%%%%: 2079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2079-block  1
call    3 never executed
        -: 2080:
        -: 2081:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2082:// output.
        -: 2083:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2084:  "disabled",
        -: 2085:  "errors",
        -: 2086:  "failures",
        -: 2087:  "name",
        -: 2088:  "random_seed",
        -: 2089:  "tests",
        -: 2090:  "time",
        -: 2091:  "timestamp"
        -: 2092:};
        -: 2093:
        -: 2094:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2095:// output.
        -: 2096:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2097:  "disabled",
        -: 2098:  "errors",
        -: 2099:  "failures",
        -: 2100:  "name",
        -: 2101:  "tests",
        -: 2102:  "time"
        -: 2103:};
        -: 2104:
        -: 2105:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2106:static const char* const kReservedTestCaseAttributes[] = {
        -: 2107:  "classname",
        -: 2108:  "name",
        -: 2109:  "status",
        -: 2110:  "time",
        -: 2111:  "type_param",
        -: 2112:  "value_param"
        -: 2113:};
        -: 2114:
        -: 2115:template <int kSize>
    #####: 2116:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2117:  return std::vector<std::string>(array, array + kSize);
        -: 2118:}
------------------
_ZN7testing13ArrayAsVectorILi6EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILi6EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2116:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2117:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2117-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2117-block  1
call    4 never executed
    %%%%%: 2117-block  2
    $$$$$: 2117-block  3
call    5 never executed
        -: 2118:}
------------------
_ZN7testing13ArrayAsVectorILi8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILi8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2116:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2117:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2117-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2117-block  1
call    4 never executed
    %%%%%: 2117-block  2
    $$$$$: 2117-block  3
call    5 never executed
        -: 2118:}
------------------
        -: 2119:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2120:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2121:    const std::string& xml_element) {
    #####: 2122:  if (xml_element == "testsuites") {
    %%%%%: 2122-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2123:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2123-block  0
call    0 never executed
    #####: 2124:  } else if (xml_element == "testsuite") {
    %%%%%: 2124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2125:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2125-block  0
call    0 never executed
    #####: 2126:  } else if (xml_element == "testcase") {
    %%%%%: 2126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2127:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2127-block  0
call    0 never executed
        -: 2128:  } else {
    #####: 2129:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2129-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2129-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2129-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2129-block  4
call   14 never executed
    $$$$$: 2129-block  5
call   15 never executed
        -: 2130:  }
        -: 2131:  // This code is unreachable but some compilers may not realizes that.
    #####: 2132:  return std::vector<std::string>();
    %%%%%: 2132-block  0
call    0 never executed
        -: 2133:}
        -: 2134:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2135:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2136:  Message word_list;
    %%%%%: 2136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2137:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2137-block  0
    %%%%%: 2137-block  1
    %%%%%: 2137-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2138:    if (i > 0 && words.size() > 2) {
    %%%%%: 2138-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2138-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2138-block  2
    %%%%%: 2138-block  3
    %%%%%: 2138-block  4
branch  5 never executed
branch  6 never executed
    #####: 2139:      word_list << ", ";
    %%%%%: 2139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2140:    }
    #####: 2141:    if (i == words.size() - 1) {
    %%%%%: 2141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2142:      word_list << "and ";
    %%%%%: 2142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2143:    }
    #####: 2144:    word_list << "'" << words[i] << "'";
    %%%%%: 2144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2144-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2144-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2145:  }
    #####: 2146:  return word_list.GetString();
    %%%%%: 2146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2146-block  1
    #####: 2147:}
    %%%%%: 2147-block  0
call    0 never executed
    $$$$$: 2147-block  1
call    1 never executed
        -: 2148:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2149:static bool ValidateTestPropertyName(
        -: 2150:    const std::string& property_name,
        -: 2151:    const std::vector<std::string>& reserved_names) {
    #####: 2152:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2152-block  0
call    5 never executed
    #####: 2153:          reserved_names.end()) {
    %%%%%: 2153-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2153-block  1
call    3 never executed
    #####: 2154:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2154-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2154-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2154-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2154-block  3
call   10 never executed
    $$$$$: 2154-block  4
call   11 never executed
    $$$$$: 2154-block  5
    $$$$$: 2154-block  6
call   12 never executed
    #####: 2155:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2155-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2155-block  3
call   11 never executed
    $$$$$: 2155-block  4
    #####: 2156:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2156-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2156-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2156-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2157:    return false;
        -: 2158:  }
    #####: 2159:  return true;
    %%%%%: 2159-block  0
        -: 2160:}
        -: 2161:
        -: 2162:// Adds a failure if the key is a reserved attribute of the element named
        -: 2163:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2164:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2165:                                      const TestProperty& test_property) {
    #####: 2166:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2166-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2166-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2166-block  2
call   10 never executed
    $$$$$: 2166-block  3
    $$$$$: 2166-block  4
call   11 never executed
    $$$$$: 2166-block  5
    #####: 2167:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2167-block  0
call    0 never executed
    %%%%%: 2167-block  1
call    1 never executed
    %%%%%: 2167-block  2
    $$$$$: 2167-block  3
call    2 never executed
        -: 2168:}
        -: 2169:
        -: 2170:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 16 returned 100% blocks executed 100%
       16: 2171:void TestResult::Clear() {
       16: 2172:  test_part_results_.clear();
       16: 2172-block  0
call    0 returned 16
       16: 2173:  test_properties_.clear();
call    0 returned 16
       16: 2174:  death_test_count_ = 0;
       16: 2175:  elapsed_time_ = 0;
       16: 2176:}
        -: 2177:
        -: 2178:// Returns true iff the test failed.
function _ZNK7testing10TestResult6FailedEv called 68 returned 100% blocks executed 50%
       68: 2179:bool TestResult::Failed() const {
      68*: 2180:  for (int i = 0; i < total_part_count(); ++i) {
       68: 2180-block  0
    %%%%%: 2180-block  1
       68: 2180-block  2
call    0 returned 68
branch  1 taken 0
branch  2 taken 68 (fallthrough)
    #####: 2181:    if (GetTestPartResult(i).failed())
    %%%%%: 2181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2182:      return true;
    %%%%%: 2182-block  0
        -: 2183:  }
       68: 2184:  return false;
       68: 2184-block  0
        -: 2185:}
        -: 2186:
        -: 2187:// Returns true iff the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2188:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2189:  return result.fatally_failed();
    %%%%%: 2189-block  0
call    0 never executed
        -: 2190:}
        -: 2191:
        -: 2192:// Returns true iff the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 23 returned 100% blocks executed 100%
       23: 2193:bool TestResult::HasFatalFailure() const {
       23: 2194:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       23: 2194-block  0
call    0 returned 23
        -: 2195:}
        -: 2196:
        -: 2197:// Returns true iff the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2198:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2199:  return result.nonfatally_failed();
    %%%%%: 2199-block  0
call    0 never executed
        -: 2200:}
        -: 2201:
        -: 2202:// Returns true iff the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2203:bool TestResult::HasNonfatalFailure() const {
    #####: 2204:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2204-block  0
call    0 never executed
        -: 2205:}
        -: 2206:
        -: 2207:// Gets the number of all test parts.  This is the sum of the number
        -: 2208:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 68 returned 100% blocks executed 100%
       68: 2209:int TestResult::total_part_count() const {
       68: 2210:  return static_cast<int>(test_part_results_.size());
       68: 2210-block  0
call    0 returned 68
        -: 2211:}
        -: 2212:
        -: 2213:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2214:int TestResult::test_property_count() const {
    #####: 2215:  return static_cast<int>(test_properties_.size());
    %%%%%: 2215-block  0
call    0 never executed
        -: 2216:}
        -: 2217:
        -: 2218:// class Test
        -: 2219:
        -: 2220:// Creates a Test object.
        -: 2221:
        -: 2222:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 11 returned 100% blocks executed 83%
       11: 2223:Test::Test()
       11: 2224:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       11: 2224-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 2224-block  1
call    4 returned 11
    $$$$$: 2224-block  2
call    5 never executed
       11: 2225:}
        -: 2226:
        -: 2227:// The d'tor restores the states of all flags.  The actual work is
        -: 2228:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2229:// visible here.
      11*: 2230:Test::~Test() {
      11*: 2231:}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2230:Test::~Test() {
    #####: 2231:}
    %%%%%: 2231-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 11 returned 100% blocks executed 100%
       11: 2230:Test::~Test() {
       11: 2231:}
       11: 2231-block  0
call    0 returned 11
------------------
        -: 2232:
        -: 2233:// Sets up the test fixture.
        -: 2234://
        -: 2235:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 11 returned 100% blocks executed 100%
       11: 2236:void Test::SetUp() {
       11: 2237:}
        -: 2238:
        -: 2239:// Tears down the test fixture.
        -: 2240://
        -: 2241:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 11 returned 100% blocks executed 100%
       11: 2242:void Test::TearDown() {
       11: 2243:}
        -: 2244:
        -: 2245:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2246:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2247:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2247-block  0
call    0 never executed
call    1 never executed
    #####: 2248:}
        -: 2249:
        -: 2250:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2251:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2252:  Message value_message;
    %%%%%: 2252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2253:  value_message << value;
    %%%%%: 2253-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2254:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2254-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2254-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2254-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2254-block  3
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 2254-block  4
call   14 never executed
    $$$$$: 2254-block  5
    $$$$$: 2254-block  6
call   15 never executed
    $$$$$: 2254-block  7
    $$$$$: 2254-block  8
call   16 never executed
    $$$$$: 2254-block  9
    #####: 2255:}
call    0 never executed
    $$$$$: 2255-block  0
call    1 never executed
        -: 2256:
        -: 2257:namespace internal {
        -: 2258:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2259:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2260:                                    const std::string& message) {
        -: 2261:  // This function is a friend of UnitTest and as such has access to
        -: 2262:  // AddTestPartResult.
    #####: 2263:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2263-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2263-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2263-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2263-block  3
call   10 never executed
    $$$$$: 2263-block  4
    $$$$$: 2263-block  5
call   11 never executed
        -: 2264:      result_type,
        -: 2265:      NULL,  // No info about the source file where the exception occurred.
        -: 2266:      -1,    // We have no info on which line caused the exception.
        -: 2267:      message,
        -: 2268:      "");   // No stack trace, either.
    #####: 2269:}
        -: 2270:
        -: 2271:}  // namespace internal
        -: 2272:
        -: 2273:// Google Test requires all tests in the same test case to use the same test
        -: 2274:// fixture class.  This function checks if the current test has the
        -: 2275:// same fixture class as the first test in the current test case.  If
        -: 2276:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2277:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 11 returned 100% blocks executed 15%
       11: 2278:bool Test::HasSameFixtureClass() {
       11: 2279:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       11: 2279-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 2280:  const TestCase* const test_case = impl->current_test_case();
       11: 2280-block  0
call    0 returned 11
        -: 2281:
        -: 2282:  // Info about the first test in the current test case.
       11: 2283:  const TestInfo* const first_test_info = test_case->test_info_list()[0];
call    0 returned 11
call    1 returned 11
       11: 2284:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       11: 2285:  const char* const first_test_name = first_test_info->name();
call    0 returned 11
        -: 2286:
        -: 2287:  // Info about the current test.
       11: 2288:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 11
       11: 2289:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       11: 2290:  const char* const this_test_name = this_test_info->name();
call    0 returned 11
        -: 2291:
       11: 2292:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -: 2293:    // Is the first test defined using TEST?
    #####: 2294:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2295:    // Is this test defined using TEST?
    #####: 2296:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2297:
    #####: 2298:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2298-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2298-block  1
branch  2 never executed
branch  3 never executed
        -: 2299:      // Both TEST and TEST_F appear in same test case, which is incorrect.
        -: 2300:      // Tell the user how to fix this.
        -: 2301:
        -: 2302:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2303:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2304:      // the fixture IDs are different for the two tests.
    #####: 2305:      const char* const TEST_name =
    %%%%%: 2305-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2305-block  1
    %%%%%: 2305-block  2
        -: 2306:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2307:      const char* const TEST_F_name =
    %%%%%: 2307-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2307-block  1
    %%%%%: 2307-block  2
        -: 2308:          first_is_TEST ? this_test_name : first_test_name;
        -: 2309:
    #####: 2310:      ADD_FAILURE()
    %%%%%: 2310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2310-block  2
call    6 never executed
    $$$$$: 2310-block  3
call    7 never executed
    $$$$$: 2310-block  4
    $$$$$: 2310-block  5
call    8 never executed
    $$$$$: 2310-block  6
    #####: 2311:          << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 2311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2312:          << "class, so mixing TEST_F and TEST in the same test case is\n"
    %%%%%: 2312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2313:          << "illegal.  In test case " << this_test_info->test_case_name()
    %%%%%: 2313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2313-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2313-block  2
    #####: 2314:          << ",\n"
    %%%%%: 2314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2315:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2315-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2315-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2316:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2316-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2316-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2317:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2318:          << "case.";
    %%%%%: 2318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2318-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2319:    } else {
        -: 2320:      // Two fixture classes with the same name appear in two different
        -: 2321:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2322:      ADD_FAILURE()
    %%%%%: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2322-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2322-block  2
call    6 never executed
    $$$$$: 2322-block  3
call    7 never executed
    $$$$$: 2322-block  4
    $$$$$: 2322-block  5
call    8 never executed
    $$$$$: 2322-block  6
    #####: 2323:          << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2324:          << "class.  However, in test case "
    %%%%%: 2324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2325:          << this_test_info->test_case_name() << ",\n"
    %%%%%: 2325-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2325-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2325-block  2
    #####: 2326:          << "you defined test " << first_test_name
    %%%%%: 2326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2326-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2327:          << " and test " << this_test_name << "\n"
    %%%%%: 2327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2327-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2327-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2328:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2329:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2330:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2331:          << "of the classes to put the tests into different test cases.";
    %%%%%: 2331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2331-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2332:    }
    #####: 2333:    return false;
    %%%%%: 2333-block  0
        -: 2334:  }
        -: 2335:
       11: 2336:  return true;
       11: 2336-block  0
        -: 2337:}
        -: 2338:
        -: 2339:#if GTEST_HAS_SEH
        -: 2340:
        -: 2341:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2342:// function returns its result via an output parameter pointer because VC++
        -: 2343:// prohibits creation of objects with destructors on stack in functions
        -: 2344:// using __try (see error C2712).
        -: 2345:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2346:                                              const char* location) {
        -: 2347:  Message message;
        -: 2348:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2349:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2350:
        -: 2351:  return new std::string(message.GetString());
        -: 2352:}
        -: 2353:
        -: 2354:#endif  // GTEST_HAS_SEH
        -: 2355:
        -: 2356:namespace internal {
        -: 2357:
        -: 2358:#if GTEST_HAS_EXCEPTIONS
        -: 2359:
        -: 2360:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2361:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2362:                                             const char* location) {
    #####: 2363:  Message message;
    %%%%%: 2363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2364:  if (description != NULL) {
    %%%%%: 2364-block  0
branch  0 never executed
branch  1 never executed
    #####: 2365:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2365-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2366:  } else {
    #####: 2367:    message << "Unknown C++ exception";
    %%%%%: 2367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2368:  }
    #####: 2369:  message << " thrown in " << location << ".";
    %%%%%: 2369-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2369-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2369-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2370:
    #####: 2371:  return message.GetString();
    %%%%%: 2371-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2371-block  1
    #####: 2372:}
    %%%%%: 2372-block  0
call    0 never executed
    $$$$$: 2372-block  1
call    1 never executed
        -: 2373:
        -: 2374:static std::string PrintTestPartResultToString(
        -: 2375:    const TestPartResult& test_part_result);
        -: 2376:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2377:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2378:    const TestPartResult& failure)
    #####: 2379:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2379-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2379-block  1
call    5 never executed
    $$$$$: 2379-block  2
call    6 never executed
        -: 2380:
        -: 2381:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2382:
        -: 2383:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2384:// compiler rejects the code if they were declared static.
        -: 2385:
        -: 2386:// Runs the given method and handles SEH exceptions it throws, when
        -: 2387:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2388:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2389:// exceptions in the same function.  Therefore, we provide a separate
        -: 2390:// wrapper function for handling SEH exceptions.)
        -: 2391:template <class T, typename Result>
       66: 2392:Result HandleSehExceptionsInMethodIfSupported(
        -: 2393:    T* object, Result (T::*method)(), const char* location) {
        -: 2394:#if GTEST_HAS_SEH
        -: 2395:  __try {
        -: 2396:    return (object->*method)();
        -: 2397:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2398:      GetExceptionCode())) {
        -: 2399:    // We create the exception message on the heap because VC++ prohibits
        -: 2400:    // creation of objects with destructors on stack in functions using __try
        -: 2401:    // (see error C2712).
        -: 2402:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2403:        GetExceptionCode(), location);
        -: 2404:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2405:                                             *exception_message);
        -: 2406:    delete exception_message;
        -: 2407:    return static_cast<Result>(0);
        -: 2408:  }
        -: 2409:#else
        -: 2410:  (void)location;
      66*: 2411:  return (object->*method)();
        -: 2412:#endif  // GTEST_HAS_SEH
        -: 2413:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2392:Result HandleSehExceptionsInMethodIfSupported(
        -: 2393:    T* object, Result (T::*method)(), const char* location) {
        -: 2394:#if GTEST_HAS_SEH
        -: 2395:  __try {
        -: 2396:    return (object->*method)();
        -: 2397:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2398:      GetExceptionCode())) {
        -: 2399:    // We create the exception message on the heap because VC++ prohibits
        -: 2400:    // creation of objects with destructors on stack in functions using __try
        -: 2401:    // (see error C2712).
        -: 2402:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2403:        GetExceptionCode(), location);
        -: 2404:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2405:                                             *exception_message);
        -: 2406:    delete exception_message;
        -: 2407:    return static_cast<Result>(0);
        -: 2408:  }
        -: 2409:#else
        -: 2410:  (void)location;
       1*: 2411:  return (object->*method)();
        1: 2411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2411-block  1
        1: 2411-block  2
        1: 2411-block  3
call    2 returned 1
        -: 2412:#endif  // GTEST_HAS_SEH
        -: 2413:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 10 returned 100% blocks executed 80%
       10: 2392:Result HandleSehExceptionsInMethodIfSupported(
        -: 2393:    T* object, Result (T::*method)(), const char* location) {
        -: 2394:#if GTEST_HAS_SEH
        -: 2395:  __try {
        -: 2396:    return (object->*method)();
        -: 2397:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2398:      GetExceptionCode())) {
        -: 2399:    // We create the exception message on the heap because VC++ prohibits
        -: 2400:    // creation of objects with destructors on stack in functions using __try
        -: 2401:    // (see error C2712).
        -: 2402:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2403:        GetExceptionCode(), location);
        -: 2404:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2405:                                             *exception_message);
        -: 2406:    delete exception_message;
        -: 2407:    return static_cast<Result>(0);
        -: 2408:  }
        -: 2409:#else
        -: 2410:  (void)location;
      10*: 2411:  return (object->*method)();
       10: 2411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 2411-block  1
       10: 2411-block  2
       10: 2411-block  3
call    2 returned 10
        -: 2412:#endif  // GTEST_HAS_SEH
        -: 2413:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 11 returned 100% blocks executed 83%
       11: 2392:Result HandleSehExceptionsInMethodIfSupported(
        -: 2393:    T* object, Result (T::*method)(), const char* location) {
        -: 2394:#if GTEST_HAS_SEH
        -: 2395:  __try {
        -: 2396:    return (object->*method)();
        -: 2397:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2398:      GetExceptionCode())) {
        -: 2399:    // We create the exception message on the heap because VC++ prohibits
        -: 2400:    // creation of objects with destructors on stack in functions using __try
        -: 2401:    // (see error C2712).
        -: 2402:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2403:        GetExceptionCode(), location);
        -: 2404:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2405:                                             *exception_message);
        -: 2406:    delete exception_message;
        -: 2407:    return static_cast<Result>(0);
        -: 2408:  }
        -: 2409:#else
        -: 2410:  (void)location;
      11*: 2411:  return (object->*method)();
       11: 2411-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 2411-block  1
    %%%%%: 2411-block  2
       11: 2411-block  3
call    2 returned 11
        -: 2412:#endif  // GTEST_HAS_SEH
        -: 2413:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 44 returned 100% blocks executed 100%
       44: 2392:Result HandleSehExceptionsInMethodIfSupported(
        -: 2393:    T* object, Result (T::*method)(), const char* location) {
        -: 2394:#if GTEST_HAS_SEH
        -: 2395:  __try {
        -: 2396:    return (object->*method)();
        -: 2397:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2398:      GetExceptionCode())) {
        -: 2399:    // We create the exception message on the heap because VC++ prohibits
        -: 2400:    // creation of objects with destructors on stack in functions using __try
        -: 2401:    // (see error C2712).
        -: 2402:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2403:        GetExceptionCode(), location);
        -: 2404:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2405:                                             *exception_message);
        -: 2406:    delete exception_message;
        -: 2407:    return static_cast<Result>(0);
        -: 2408:  }
        -: 2409:#else
        -: 2410:  (void)location;
       44: 2411:  return (object->*method)();
       44: 2411-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 11
       33: 2411-block  1
       11: 2411-block  2
       44: 2411-block  3
call    2 returned 44
        -: 2412:#endif  // GTEST_HAS_SEH
        -: 2413:}
------------------
        -: 2414:
        -: 2415:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2416:// exceptions, if they are supported; returns the 0-value for type
        -: 2417:// Result in case of an SEH exception.
        -: 2418:template <class T, typename Result>
       66: 2419:Result HandleExceptionsInMethodIfSupported(
        -: 2420:    T* object, Result (T::*method)(), const char* location) {
        -: 2421:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2422:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2423:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2424:  // after the exception is caught and either report or re-throw the
        -: 2425:  // exception based on the flag's value:
        -: 2426:  //
        -: 2427:  // try {
        -: 2428:  //   // Perform the test method.
        -: 2429:  // } catch (...) {
        -: 2430:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2431:  //     // Report the exception as failure.
        -: 2432:  //   else
        -: 2433:  //     throw;  // Re-throws the original exception.
        -: 2434:  // }
        -: 2435:  //
        -: 2436:  // However, the purpose of this flag is to allow the program to drop into
        -: 2437:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2438:  // control enters the catch block, the exception origin information is
        -: 2439:  // lost and the debugger will stop the program at the point of the
        -: 2440:  // re-throw in this function -- instead of at the point of the original
        -: 2441:  // throw statement in the code under test.  For this reason, we perform
        -: 2442:  // the check early, sacrificing the ability to affect Google Test's
        -: 2443:  // exception handling in the method where the exception is thrown.
       66: 2444:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2445:#if GTEST_HAS_EXCEPTIONS
        -: 2446:    try {
       66: 2447:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2448:    } catch (const AssertionException&) {  // NOLINT
        -: 2449:      // This failure was reported already.
    =====: 2450:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2451:      // This exception type can only be thrown by a failed Google
        -: 2452:      // Test assertion with the intention of letting another testing
        -: 2453:      // framework catch it.  Therefore we just re-throw it.
    =====: 2454:      throw;
    =====: 2455:    } catch (const std::exception& e) {  // NOLINT
    =====: 2456:      internal::ReportFailureInUnknownLocation(
        -: 2457:          TestPartResult::kFatalFailure,
    =====: 2458:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2459:    } catch (...) {  // NOLINT
    =====: 2460:      internal::ReportFailureInUnknownLocation(
        -: 2461:          TestPartResult::kFatalFailure,
        -: 2462:          FormatCxxExceptionMessage(NULL, location));
        -: 2463:    }
    =====: 2464:    return static_cast<Result>(0);
        -: 2465:#else
        -: 2466:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2467:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2468:  } else {
    #####: 2469:    return (object->*method)();
        -: 2470:  }
        -: 2471:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2419:Result HandleExceptionsInMethodIfSupported(
        -: 2420:    T* object, Result (T::*method)(), const char* location) {
        -: 2421:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2422:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2423:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2424:  // after the exception is caught and either report or re-throw the
        -: 2425:  // exception based on the flag's value:
        -: 2426:  //
        -: 2427:  // try {
        -: 2428:  //   // Perform the test method.
        -: 2429:  // } catch (...) {
        -: 2430:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2431:  //     // Report the exception as failure.
        -: 2432:  //   else
        -: 2433:  //     throw;  // Re-throws the original exception.
        -: 2434:  // }
        -: 2435:  //
        -: 2436:  // However, the purpose of this flag is to allow the program to drop into
        -: 2437:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2438:  // control enters the catch block, the exception origin information is
        -: 2439:  // lost and the debugger will stop the program at the point of the
        -: 2440:  // re-throw in this function -- instead of at the point of the original
        -: 2441:  // throw statement in the code under test.  For this reason, we perform
        -: 2442:  // the check early, sacrificing the ability to affect Google Test's
        -: 2443:  // exception handling in the method where the exception is thrown.
        1: 2444:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2444-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2445:#if GTEST_HAS_EXCEPTIONS
        -: 2446:    try {
        1: 2447:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2447-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2447-block  1
    =====: 2448:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2448-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2448-block  1
call    4 never executed
call    5 never executed
        -: 2449:      // This failure was reported already.
    =====: 2450:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2450-block  0
call    0 never executed
    $$$$$: 2450-block  1
call    1 never executed
        -: 2451:      // This exception type can only be thrown by a failed Google
        -: 2452:      // Test assertion with the intention of letting another testing
        -: 2453:      // framework catch it.  Therefore we just re-throw it.
    =====: 2454:      throw;
call    0 never executed
    =====: 2455:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2455-block  0
call    0 never executed
    $$$$$: 2455-block  1
call    1 never executed
    =====: 2456:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2456-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2456-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2456-block  2
call    8 never executed
    $$$$$: 2456-block  3
        -: 2457:          TestPartResult::kFatalFailure,
    =====: 2458:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2459:    } catch (...) {  // NOLINT
    $$$$$: 2459-block  0
call    0 never executed
    $$$$$: 2459-block  1
call    1 never executed
    =====: 2460:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2460-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2460-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2460-block  2
call    8 never executed
    $$$$$: 2460-block  3
        -: 2461:          TestPartResult::kFatalFailure,
        -: 2462:          FormatCxxExceptionMessage(NULL, location));
        -: 2463:    }
    =====: 2464:    return static_cast<Result>(0);
    $$$$$: 2464-block  0
        -: 2465:#else
        -: 2466:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2467:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2468:  } else {
    #####: 2469:    return (object->*method)();
    %%%%%: 2469-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2469-block  1
    %%%%%: 2469-block  2
    %%%%%: 2469-block  3
call    2 never executed
        -: 2470:  }
        -: 2471:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_8TestCaseEvEET0_PT_MS4_FS3_vEPKc called 10 returned 100% blocks executed 18%
       10: 2419:Result HandleExceptionsInMethodIfSupported(
        -: 2420:    T* object, Result (T::*method)(), const char* location) {
        -: 2421:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2422:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2423:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2424:  // after the exception is caught and either report or re-throw the
        -: 2425:  // exception based on the flag's value:
        -: 2426:  //
        -: 2427:  // try {
        -: 2428:  //   // Perform the test method.
        -: 2429:  // } catch (...) {
        -: 2430:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2431:  //     // Report the exception as failure.
        -: 2432:  //   else
        -: 2433:  //     throw;  // Re-throws the original exception.
        -: 2434:  // }
        -: 2435:  //
        -: 2436:  // However, the purpose of this flag is to allow the program to drop into
        -: 2437:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2438:  // control enters the catch block, the exception origin information is
        -: 2439:  // lost and the debugger will stop the program at the point of the
        -: 2440:  // re-throw in this function -- instead of at the point of the original
        -: 2441:  // throw statement in the code under test.  For this reason, we perform
        -: 2442:  // the check early, sacrificing the ability to affect Google Test's
        -: 2443:  // exception handling in the method where the exception is thrown.
       10: 2444:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       10: 2444-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
        -: 2445:#if GTEST_HAS_EXCEPTIONS
        -: 2446:    try {
       10: 2447:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       10: 2447-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 2447-block  1
    =====: 2448:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2448-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2448-block  1
call    4 never executed
call    5 never executed
        -: 2449:      // This failure was reported already.
    =====: 2450:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2450-block  0
call    0 never executed
    $$$$$: 2450-block  1
call    1 never executed
        -: 2451:      // This exception type can only be thrown by a failed Google
        -: 2452:      // Test assertion with the intention of letting another testing
        -: 2453:      // framework catch it.  Therefore we just re-throw it.
    =====: 2454:      throw;
call    0 never executed
    =====: 2455:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2455-block  0
call    0 never executed
    $$$$$: 2455-block  1
call    1 never executed
    =====: 2456:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2456-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2456-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2456-block  2
call    8 never executed
    $$$$$: 2456-block  3
        -: 2457:          TestPartResult::kFatalFailure,
    =====: 2458:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2459:    } catch (...) {  // NOLINT
    $$$$$: 2459-block  0
call    0 never executed
    $$$$$: 2459-block  1
call    1 never executed
    =====: 2460:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2460-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2460-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2460-block  2
call    8 never executed
    $$$$$: 2460-block  3
        -: 2461:          TestPartResult::kFatalFailure,
        -: 2462:          FormatCxxExceptionMessage(NULL, location));
        -: 2463:    }
    =====: 2464:    return static_cast<Result>(0);
    $$$$$: 2464-block  0
        -: 2465:#else
        -: 2466:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2467:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2468:  } else {
    #####: 2469:    return (object->*method)();
    %%%%%: 2469-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2469-block  1
    %%%%%: 2469-block  2
    %%%%%: 2469-block  3
call    2 never executed
        -: 2470:  }
        -: 2471:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 11 returned 100% blocks executed 18%
       11: 2419:Result HandleExceptionsInMethodIfSupported(
        -: 2420:    T* object, Result (T::*method)(), const char* location) {
        -: 2421:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2422:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2423:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2424:  // after the exception is caught and either report or re-throw the
        -: 2425:  // exception based on the flag's value:
        -: 2426:  //
        -: 2427:  // try {
        -: 2428:  //   // Perform the test method.
        -: 2429:  // } catch (...) {
        -: 2430:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2431:  //     // Report the exception as failure.
        -: 2432:  //   else
        -: 2433:  //     throw;  // Re-throws the original exception.
        -: 2434:  // }
        -: 2435:  //
        -: 2436:  // However, the purpose of this flag is to allow the program to drop into
        -: 2437:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2438:  // control enters the catch block, the exception origin information is
        -: 2439:  // lost and the debugger will stop the program at the point of the
        -: 2440:  // re-throw in this function -- instead of at the point of the original
        -: 2441:  // throw statement in the code under test.  For this reason, we perform
        -: 2442:  // the check early, sacrificing the ability to affect Google Test's
        -: 2443:  // exception handling in the method where the exception is thrown.
       11: 2444:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       11: 2444-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0
        -: 2445:#if GTEST_HAS_EXCEPTIONS
        -: 2446:    try {
       11: 2447:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       11: 2447-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 2447-block  1
    =====: 2448:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2448-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2448-block  1
call    4 never executed
call    5 never executed
        -: 2449:      // This failure was reported already.
    =====: 2450:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2450-block  0
call    0 never executed
    $$$$$: 2450-block  1
call    1 never executed
        -: 2451:      // This exception type can only be thrown by a failed Google
        -: 2452:      // Test assertion with the intention of letting another testing
        -: 2453:      // framework catch it.  Therefore we just re-throw it.
    =====: 2454:      throw;
call    0 never executed
    =====: 2455:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2455-block  0
call    0 never executed
    $$$$$: 2455-block  1
call    1 never executed
    =====: 2456:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2456-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2456-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2456-block  2
call    8 never executed
    $$$$$: 2456-block  3
        -: 2457:          TestPartResult::kFatalFailure,
    =====: 2458:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2459:    } catch (...) {  // NOLINT
    $$$$$: 2459-block  0
call    0 never executed
    $$$$$: 2459-block  1
call    1 never executed
    =====: 2460:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2460-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2460-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2460-block  2
call    8 never executed
    $$$$$: 2460-block  3
        -: 2461:          TestPartResult::kFatalFailure,
        -: 2462:          FormatCxxExceptionMessage(NULL, location));
        -: 2463:    }
    =====: 2464:    return static_cast<Result>(0);
    $$$$$: 2464-block  0
        -: 2465:#else
        -: 2466:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2467:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2468:  } else {
    #####: 2469:    return (object->*method)();
    %%%%%: 2469-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2469-block  1
    %%%%%: 2469-block  2
    %%%%%: 2469-block  3
call    2 never executed
        -: 2470:  }
        -: 2471:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 44 returned 100% blocks executed 18%
       44: 2419:Result HandleExceptionsInMethodIfSupported(
        -: 2420:    T* object, Result (T::*method)(), const char* location) {
        -: 2421:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2422:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2423:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2424:  // after the exception is caught and either report or re-throw the
        -: 2425:  // exception based on the flag's value:
        -: 2426:  //
        -: 2427:  // try {
        -: 2428:  //   // Perform the test method.
        -: 2429:  // } catch (...) {
        -: 2430:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2431:  //     // Report the exception as failure.
        -: 2432:  //   else
        -: 2433:  //     throw;  // Re-throws the original exception.
        -: 2434:  // }
        -: 2435:  //
        -: 2436:  // However, the purpose of this flag is to allow the program to drop into
        -: 2437:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2438:  // control enters the catch block, the exception origin information is
        -: 2439:  // lost and the debugger will stop the program at the point of the
        -: 2440:  // re-throw in this function -- instead of at the point of the original
        -: 2441:  // throw statement in the code under test.  For this reason, we perform
        -: 2442:  // the check early, sacrificing the ability to affect Google Test's
        -: 2443:  // exception handling in the method where the exception is thrown.
       44: 2444:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       44: 2444-block  0
call    0 returned 44
call    1 returned 44
branch  2 taken 44 (fallthrough)
branch  3 taken 0
        -: 2445:#if GTEST_HAS_EXCEPTIONS
        -: 2446:    try {
       44: 2447:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       44: 2447-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44: 2447-block  1
    =====: 2448:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2448-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2448-block  1
call    4 never executed
call    5 never executed
        -: 2449:      // This failure was reported already.
    =====: 2450:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2450-block  0
call    0 never executed
    $$$$$: 2450-block  1
call    1 never executed
        -: 2451:      // This exception type can only be thrown by a failed Google
        -: 2452:      // Test assertion with the intention of letting another testing
        -: 2453:      // framework catch it.  Therefore we just re-throw it.
    =====: 2454:      throw;
call    0 never executed
    =====: 2455:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2455-block  0
call    0 never executed
    $$$$$: 2455-block  1
call    1 never executed
    =====: 2456:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2456-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2456-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2456-block  2
call    8 never executed
    $$$$$: 2456-block  3
        -: 2457:          TestPartResult::kFatalFailure,
    =====: 2458:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2459:    } catch (...) {  // NOLINT
    $$$$$: 2459-block  0
call    0 never executed
    $$$$$: 2459-block  1
call    1 never executed
    =====: 2460:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2460-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2460-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2460-block  2
call    8 never executed
    $$$$$: 2460-block  3
        -: 2461:          TestPartResult::kFatalFailure,
        -: 2462:          FormatCxxExceptionMessage(NULL, location));
        -: 2463:    }
    =====: 2464:    return static_cast<Result>(0);
    $$$$$: 2464-block  0
        -: 2465:#else
        -: 2466:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2467:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2468:  } else {
    #####: 2469:    return (object->*method)();
    %%%%%: 2469-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2469-block  1
    %%%%%: 2469-block  2
    %%%%%: 2469-block  3
call    2 never executed
        -: 2470:  }
        -: 2471:}
------------------
        -: 2472:
        -: 2473:}  // namespace internal
        -: 2474:
        -: 2475:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 11 returned 100% blocks executed 94%
       11: 2476:void Test::Run() {
      11*: 2477:  if (!HasSameFixtureClass()) return;
       11: 2477-block  0
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    %%%%%: 2477-block  1
        -: 2478:
       11: 2479:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       11: 2479-block  0
call    0 returned 11
       11: 2480:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 11
call    1 returned 11
       11: 2481:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 11
        -: 2482:  // We will run the test only if SetUp() was successful.
       11: 2483:  if (!HasFatalFailure()) {
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0
       11: 2484:    impl->os_stack_trace_getter()->UponLeavingGTest();
       11: 2484-block  0
call    0 returned 11
call    1 returned 11
       11: 2485:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 11
        -: 2486:        this, &Test::TestBody, "the test body");
        -: 2487:  }
        -: 2488:
        -: 2489:  // However, we want to clean up as much as possible.  Hence we will
        -: 2490:  // always call TearDown(), even if SetUp() or the test body has
        -: 2491:  // failed.
       11: 2492:  impl->os_stack_trace_getter()->UponLeavingGTest();
       11: 2492-block  0
call    0 returned 11
call    1 returned 11
       11: 2493:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 11
        -: 2494:      this, &Test::TearDown, "TearDown()");
        -: 2495:}
        -: 2496:
        -: 2497:// Returns true iff the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 23 returned 100% blocks executed 100%
       23: 2498:bool Test::HasFatalFailure() {
       23: 2499:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       23: 2499-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
        -: 2500:}
        -: 2501:
        -: 2502:// Returns true iff the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2503:bool Test::HasNonfatalFailure() {
        -: 2504:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 2505:      HasNonfatalFailure();
    %%%%%: 2505-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2506:}
        -: 2507:
        -: 2508:// class TestInfo
        -: 2509:
        -: 2510:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2511:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 11 returned 100% blocks executed 31%
       11: 2512:TestInfo::TestInfo(const std::string& a_test_case_name,
        -: 2513:                   const std::string& a_name,
        -: 2514:                   const char* a_type_param,
        -: 2515:                   const char* a_value_param,
        -: 2516:                   internal::CodeLocation a_code_location,
        -: 2517:                   internal::TypeId fixture_class_id,
       11: 2518:                   internal::TestFactoryBase* factory)
       11: 2519:    : test_case_name_(a_test_case_name),
       11: 2519-block  0
call    0 returned 11
       11: 2520:      name_(a_name),
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
      11*: 2521:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
       11: 2521-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 2521-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2521-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2521-block  3
       11: 2521-block  4
       11: 2521-block  5
call    9 returned 11
branch 10 taken 0 (fallthrough)
branch 11 taken 11
    %%%%%: 2521-block  6
call   12 never executed
    $$$$$: 2521-block  7
call   13 never executed
    $$$$$: 2521-block  8
branch 14 never executed
branch 15 never executed
    $$$$$: 2521-block  9
call   16 never executed
    $$$$$: 2521-block 10
      11*: 2522:      value_param_(a_value_param ? new std::string(a_value_param) : NULL),
       11: 2522-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 2522-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2522-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2522-block  3
       11: 2522-block  4
       11: 2522-block  5
call    9 returned 11
branch 10 taken 0 (fallthrough)
branch 11 taken 11
    %%%%%: 2522-block  6
call   12 never executed
    $$$$$: 2522-block  7
call   13 never executed
    $$$$$: 2522-block  8
branch 14 never executed
branch 15 never executed
    $$$$$: 2522-block  9
call   16 never executed
    $$$$$: 2522-block 10
       11: 2523:      location_(a_code_location),
       11: 2523-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 2524:      fixture_class_id_(fixture_class_id),
       11: 2525:      should_run_(false),
       11: 2526:      is_disabled_(false),
       11: 2527:      matches_filter_(false),
       11: 2528:      factory_(factory),
       11: 2529:      result_() {}
       11: 2529-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 2529-block  1
    $$$$$: 2529-block  2
call    3 never executed
    $$$$$: 2529-block  3
call    4 never executed
    $$$$$: 2529-block  4
call    5 never executed
    $$$$$: 2529-block  5
call    6 never executed
    $$$$$: 2529-block  6
call    7 never executed
        -: 2530:
        -: 2531:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2532:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2532-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2532-block  1
call    2 never executed
    %%%%%: 2532-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2533:
        -: 2534:namespace internal {
        -: 2535:
        -: 2536:// Creates a new TestInfo object and registers it with Google Test;
        -: 2537:// returns the created object.
        -: 2538://
        -: 2539:// Arguments:
        -: 2540://
        -: 2541://   test_case_name:   name of the test case
        -: 2542://   name:             name of the test
        -: 2543://   type_param:       the name of the test's type parameter, or NULL if
        -: 2544://                     this is not a typed or a type-parameterized test.
        -: 2545://   value_param:      text representation of the test's value parameter,
        -: 2546://                     or NULL if this is not a value-parameterized test.
        -: 2547://   code_location:    code location where the test is defined
        -: 2548://   fixture_class_id: ID of the test fixture class
        -: 2549://   set_up_tc:        pointer to the function that sets up the test case
        -: 2550://   tear_down_tc:     pointer to the function that tears down the test case
        -: 2551://   factory:          pointer to the factory that creates a test object.
        -: 2552://                     The newly created TestInfo instance will assume
        -: 2553://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 11 returned 100% blocks executed 52%
       11: 2554:TestInfo* MakeAndRegisterTestInfo(
        -: 2555:    const char* test_case_name,
        -: 2556:    const char* name,
        -: 2557:    const char* type_param,
        -: 2558:    const char* value_param,
        -: 2559:    CodeLocation code_location,
        -: 2560:    TypeId fixture_class_id,
        -: 2561:    SetUpTestCaseFunc set_up_tc,
        -: 2562:    TearDownTestCaseFunc tear_down_tc,
        -: 2563:    TestFactoryBase* factory) {
        -: 2564:  TestInfo* const test_info =
        -: 2565:      new TestInfo(test_case_name, name, type_param, value_param,
       11: 2566:                   code_location, fixture_class_id, factory);
       11: 2566-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 2566-block  1
call    4 returned 11
call    5 returned 11
branch  6 taken 11 (fallthrough)
branch  7 taken 0 (throw)
       11: 2566-block  2
call    8 returned 11
branch  9 taken 11 (fallthrough)
branch 10 taken 0 (throw)
       11: 2566-block  3
call   11 returned 11
branch 12 taken 11 (fallthrough)
branch 13 taken 0 (throw)
       11: 2566-block  4
call   14 returned 11
branch 15 taken 11 (fallthrough)
branch 16 taken 0 (throw)
       11: 2566-block  5
call   17 returned 11
call   18 returned 11
call   19 returned 11
call   20 returned 11
call   21 returned 11
    $$$$$: 2566-block  6
call   22 never executed
    $$$$$: 2566-block  7
call   23 never executed
    $$$$$: 2566-block  8
    $$$$$: 2566-block  9
call   24 never executed
    $$$$$: 2566-block 10
    $$$$$: 2566-block 11
call   25 never executed
    $$$$$: 2566-block 12
    $$$$$: 2566-block 13
call   26 never executed
    $$$$$: 2566-block 14
    $$$$$: 2566-block 15
call   27 never executed
       11: 2567:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 11
call    1 returned 11
       11: 2568:  return test_info;
       11: 2568-block  0
        -: 2569:}
        -: 2570:
function _ZN7testing8internal25ReportInvalidTestCaseTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2571:void ReportInvalidTestCaseType(const char* test_case_name,
        -: 2572:                               CodeLocation code_location) {
    #####: 2573:  Message errors;
    %%%%%: 2573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2574:  errors
    #####: 2575:      << "Attempted redefinition of test case " << test_case_name << ".\n"
    %%%%%: 2575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2576:      << "All tests in the same test case must use the same test fixture\n"
    %%%%%: 2576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2577:      << "class.  However, in test case " << test_case_name << ", you tried\n"
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2577-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2578:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2579:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2580:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2581:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2582:      << "test cases.";
    %%%%%: 2582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2583:
    #####: 2584:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2584-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 2584-block  2
call    9 never executed
    $$$$$: 2584-block  3
    $$$$$: 2584-block  4
call   10 never executed
    $$$$$: 2584-block  5
        -: 2585:                                          code_location.line)
    #####: 2586:                    << " " << errors.GetString();
    %%%%%: 2586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2586-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2586-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2586-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2586-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2586-block  5
call   14 never executed
    $$$$$: 2586-block  6
    #####: 2587:}
call    0 never executed
    $$$$$: 2587-block  0
call    1 never executed
        -: 2588:}  // namespace internal
        -: 2589:
        -: 2590:namespace {
        -: 2591:
        -: 2592:// A predicate that checks the test name of a TestInfo against a known
        -: 2593:// value.
        -: 2594://
        -: 2595:// This is used for implementation of the TestCase class only.  We put
        -: 2596:// it in the anonymous namespace to prevent polluting the outer
        -: 2597:// namespace.
        -: 2598://
        -: 2599:// TestNameIs is copyable.
        -: 2600:class TestNameIs {
        -: 2601: public:
        -: 2602:  // Constructor.
        -: 2603:  //
        -: 2604:  // TestNameIs has NO default constructor.
        -: 2605:  explicit TestNameIs(const char* name)
        -: 2606:      : name_(name) {}
        -: 2607:
        -: 2608:  // Returns true iff the test name of test_info matches name_.
        -: 2609:  bool operator()(const TestInfo * test_info) const {
        -: 2610:    return test_info && test_info->name() == name_;
        -: 2611:  }
        -: 2612:
        -: 2613: private:
        -: 2614:  std::string name_;
        -: 2615:};
        -: 2616:
        -: 2617:}  // namespace
        -: 2618:
        -: 2619:namespace internal {
        -: 2620:
        -: 2621:// This method expands all parameterized tests registered with macros TEST_P
        -: 2622:// and INSTANTIATE_TEST_CASE_P into regular tests and registers those.
        -: 2623:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2624:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2625:  if (!parameterized_tests_registered_) {
        1: 2625-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2626:    parameterized_test_registry_.RegisterTests();
        1: 2626-block  0
call    0 returned 1
        1: 2627:    parameterized_tests_registered_ = true;
        -: 2628:  }
        1: 2629:}
        -: 2630:
        -: 2631:}  // namespace internal
        -: 2632:
        -: 2633:// Creates the test object, runs it, records its result, and then
        -: 2634:// deletes it.
function _ZN7testing8TestInfo3RunEv called 11 returned 100% blocks executed 93%
       11: 2635:void TestInfo::Run() {
      11*: 2636:  if (!should_run_) return;
       11: 2636-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 2636-block  1
        -: 2637:
        -: 2638:  // Tells UnitTest where to store test result.
       11: 2639:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       11: 2639-block  0
call    0 returned 11
       11: 2640:  impl->set_current_test_info(this);
call    0 returned 11
        -: 2641:
       11: 2642:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 11
call    1 returned 11
call    2 returned 11
        -: 2643:
        -: 2644:  // Notifies the unit test event listeners that a test is about to start.
       11: 2645:  repeater->OnTestStart(*this);
call    0 returned 11
        -: 2646:
       11: 2647:  const TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 11
        -: 2648:
       11: 2649:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 11
call    1 returned 11
        -: 2650:
        -: 2651:  // Creates the test object.
       22: 2652:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       11: 2653:      factory_, &internal::TestFactoryBase::CreateTest,
call    0 returned 11
        -: 2654:      "the test fixture's constructor");
        -: 2655:
        -: 2656:  // Runs the test only if the test object was created and its
        -: 2657:  // constructor didn't generate a fatal failure.
      11*: 2658:  if ((test != NULL) && !Test::HasFatalFailure()) {
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 2658-block  0
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       11: 2658-block  1
    %%%%%: 2658-block  2
       11: 2658-block  3
branch  5 taken 11 (fallthrough)
branch  6 taken 0
        -: 2659:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2660:    // exception handling code.
       11: 2661:    test->Run();
       11: 2661-block  0
call    0 returned 11
        -: 2662:  }
        -: 2663:
        -: 2664:  // Deletes the test object.
       11: 2665:  impl->os_stack_trace_getter()->UponLeavingGTest();
       11: 2665-block  0
call    0 returned 11
call    1 returned 11
       11: 2666:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 11
        -: 2667:      test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2668:
       11: 2669:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
call    0 returned 11
call    1 returned 11
        -: 2670:
        -: 2671:  // Notifies the unit test event listener that a test has just finished.
       11: 2672:  repeater->OnTestEnd(*this);
call    0 returned 11
        -: 2673:
        -: 2674:  // Tells UnitTest to stop associating assertion results to this
        -: 2675:  // test.
       11: 2676:  impl->set_current_test_info(NULL);
call    0 returned 11
        -: 2677:}
        -: 2678:
        -: 2679:// class TestCase
        -: 2680:
        -: 2681:// Gets the number of successful tests in this test case.
function _ZNK7testing8TestCase21successful_test_countEv called 5 returned 100% blocks executed 100%
        5: 2682:int TestCase::successful_test_count() const {
        5: 2683:  return CountIf(test_info_list_, TestPassed);
        5: 2683-block  0
call    0 returned 5
        -: 2684:}
        -: 2685:
        -: 2686:// Gets the number of failed tests in this test case.
function _ZNK7testing8TestCase17failed_test_countEv called 15 returned 100% blocks executed 100%
       15: 2687:int TestCase::failed_test_count() const {
       15: 2688:  return CountIf(test_info_list_, TestFailed);
       15: 2688-block  0
call    0 returned 15
        -: 2689:}
        -: 2690:
        -: 2691:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8TestCase30reportable_disabled_test_countEv called 5 returned 100% blocks executed 100%
        5: 2692:int TestCase::reportable_disabled_test_count() const {
        5: 2693:  return CountIf(test_info_list_, TestReportableDisabled);
        5: 2693-block  0
call    0 returned 5
        -: 2694:}
        -: 2695:
        -: 2696:// Gets the number of disabled tests in this test case.
function _ZNK7testing8TestCase19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2697:int TestCase::disabled_test_count() const {
    #####: 2698:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2698-block  0
call    0 never executed
        -: 2699:}
        -: 2700:
        -: 2701:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8TestCase21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2702:int TestCase::reportable_test_count() const {
    #####: 2703:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2703-block  0
call    0 never executed
        -: 2704:}
        -: 2705:
        -: 2706:// Get the number of tests in this test case that should run.
function _ZNK7testing8TestCase17test_to_run_countEv called 20 returned 100% blocks executed 100%
       20: 2707:int TestCase::test_to_run_count() const {
       20: 2708:  return CountIf(test_info_list_, ShouldRunTest);
       20: 2708-block  0
call    0 returned 20
        -: 2709:}
        -: 2710:
        -: 2711:// Gets the number of all tests.
function _ZNK7testing8TestCase16total_test_countEv called 16 returned 100% blocks executed 100%
       16: 2712:int TestCase::total_test_count() const {
       16: 2713:  return static_cast<int>(test_info_list_.size());
       16: 2713-block  0
call    0 returned 16
        -: 2714:}
        -: 2715:
        -: 2716:// Creates a TestCase with the given name.
        -: 2717://
        -: 2718:// Arguments:
        -: 2719://
        -: 2720://   name:         name of the test case
        -: 2721://   a_type_param: the name of the test case's type parameter, or NULL if
        -: 2722://                 this is not a typed or a type-parameterized test case.
        -: 2723://   set_up_tc:    pointer to the function that sets up the test case
        -: 2724://   tear_down_tc: pointer to the function that tears down the test case
function _ZN7testing8TestCaseC2EPKcS2_PFvvES4_ called 5 returned 100% blocks executed 36%
        5: 2725:TestCase::TestCase(const char* a_name, const char* a_type_param,
        -: 2726:                   Test::SetUpTestCaseFunc set_up_tc,
        5: 2727:                   Test::TearDownTestCaseFunc tear_down_tc)
        5: 2728:    : name_(a_name),
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2728-block  0
call    3 returned 5
    $$$$$: 2728-block  1
call    4 never executed
    $$$$$: 2728-block  2
call    5 never executed
       5*: 2729:      type_param_(a_type_param ? new std::string(a_type_param) : NULL),
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 2729-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2729-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2729-block  2
        5: 2729-block  3
        5: 2729-block  4
call    9 returned 5
branch 10 taken 0 (fallthrough)
branch 11 taken 5
    %%%%%: 2729-block  5
call   12 never executed
    $$$$$: 2729-block  6
call   13 never executed
    $$$$$: 2729-block  7
branch 14 never executed
branch 15 never executed
    $$$$$: 2729-block  8
call   16 never executed
    $$$$$: 2729-block  9
        5: 2730:      set_up_tc_(set_up_tc),
        5: 2731:      tear_down_tc_(tear_down_tc),
        5: 2732:      should_run_(false),
       10: 2733:      elapsed_time_(0) {
        5: 2733-block  0
call    0 returned 5
        5: 2733-block  1
call    1 returned 5
call    2 returned 5
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 2734:}
        5: 2734-block  0
    $$$$$: 2734-block  1
call    0 never executed
    $$$$$: 2734-block  2
call    1 never executed
    $$$$$: 2734-block  3
call    2 never executed
    $$$$$: 2734-block  4
call    3 never executed
        -: 2735:
        -: 2736:// Destructor of TestCase.
    #####: 2737:TestCase::~TestCase() {
        -: 2738:  // Deletes every Test in the collection.
    #####: 2739:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2740:}
------------------
_ZN7testing8TestCaseD0Ev:
function _ZN7testing8TestCaseD0Ev called 0 returned 0% blocks executed 0%
    #####: 2737:TestCase::~TestCase() {
        -: 2738:  // Deletes every Test in the collection.
        -: 2739:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2740:}
    %%%%%: 2740-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8TestCaseD2Ev:
function _ZN7testing8TestCaseD2Ev called 0 returned 0% blocks executed 0%
    #####: 2737:TestCase::~TestCase() {
        -: 2738:  // Deletes every Test in the collection.
    #####: 2739:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2739-block  0
call    0 never executed
    #####: 2740:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2741:
        -: 2742:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2743:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8TestCase11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2744:const TestInfo* TestCase::GetTestInfo(int i) const {
    #####: 2745:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2745-block  0
call    0 never executed
    #####: 2746:  return index < 0 ? NULL : test_info_list_[index];
branch  0 never executed
branch  1 never executed
    %%%%%: 2746-block  0
call    2 never executed
    %%%%%: 2746-block  1
    %%%%%: 2746-block  2
        -: 2747:}
        -: 2748:
        -: 2749:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2750:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8TestCase18GetMutableTestInfoEi called 11 returned 100% blocks executed 86%
       11: 2751:TestInfo* TestCase::GetMutableTestInfo(int i) {
       11: 2752:  const int index = GetElementOr(test_indices_, i, -1);
       11: 2752-block  0
call    0 returned 11
      11*: 2753:  return index < 0 ? NULL : test_info_list_[index];
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 2753-block  0
call    2 returned 11
    %%%%%: 2753-block  1
       11: 2753-block  2
        -: 2754:}
        -: 2755:
        -: 2756:// Adds a test to this test case.  Will delete the test upon
        -: 2757:// destruction of the TestCase object.
function _ZN7testing8TestCase11AddTestInfoEPNS_8TestInfoE called 11 returned 100% blocks executed 100%
       11: 2758:void TestCase::AddTestInfo(TestInfo * test_info) {
       11: 2759:  test_info_list_.push_back(test_info);
       11: 2759-block  0
call    0 returned 11
       11: 2760:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 2761:}
       11: 2761-block  0
        -: 2762:
        -: 2763:// Runs every test in this TestCase.
function _ZN7testing8TestCase3RunEv called 5 returned 100% blocks executed 96%
        5: 2764:void TestCase::Run() {
       5*: 2765:  if (!should_run_) return;
        5: 2765-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 2765-block  1
        -: 2766:
        5: 2767:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        5: 2767-block  0
call    0 returned 5
        5: 2768:  impl->set_current_test_case(this);
call    0 returned 5
        -: 2769:
        5: 2770:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 5
call    1 returned 5
call    2 returned 5
        -: 2771:
        5: 2772:  repeater->OnTestCaseStart(*this);
call    0 returned 5
        5: 2773:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 5
call    1 returned 5
        5: 2774:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 5
        -: 2775:      this, &TestCase::RunSetUpTestCase, "SetUpTestCase()");
        -: 2776:
        5: 2777:  const internal::TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 5
       16: 2778:  for (int i = 0; i < total_test_count(); i++) {
       16: 2778-block  0
call    0 returned 16
branch  1 taken 11
branch  2 taken 5 (fallthrough)
       11: 2779:    GetMutableTestInfo(i)->Run();
       11: 2779-block  0
call    0 returned 11
call    1 returned 11
        -: 2780:  }
        5: 2781:  elapsed_time_ = internal::GetTimeInMillis() - start;
        5: 2781-block  0
call    0 returned 5
        -: 2782:
        5: 2783:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 5
call    1 returned 5
        5: 2784:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 5
        -: 2785:      this, &TestCase::RunTearDownTestCase, "TearDownTestCase()");
        -: 2786:
        5: 2787:  repeater->OnTestCaseEnd(*this);
call    0 returned 5
        5: 2788:  impl->set_current_test_case(NULL);
call    0 returned 5
        -: 2789:}
        -: 2790:
        -: 2791:// Clears the results of all tests in this test case.
function _ZN7testing8TestCase11ClearResultEv called 5 returned 100% blocks executed 100%
        5: 2792:void TestCase::ClearResult() {
        5: 2793:  ad_hoc_test_result_.Clear();
        5: 2793-block  0
call    0 returned 5
        5: 2794:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 5
        5: 2795:}
        -: 2796:
        -: 2797:// Shuffles the tests in this test case.
function _ZN7testing8TestCase12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 2798:void TestCase::ShuffleTests(internal::Random* random) {
    #####: 2799:  Shuffle(random, &test_indices_);
    %%%%%: 2799-block  0
call    0 never executed
    #####: 2800:}
        -: 2801:
        -: 2802:// Restores the test order to before the first shuffle.
function _ZN7testing8TestCase14UnshuffleTestsEv called 5 returned 100% blocks executed 100%
        5: 2803:void TestCase::UnshuffleTests() {
       16: 2804:  for (size_t i = 0; i < test_indices_.size(); i++) {
        5: 2804-block  0
       16: 2804-block  1
call    0 returned 16
branch  1 taken 11
branch  2 taken 5 (fallthrough)
       11: 2805:    test_indices_[i] = static_cast<int>(i);
       11: 2805-block  0
call    0 returned 11
        -: 2806:  }
        5: 2807:}
        -: 2808:
        -: 2809:// Formats a countable noun.  Depending on its quantity, either the
        -: 2810:// singular form or the plural form is used. e.g.
        -: 2811://
        -: 2812:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 2813:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 15 returned 100% blocks executed 71%
       15: 2814:static std::string FormatCountableNoun(int count,
        -: 2815:                                       const char * singular_form,
        -: 2816:                                       const char * plural_form) {
       30: 2817:  return internal::StreamableToString(count) + " " +
       15: 2817-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 15 (fallthrough)
branch  3 taken 0 (throw)
       15: 2817-block  1
call    4 returned 15
call    5 returned 15
    $$$$$: 2817-block  2
call    6 never executed
    $$$$$: 2817-block  3
    $$$$$: 2817-block  4
call    7 never executed
       45: 2818:      (count == 1 ? singular_form : plural_form);
       15: 2818-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 11
        4: 2818-block  1
       11: 2818-block  2
       15: 2818-block  3
call    2 returned 15
branch  3 taken 15 (fallthrough)
branch  4 taken 0 (throw)
       15: 2818-block  4
        -: 2819:}
        -: 2820:
        -: 2821:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 2822:static std::string FormatTestCount(int test_count) {
        3: 2823:  return FormatCountableNoun(test_count, "test", "tests");
        3: 2823-block  0
call    0 returned 3
        -: 2824:}
        -: 2825:
        -: 2826:// Formats the count of test cases.
function _ZN7testingL19FormatTestCaseCountEi called 2 returned 100% blocks executed 100%
        2: 2827:static std::string FormatTestCaseCount(int test_case_count) {
        2: 2828:  return FormatCountableNoun(test_case_count, "test case", "test cases");
        2: 2828-block  0
call    0 returned 2
        -: 2829:}
        -: 2830:
        -: 2831:// Converts a TestPartResult::Type enum to human-friendly string
        -: 2832:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 2833:// to "Failure", as the user usually doesn't care about the difference
        -: 2834:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 2835:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 2836:  switch (type) {
    %%%%%: 2836-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2837:    case TestPartResult::kSuccess:
    #####: 2838:      return "Success";
    %%%%%: 2838-block  0
        -: 2839:
    #####: 2840:    case TestPartResult::kNonFatalFailure:
        -: 2841:    case TestPartResult::kFatalFailure:
        -: 2842:#ifdef _MSC_VER
        -: 2843:      return "error: ";
        -: 2844:#else
    #####: 2845:      return "Failure\n";
    %%%%%: 2845-block  0
        -: 2846:#endif
    #####: 2847:    default:
    #####: 2848:      return "Unknown result type";
    %%%%%: 2848-block  0
        -: 2849:  }
        -: 2850:}
        -: 2851:
        -: 2852:namespace internal {
        -: 2853:
        -: 2854:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2855:static std::string PrintTestPartResultToString(
        -: 2856:    const TestPartResult& test_part_result) {
    #####: 2857:  return (Message()
    %%%%%: 2857-block  0
call    0 never executed
    $$$$$: 2857-block  1
call    1 never executed
    #####: 2858:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2858-block  0
call    6 never executed
    $$$$$: 2858-block  1
    #####: 2859:                                          test_part_result.line_number())
    %%%%%: 2859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2860:          << " " << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 2860-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2860-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 2860-block  2
    #####: 2861:          << test_part_result.message()).GetString();
    %%%%%: 2861-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2861-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2861-block  2
call    7 never executed
    %%%%%: 2861-block  3
    $$$$$: 2861-block  4
        -: 2862:}
        -: 2863:
        -: 2864:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2865:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 2866:  const std::string& result =
    #####: 2867:      PrintTestPartResultToString(test_part_result);
    %%%%%: 2867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2868:  printf("%s\n", result.c_str());
    %%%%%: 2868-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2869:  fflush(stdout);
    %%%%%: 2869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2869-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2870:  // If the test program runs in Visual Studio or a debugger, the
        -: 2871:  // following statements add the test part result message to the Output
        -: 2872:  // window such that the user can double-click on it to jump to the
        -: 2873:  // corresponding source code location; otherwise they do nothing.
        -: 2874:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 2875:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 2876:  // to stdout is done by OutputDebugString() there already - we don't
        -: 2877:  // want the same message printed twice.
    #####: 2878:  ::OutputDebugStringA(result.c_str());
    %%%%%: 2878-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2879:  ::OutputDebugStringA("\n");
    %%%%%: 2879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2880:#endif
    #####: 2881:}
    %%%%%: 2881-block  0
call    0 never executed
    $$$$$: 2881-block  1
call    1 never executed
        -: 2882:
        -: 2883:// class PrettyUnitTestResultPrinter
        -: 2884:
        -: 2885:enum GTestColor {
        -: 2886:  COLOR_DEFAULT,
        -: 2887:  COLOR_RED,
        -: 2888:  COLOR_GREEN,
        -: 2889:  COLOR_YELLOW
        -: 2890:};
        -: 2891:
        -: 2892:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 2893:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 2894:
        -: 2895:// Returns the character attribute for the given color.
        -: 2896:static WORD GetColorAttribute(GTestColor color) {
        -: 2897:  switch (color) {
        -: 2898:    case COLOR_RED:    return FOREGROUND_RED;
        -: 2899:    case COLOR_GREEN:  return FOREGROUND_GREEN;
        -: 2900:    case COLOR_YELLOW: return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 2901:    default:           return 0;
        -: 2902:  }
        -: 2903:}
        -: 2904:
        -: 2905:static int GetBitOffset(WORD color_mask) {
        -: 2906:  if (color_mask == 0) return 0;
        -: 2907:
        -: 2908:  int bitOffset = 0;
        -: 2909:  while ((color_mask & 1) == 0) {
        -: 2910:    color_mask >>= 1;
        -: 2911:    ++bitOffset;
        -: 2912:  }
        -: 2913:  return bitOffset;
        -: 2914:}
        -: 2915:
        -: 2916:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 2917:  // Let's reuse the BG
        -: 2918:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 2919:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 2920:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 2921:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 2922:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 2923:
        -: 2924:  WORD new_color =
        -: 2925:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 2926:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 2927:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 2928:
        -: 2929:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 2930:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 2931:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 2932:  }
        -: 2933:  return new_color;
        -: 2934:}
        -: 2935:
        -: 2936:#else
        -: 2937:
        -: 2938:// Returns the ANSI color code for the given color.  COLOR_DEFAULT is
        -: 2939:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_10GTestColorE called 0 returned 0% blocks executed 0%
    #####: 2940:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 2941:  switch (color) {
    %%%%%: 2941-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2942:    case COLOR_RED:     return "1";
    %%%%%: 2942-block  0
    #####: 2943:    case COLOR_GREEN:   return "2";
    %%%%%: 2943-block  0
    #####: 2944:    case COLOR_YELLOW:  return "3";
    %%%%%: 2944-block  0
    #####: 2945:    default:            return NULL;
    %%%%%: 2945-block  0
        -: 2946:  };
        -: 2947:}
        -: 2948:
        -: 2949:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 2950:
        -: 2951:// Returns true iff Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 31%
        1: 2952:bool ShouldUseColor(bool stdout_is_tty) {
        1: 2953:  const char* const gtest_color = GTEST_FLAG(color).c_str();
        1: 2953-block  0
call    0 returned 1
        -: 2954:
        1: 2955:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 2956:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2957:    // On Windows the TERM variable is usually not set, but the
        -: 2958:    // console there does support colors.
        -: 2959:    return stdout_is_tty;
        -: 2960:#else
        -: 2961:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 2962:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 2962-block  0
call    0 never executed
        -: 2963:    const bool term_supports_color =
    #####: 2964:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2965:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 2965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2966:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 2966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2967:        String::CStringEquals(term, "screen") ||
    %%%%%: 2967-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2968:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 2968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2969:        String::CStringEquals(term, "tmux") ||
    %%%%%: 2969-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2970:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 2970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2971:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 2971-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2972:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 2972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2973:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 2973-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2973-block  1
    %%%%%: 2973-block  2
    #####: 2974:        String::CStringEquals(term, "cygwin");
    %%%%%: 2974-block  0
call    0 never executed
    #####: 2975:    return stdout_is_tty && term_supports_color;
    %%%%%: 2975-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2975-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2975-block  2
    %%%%%: 2975-block  3
    %%%%%: 2975-block  4
        -: 2976:#endif  // GTEST_OS_WINDOWS
        -: 2977:  }
        -: 2978:
        1: 2979:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 2979-block  0
call    0 returned 1
        1: 2980:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 2980-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 2981:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2981-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 2981-block  1
        1: 2981-block  2
        2: 2982:      String::CStringEquals(gtest_color, "1");
        1: 2982-block  0
call    0 returned 1
        1: 2982-block  1
        -: 2983:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 2984:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 2985:  // be conservative.
        -: 2986:}
        -: 2987:
        -: 2988:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 2989:// cannot simply emit special characters and have the terminal change colors.
        -: 2990:// This routine must actually emit the characters rather than return a string
        -: 2991:// that would be colored when printed, as can be done on Linux.
function _ZN7testing8internalL13ColoredPrintfENS0_10GTestColorEPKcz called 37 returned 100% blocks executed 60%
       37: 2992:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 2993:  va_list args;
       37: 2994:  va_start(args, fmt);
        -: 2995:
        -: 2996:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS || \
        -: 2997:    GTEST_OS_IOS || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
        -: 2998:  const bool use_color = AlwaysFalse();
        -: 2999:#else
        -: 3000:  static const bool in_color_mode =
       37: 3001:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       37: 3001-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 36
        1: 3001-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3001-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3001-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3001-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3001-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3001-block  6
call   17 returned 1
    $$$$$: 3001-block  7
branch 18 never executed
branch 19 never executed
    $$$$$: 3001-block  8
call   20 never executed
      37*: 3002:  const bool use_color = in_color_mode && (color != COLOR_DEFAULT);
       37: 3002-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 37
    %%%%%: 3002-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3002-block  2
       37: 3002-block  3
        -: 3003:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || GTEST_OS_ZOS
        -: 3004:  // The '!= 0' comparison is necessary to satisfy MSVC 7.1.
        -: 3005:
       37: 3006:  if (!use_color) {
       37: 3006-block  0
branch  0 taken 37 (fallthrough)
branch  1 taken 0
       37: 3007:    vprintf(fmt, args);
       37: 3007-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37: 3008:    va_end(args);
       37: 3009:    return;
       37: 3009-block  0
        -: 3010:  }
        -: 3011:
        -: 3012:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3013:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3014:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3015:
        -: 3016:  // Gets the current text color.
        -: 3017:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3018:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3019:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3020:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3021:
        -: 3022:  // We need to flush the stream buffers into the console before each
        -: 3023:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3024:  // printed but has not yet reached the console.
        -: 3025:  fflush(stdout);
        -: 3026:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3027:
        -: 3028:  vprintf(fmt, args);
        -: 3029:
        -: 3030:  fflush(stdout);
        -: 3031:  // Restores the text color.
        -: 3032:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3033:#else
    #####: 3034:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3034-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3035:  vprintf(fmt, args);
    %%%%%: 3035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3036:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3037:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3038:  va_end(args);
    %%%%%: 3038-block  0
        -: 3039:}
        -: 3040:
        -: 3041:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3042:// output to label the type parameter and value parameter for a test.
        -: 3043:static const char kTypeParamLabel[] = "TypeParam";
        -: 3044:static const char kValueParamLabel[] = "GetParam()";
        -: 3045:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3046:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3047:  const char* const type_param = test_info.type_param();
    %%%%%: 3047-block  0
call    0 never executed
    #####: 3048:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3049:
    #####: 3050:  if (type_param != NULL || value_param != NULL) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3050-block  0
branch  2 never executed
branch  3 never executed
    #####: 3051:    printf(", where ");
    %%%%%: 3051-block  0
call    0 never executed
    #####: 3052:    if (type_param != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 3053:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3053-block  0
call    0 never executed
    #####: 3054:      if (value_param != NULL)
branch  0 never executed
branch  1 never executed
    #####: 3055:        printf(" and ");
    %%%%%: 3055-block  0
call    0 never executed
        -: 3056:    }
    #####: 3057:    if (value_param != NULL) {
    %%%%%: 3057-block  0
branch  0 never executed
branch  1 never executed
    #####: 3058:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3058-block  0
call    0 never executed
        -: 3059:    }
        -: 3060:  }
    #####: 3061:}
        -: 3062:
        -: 3063:// This class implements the TestEventListener interface.
        -: 3064://
        -: 3065:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3066:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3067: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3068:  PrettyUnitTestResultPrinter() {}
        1: 3068-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 22 returned 100% blocks executed 100%
       22: 3069:  static void PrintTestName(const char * test_case, const char * test) {
       22: 3070:    printf("%s.%s", test_case, test);
       22: 3070-block  0
call    0 returned 22
       22: 3071:  }
        -: 3072:
        -: 3073:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3074:  virtual void OnTestProgramStart(const UnitTest& /*unit_test*/) {}
        -: 3075:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 3076:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3077:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) {}
        -: 3078:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 3079:  virtual void OnTestStart(const TestInfo& test_info);
        -: 3080:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 3081:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 3082:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 3083:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3084:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) {}
        -: 3085:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3086:  virtual void OnTestProgramEnd(const UnitTest& /*unit_test*/) {}
        -: 3087:
        -: 3088: private:
        -: 3089:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3090:};
        -: 3091:
        -: 3092:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 64%
        1: 3093:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3094:    const UnitTest& unit_test, int iteration) {
        1: 3095:  if (GTEST_FLAG(repeat) != 1)
        1: 3095-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3096:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3096-block  0
call    0 never executed
        -: 3097:
        1: 3098:  const char* const filter = GTEST_FLAG(filter).c_str();
        1: 3098-block  0
call    0 returned 1
        -: 3099:
        -: 3100:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3101:  // tests may be skipped.
        1: 3102:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3103:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 3103-block  0
call    0 never executed
        -: 3104:                  "Note: %s filter = %s\n", GTEST_NAME_, filter);
        -: 3105:  }
        -: 3106:
        1: 3107:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3107-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3108:    const Int32 shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3108-block  0
call    0 never executed
    #####: 3109:    ColoredPrintf(COLOR_YELLOW,
call    0 never executed
call    1 never executed
        -: 3110:                  "Note: This is test shard %d of %s.\n",
        -: 3111:                  static_cast<int>(shard_index) + 1,
        -: 3112:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3113:  }
        -: 3114:
        1: 3115:  if (GTEST_FLAG(shuffle)) {
        1: 3115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3116:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 3116-block  0
call    0 never executed
call    1 never executed
        -: 3117:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3118:                  unit_test.random_seed());
        -: 3119:  }
        1: 3120:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 3120-block  0
call    0 returned 1
        2: 3121:  printf("Running %s from %s.\n",
call    0 returned 1
        1: 3121-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3122:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3122-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3122-block  1
call    6 returned 1
    $$$$$: 3122-block  2
call    7 never executed
    $$$$$: 3122-block  3
        2: 3123:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3123-block  0
call    3 never executed
        1: 3124:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3125:}
        -: 3126:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3127:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3128:    const UnitTest& /*unit_test*/) {
        1: 3129:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 3129-block  0
call    0 returned 1
        1: 3130:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3131:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3132:}
        -: 3133:
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_8TestCaseE called 5 returned 100% blocks executed 78%
        5: 3134:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3135:  const std::string counts =
        5: 3136:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        5: 3136-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3136-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 3137:  ColoredPrintf(COLOR_GREEN, "[----------] ");
        5: 3137-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3138:  printf("%s from %s", counts.c_str(), test_case.name());
        5: 3138-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5: 3139:  if (test_case.type_param() == NULL) {
        5: 3139-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3139-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 0
        5: 3140:    printf("\n");
        5: 3140-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 3141:  } else {
    #####: 3142:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3142-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3143:  }
        5: 3144:  fflush(stdout);
        5: 3144-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3144-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 3145:}
        5: 3145-block  0
call    0 returned 5
    $$$$$: 3145-block  1
call    1 never executed
        -: 3146:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 11 returned 100% blocks executed 100%
       11: 3147:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       11: 3148:  ColoredPrintf(COLOR_GREEN,  "[ RUN      ] ");
       11: 3148-block  0
call    0 returned 11
       11: 3149:  PrintTestName(test_info.test_case_name(), test_info.name());
call    0 returned 11
call    1 returned 11
call    2 returned 11
       11: 3150:  printf("\n");
call    0 returned 11
       11: 3151:  fflush(stdout);
call    0 returned 11
call    1 returned 11
       11: 3152:}
        -: 3153:
        -: 3154:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3155:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3156:    const TestPartResult& result) {
        -: 3157:  // If the test part succeeded, we don't need to do anything.
    #####: 3158:  if (result.type() == TestPartResult::kSuccess)
    %%%%%: 3158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3159:    return;
    %%%%%: 3159-block  0
        -: 3160:
        -: 3161:  // Print failure message from the assertion (e.g. expected this and got that).
    #####: 3162:  PrintTestPartResult(result);
    %%%%%: 3162-block  0
call    0 never executed
    #####: 3163:  fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3164:}
        -: 3165:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 11 returned 100% blocks executed 79%
       11: 3166:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       11: 3167:  if (test_info.result()->Passed()) {
       11: 3167-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11: 3168:    ColoredPrintf(COLOR_GREEN, "[       OK ] ");
       11: 3168-block  0
call    0 returned 11
        -: 3169:  } else {
    #####: 3170:    ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
    %%%%%: 3170-block  0
call    0 never executed
        -: 3171:  }
       11: 3172:  PrintTestName(test_info.test_case_name(), test_info.name());
       11: 3172-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
       11: 3173:  if (test_info.result()->Failed())
call    0 returned 11
call    1 returned 11
branch  2 taken 0 (fallthrough)
branch  3 taken 11
    #####: 3174:    PrintFullTestCommentIfPresent(test_info);
    %%%%%: 3174-block  0
call    0 never executed
        -: 3175:
       11: 3176:  if (GTEST_FLAG(print_time)) {
       11: 3176-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 3177:    printf(" (%s ms)\n", internal::StreamableToString(
       11: 3177-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 3177-block  1
call    4 returned 11
    $$$$$: 3177-block  2
call    5 never executed
    $$$$$: 3177-block  3
       22: 3178:           test_info.result()->elapsed_time()).c_str());
       11: 3178-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
        -: 3179:  } else {
    #####: 3180:    printf("\n");
    %%%%%: 3180-block  0
call    0 never executed
        -: 3181:  }
       11: 3182:  fflush(stdout);
       11: 3182-block  0
call    0 returned 11
call    1 returned 11
       11: 3183:}
        -: 3184:
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_8TestCaseE called 5 returned 100% blocks executed 71%
        5: 3185:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       5*: 3186:  if (!GTEST_FLAG(print_time)) return;
        5: 3186-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 3186-block  1
        -: 3187:
        -: 3188:  const std::string counts =
        5: 3189:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        5: 3189-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3189-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 3190:  ColoredPrintf(COLOR_GREEN, "[----------] ");
        5: 3190-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3191:  printf("%s from %s (%s ms total)\n\n",
        5: 3191-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        -: 3192:         counts.c_str(), test_case.name(),
       10: 3193:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        5: 3193-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 3193-block  1
call    4 returned 5
    $$$$$: 3193-block  2
call    5 never executed
    $$$$$: 3193-block  3
    $$$$$: 3193-block  4
        5: 3194:  fflush(stdout);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3194-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 3195:}
        5: 3195-block  0
call    0 returned 5
    $$$$$: 3195-block  1
call    1 never executed
        -: 3196:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3197:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3198:    const UnitTest& /*unit_test*/) {
        1: 3199:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
        1: 3199-block  0
call    0 returned 1
        1: 3200:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3201:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3202:}
        -: 3203:
        -: 3204:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3205:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3206:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3206-block  0
call    0 never executed
    #####: 3207:  if (failed_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3208:    return;
    %%%%%: 3208-block  0
        -: 3209:  }
        -: 3210:
    #####: 3211:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    %%%%%: 3211-block  0
    %%%%%: 3211-block  1
    %%%%%: 3211-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3212:    const TestCase& test_case = *unit_test.GetTestCase(i);
    %%%%%: 3212-block  0
call    0 never executed
    #####: 3213:    if (!test_case.should_run() || (test_case.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3213-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3213-block  1
    %%%%%: 3213-block  2
    %%%%%: 3213-block  3
branch  6 never executed
branch  7 never executed
    #####: 3214:      continue;
    %%%%%: 3214-block  0
        -: 3215:    }
    #####: 3216:    for (int j = 0; j < test_case.total_test_count(); ++j) {
    %%%%%: 3216-block  0
    %%%%%: 3216-block  1
    %%%%%: 3216-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3217:      const TestInfo& test_info = *test_case.GetTestInfo(j);
    %%%%%: 3217-block  0
call    0 never executed
    #####: 3218:      if (!test_info.should_run() || test_info.result()->Passed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3218-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3218-block  1
    %%%%%: 3218-block  2
    %%%%%: 3218-block  3
branch  7 never executed
branch  8 never executed
    #####: 3219:        continue;
    %%%%%: 3219-block  0
        -: 3220:      }
    #####: 3221:      ColoredPrintf(COLOR_RED, "[  FAILED  ] ");
    %%%%%: 3221-block  0
call    0 never executed
    #####: 3222:      printf("%s.%s", test_case.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3223:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3224:      printf("\n");
call    0 never executed
        -: 3225:    }
        -: 3226:  }
        -: 3227:}
        -: 3228:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 50%
        1: 3229:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3230:                                                     int /*iteration*/) {
        1: 3231:  ColoredPrintf(COLOR_GREEN,  "[==========] ");
        1: 3231-block  0
call    0 returned 1
        2: 3232:  printf("%s from %s ran.",
call    0 returned 1
        1: 3232-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3233:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3233-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3233-block  1
call    6 returned 1
    $$$$$: 3233-block  2
call    7 never executed
    $$$$$: 3233-block  3
        2: 3234:         FormatTestCaseCount(unit_test.test_case_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3234-block  0
call    3 never executed
    $$$$$: 3234-block  1
call    4 never executed
        1: 3235:  if (GTEST_FLAG(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3236:    printf(" (%s ms total)",
        1: 3236-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3237:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3237-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3237-block  1
call    4 returned 1
    $$$$$: 3237-block  2
call    5 never executed
    $$$$$: 3237-block  3
    $$$$$: 3237-block  4
call    6 never executed
        -: 3238:  }
        1: 3239:  printf("\n");
        1: 3239-block  0
call    0 returned 1
        1: 3240:  ColoredPrintf(COLOR_GREEN,  "[  PASSED  ] ");
call    0 returned 1
        1: 3241:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3241-block  0
call    6 returned 1
    $$$$$: 3241-block  1
call    7 never executed
    $$$$$: 3241-block  2
call    8 never executed
        -: 3242:
        1: 3243:  int num_failures = unit_test.failed_test_count();
call    0 returned 1
        1: 3244:  if (!unit_test.Passed()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3245:    const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3245-block  0
call    0 never executed
    #####: 3246:    ColoredPrintf(COLOR_RED,  "[  FAILED  ] ");
call    0 never executed
    #####: 3247:    printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3247-block  0
call    5 never executed
    $$$$$: 3247-block  1
call    6 never executed
    #####: 3248:    PrintFailedTests(unit_test);
call    0 never executed
    #####: 3249:    printf("\n%2d FAILED %s\n", num_failures,
branch  0 never executed
branch  1 never executed
    %%%%%: 3249-block  0
    %%%%%: 3249-block  1
    %%%%%: 3249-block  2
call    2 never executed
        -: 3250:                        num_failures == 1 ? "TEST" : "TESTS");
        -: 3251:  }
        -: 3252:
        1: 3253:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3253-block  0
call    0 returned 1
       1*: 3254:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3254-block  0
branch  2 never executed
branch  3 never executed
    #####: 3255:    if (!num_failures) {
    %%%%%: 3255-block  0
branch  0 never executed
branch  1 never executed
    #####: 3256:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3256-block  0
call    0 never executed
        -: 3257:    }
    #####: 3258:    ColoredPrintf(COLOR_YELLOW,
    %%%%%: 3258-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3258-block  1
    %%%%%: 3258-block  2
    %%%%%: 3258-block  3
call    2 never executed
        -: 3259:                  "  YOU HAVE %d DISABLED %s\n\n",
        -: 3260:                  num_disabled,
        -: 3261:                  num_disabled == 1 ? "TEST" : "TESTS");
        -: 3262:  }
        -: 3263:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3264:  fflush(stdout);
        1: 3264-block  0
call    0 returned 1
call    1 returned 1
        1: 3265:}
        -: 3266:
        -: 3267:// End PrettyUnitTestResultPrinter
        -: 3268:
        -: 3269:// class TestEventRepeater
        -: 3270://
        -: 3271:// This class forwards events to other event listeners.
        -: 3272:class TestEventRepeater : public TestEventListener {
        -: 3273: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3274:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3274-block  0
call    0 returned 1
call    1 returned 1
        -: 3275:  virtual ~TestEventRepeater();
        -: 3276:  void Append(TestEventListener *listener);
        -: 3277:  TestEventListener* Release(TestEventListener* listener);
        -: 3278:
        -: 3279:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3280:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3281:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3281-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3282:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3283:
        -: 3284:  virtual void OnTestProgramStart(const UnitTest& unit_test);
        -: 3285:  virtual void OnTestIterationStart(const UnitTest& unit_test, int iteration);
        -: 3286:  virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test);
        -: 3287:  virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test);
        -: 3288:  virtual void OnTestCaseStart(const TestCase& test_case);
        -: 3289:  virtual void OnTestStart(const TestInfo& test_info);
        -: 3290:  virtual void OnTestPartResult(const TestPartResult& result);
        -: 3291:  virtual void OnTestEnd(const TestInfo& test_info);
        -: 3292:  virtual void OnTestCaseEnd(const TestCase& test_case);
        -: 3293:  virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test);
        -: 3294:  virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test);
        -: 3295:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3296:  virtual void OnTestProgramEnd(const UnitTest& unit_test);
        -: 3297:
        -: 3298: private:
        -: 3299:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3300:  // in death test child processes.
        -: 3301:  bool forwarding_enabled_;
        -: 3302:  // The list of listeners that receive events.
        -: 3303:  std::vector<TestEventListener*> listeners_;
        -: 3304:
        -: 3305:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3306:};
        -: 3307:
    #####: 3308:TestEventRepeater::~TestEventRepeater() {
    #####: 3309:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3310:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3308:TestEventRepeater::~TestEventRepeater() {
        -: 3309:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3310:}
    %%%%%: 3310-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3308:TestEventRepeater::~TestEventRepeater() {
    #####: 3309:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3309-block  0
call    0 never executed
    #####: 3310:}
call    0 never executed
call    1 never executed
------------------
        -: 3311:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3312:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3313:  listeners_.push_back(listener);
        1: 3313-block  0
call    0 returned 1
        1: 3314:}
        -: 3315:
        -: 3316:// TODO(vladl@google.com): Factor the search functionality into Vector::Find.
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3317:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 3318:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3318-block  0
    %%%%%: 3318-block  1
        1: 3318-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3319:    if (listeners_[i] == listener) {
    %%%%%: 3319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3320:      listeners_.erase(listeners_.begin() + i);
    %%%%%: 3320-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3320-block  1
    $$$$$: 3320-block  2
    #####: 3321:      return listener;
    %%%%%: 3321-block  0
        -: 3322:    }
        -: 3323:  }
        -: 3324:
        1: 3325:  return NULL;
        1: 3325-block  0
        -: 3326:}
        -: 3327:
        -: 3328:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3329:// This defines a member that forwards the call to all listeners.
        -: 3330:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3331:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3332:  if (forwarding_enabled_) { \
        -: 3333:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3334:      listeners_[i]->Name(parameter); \
        -: 3335:    } \
        -: 3336:  } \
        -: 3337:}
        -: 3338:// This defines a member that forwards the call to all listeners in reverse
        -: 3339:// order.
        -: 3340:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type) \
        -: 3341:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3342:  if (forwarding_enabled_) { \
        -: 3343:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) { \
        -: 3344:      listeners_[i]->Name(parameter); \
        -: 3345:    } \
        -: 3346:  } \
        -: 3347:}
        -: 3348:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3349:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3349-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3349-block  1
        1: 3349-block  2
call    2 returned 1
call    3 returned 1
        2: 3349-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3350:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3350-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3350-block  1
        1: 3350-block  2
call    2 returned 1
call    3 returned 1
        2: 3350-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_8TestCaseE called 5 returned 100% blocks executed 100%
       10: 3351:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestCase)
        5: 3351-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 3351-block  1
        5: 3351-block  2
call    2 returned 5
call    3 returned 5
       10: 3351-block  3
call    4 returned 10
branch  5 taken 5
branch  6 taken 5 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 11 returned 100% blocks executed 100%
       22: 3352:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       11: 3352-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 3352-block  1
       11: 3352-block  2
call    2 returned 11
call    3 returned 11
       22: 3352-block  3
call    4 returned 22
branch  5 taken 11
branch  6 taken 11 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3353:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3353-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3353-block  1
    %%%%%: 3353-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3353-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3354:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3354-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3354-block  1
        1: 3354-block  2
call    2 returned 1
call    3 returned 1
        2: 3354-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3355:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3355-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3355-block  1
call    2 returned 1
        1: 3355-block  2
call    3 returned 1
call    4 returned 1
        2: 3355-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3356:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3356-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3356-block  1
call    2 returned 1
        1: 3356-block  2
call    3 returned 1
call    4 returned 1
        2: 3356-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 11 returned 100% blocks executed 100%
       22: 3357:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       11: 3357-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 3357-block  1
call    2 returned 11
       11: 3357-block  2
call    3 returned 11
call    4 returned 11
       22: 3357-block  3
branch  5 taken 11
branch  6 taken 11 (fallthrough)
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_8TestCaseE called 5 returned 100% blocks executed 100%
       10: 3358:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestCase)
        5: 3358-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 3358-block  1
call    2 returned 5
        5: 3358-block  2
call    3 returned 5
call    4 returned 5
       10: 3358-block  3
branch  5 taken 5
branch  6 taken 5 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3359:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3359-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3359-block  1
call    2 returned 1
        1: 3359-block  2
call    3 returned 1
call    4 returned 1
        2: 3359-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3360:
        -: 3361:#undef GTEST_REPEATER_METHOD_
        -: 3362:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3363:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3364:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3365:                                             int iteration) {
        1: 3366:  if (forwarding_enabled_) {
        1: 3366-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3367:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3367-block  0
        2: 3367-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3368:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3368-block  0
call    0 returned 1
call    1 returned 1
        -: 3369:    }
        -: 3370:  }
        1: 3371:}
        -: 3372:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3373:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3374:                                           int iteration) {
        1: 3375:  if (forwarding_enabled_) {
        1: 3375-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3376:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) {
        1: 3376-block  0
call    0 returned 1
        2: 3376-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3377:      listeners_[i]->OnTestIterationEnd(unit_test, iteration);
        1: 3377-block  0
call    0 returned 1
call    1 returned 1
        -: 3378:    }
        -: 3379:  }
        1: 3380:}
        -: 3381:
        -: 3382:// End TestEventRepeater
        -: 3383:
        -: 3384:// This class generates an XML output file.
        -: 3385:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3386: public:
        -: 3387:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3388:
        -: 3389:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3390:
        -: 3391: private:
        -: 3392:  // Is c a whitespace character that is normalized to a space character
        -: 3393:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 3394:  static bool IsNormalizableWhitespace(char c) {
    #####: 3395:    return c == 0x9 || c == 0xA || c == 0xD;
    %%%%%: 3395-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3395-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3395-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3395-block  3
    %%%%%: 3395-block  4
    %%%%%: 3395-block  5
        -: 3396:  }
        -: 3397:
        -: 3398:  // May c appear in a well-formed XML document?
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEc called 0 returned 0% blocks executed 0%
    #####: 3399:  static bool IsValidXmlCharacter(char c) {
    #####: 3400:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3400-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3400-block  2
    %%%%%: 3400-block  3
    %%%%%: 3400-block  4
        -: 3401:  }
        -: 3402:
        -: 3403:  // Returns an XML-escaped copy of the input string str.  If
        -: 3404:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3405:  // value, and normalizable whitespace is preserved by replacing it
        -: 3406:  // with character references.
        -: 3407:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3408:
        -: 3409:  // Returns the given string with all characters invalid in XML removed.
        -: 3410:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3411:
        -: 3412:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3413:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3414:    return EscapeXml(str, true);
    %%%%%: 3414-block  0
call    0 never executed
        -: 3415:  }
        -: 3416:
        -: 3417:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3418:  static std::string EscapeXmlText(const char* str) {
        -: 3419:    return EscapeXml(str, false);
        -: 3420:  }
        -: 3421:
        -: 3422:  // Verifies that the given attribute belongs to the given element and
        -: 3423:  // streams the attribute as XML.
        -: 3424:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3425:                                 const std::string& element_name,
        -: 3426:                                 const std::string& name,
        -: 3427:                                 const std::string& value);
        -: 3428:
        -: 3429:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3430:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3431:
        -: 3432:  // Streams an XML representation of a TestInfo object.
        -: 3433:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3434:                                const char* test_case_name,
        -: 3435:                                const TestInfo& test_info);
        -: 3436:
        -: 3437:  // Prints an XML representation of a TestCase object
        -: 3438:  static void PrintXmlTestCase(::std::ostream* stream,
        -: 3439:                               const TestCase& test_case);
        -: 3440:
        -: 3441:  // Prints an XML summary of unit_test to output stream out.
        -: 3442:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3443:                               const UnitTest& unit_test);
        -: 3444:
        -: 3445:  // Produces a string representing the test properties in a result as space
        -: 3446:  // delimited XML attributes based on the property key="value" pairs.
        -: 3447:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3448:  // to delimit this attribute from prior attributes.
        -: 3449:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3450:
        -: 3451:  // Streams an XML representation of the test properties of a TestResult
        -: 3452:  // object.
        -: 3453:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3454:                                      const TestResult& result);
        -: 3455:
        -: 3456:  // The output file.
        -: 3457:  const std::string output_file_;
        -: 3458:
        -: 3459:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 3460:};
        -: 3461:
        -: 3462:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3463:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3464:    : output_file_(output_file) {
    %%%%%: 3464-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3464-block  1
call    5 never executed
    $$$$$: 3464-block  2
call    6 never executed
    $$$$$: 3464-block  3
    #####: 3465:  if (output_file_.c_str() == NULL || output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3465-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3465-block  1
    %%%%%: 3465-block  2
    %%%%%: 3465-block  3
branch  6 never executed
branch  7 never executed
    #####: 3466:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3466-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3466-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3466-block  2
call    7 never executed
    $$$$$: 3466-block  3
call    8 never executed
    $$$$$: 3466-block  4
        -: 3467:  }
    #####: 3468:}
    %%%%%: 3468-block  0
    $$$$$: 3468-block  1
call    0 never executed
    $$$$$: 3468-block  2
call    1 never executed
        -: 3469:
        -: 3470:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3471:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3472:                                                  int /*iteration*/) {
    #####: 3473:  FILE* xmlout = NULL;
    #####: 3474:  FilePath output_file(output_file_);
    %%%%%: 3474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3475:  FilePath output_dir(output_file.RemoveFileName());
    %%%%%: 3475-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3476:
    #####: 3477:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%: 3477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3477-block  1
branch  3 never executed
branch  4 never executed
    #####: 3478:    xmlout = posix::FOpen(output_file_.c_str(), "w");
    %%%%%: 3478-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3478-block  1
        -: 3479:  }
    #####: 3480:  if (xmlout == NULL) {
    %%%%%: 3480-block  0
branch  0 never executed
branch  1 never executed
        -: 3481:    // TODO(wan): report the reason of the failure.
        -: 3482:    //
        -: 3483:    // We don't do it for now as:
        -: 3484:    //
        -: 3485:    //   1. There is no urgent need for it.
        -: 3486:    //   2. It's a bit involved to make the errno variable thread-safe on
        -: 3487:    //      all three operating systems (Linux, Windows, and Mac OS).
        -: 3488:    //   3. To interpret the meaning of errno in a thread-safe way,
        -: 3489:    //      we need the strerror_r() function, which is not available on
        -: 3490:    //      Windows.
        -: 3491:
    #####: 3492:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file_ << "\"";
    %%%%%: 3492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3492-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3492-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3492-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3492-block  4
call   13 never executed
    $$$$$: 3492-block  5
call   14 never executed
    $$$$$: 3492-block  6
        -: 3493:  }
    #####: 3494:  std::stringstream stream;
    %%%%%: 3494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3495:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3496:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3496-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3496-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3497:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3498:}
    %%%%%: 3498-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3498-block  1
call    3 never executed
    $$$$$: 3498-block  2
call    4 never executed
    $$$$$: 3498-block  3
call    5 never executed
        -: 3499:
        -: 3500:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 3501:// is true, the text is meant to appear as an attribute value, and
        -: 3502:// normalizable whitespace is preserved by replacing it with character
        -: 3503:// references.
        -: 3504://
        -: 3505:// Invalid XML characters in str, if any, are stripped from the output.
        -: 3506:// It is expected that most, if not all, of the text processed by this
        -: 3507:// module will consist of ordinary English text.
        -: 3508:// If this module is ever modified to produce version 1.1 XML output,
        -: 3509:// most invalid characters can be retained using character references.
        -: 3510:// TODO(wan): It might be nice to have a minimally invasive, human-readable
        -: 3511:// escaping scheme for invalid characters, rather than dropping them.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 3512:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 3513:    const std::string& str, bool is_attribute) {
    #####: 3514:  Message m;
    %%%%%: 3514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3515:
    #####: 3516:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 3516-block  0
    %%%%%: 3516-block  1
    %%%%%: 3516-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3517:    const char ch = str[i];
    %%%%%: 3517-block  0
call    0 never executed
    #####: 3518:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3519:      case '<':
    #####: 3520:        m << "&lt;";
    %%%%%: 3520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3521:        break;
    %%%%%: 3521-block  0
    #####: 3522:      case '>':
    #####: 3523:        m << "&gt;";
    %%%%%: 3523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3524:        break;
    %%%%%: 3524-block  0
    #####: 3525:      case '&':
    #####: 3526:        m << "&amp;";
    %%%%%: 3526-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3527:        break;
    %%%%%: 3527-block  0
    #####: 3528:      case '\'':
    #####: 3529:        if (is_attribute)
    %%%%%: 3529-block  0
branch  0 never executed
branch  1 never executed
    #####: 3530:          m << "&apos;";
    %%%%%: 3530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3531:        else
    #####: 3532:          m << '\'';
    %%%%%: 3532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3532-block  1
    $$$$$: 3532-block  2
    #####: 3533:        break;
    %%%%%: 3533-block  0
    #####: 3534:      case '"':
    #####: 3535:        if (is_attribute)
    %%%%%: 3535-block  0
branch  0 never executed
branch  1 never executed
    #####: 3536:          m << "&quot;";
    %%%%%: 3536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3537:        else
    #####: 3538:          m << '"';
    %%%%%: 3538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3538-block  1
    $$$$$: 3538-block  2
    #####: 3539:        break;
    %%%%%: 3539-block  0
    #####: 3540:      default:
    #####: 3541:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 3541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3542:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 3542-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3542-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3542-block  2
    %%%%%: 3542-block  3
    %%%%%: 3542-block  4
branch  5 never executed
branch  6 never executed
    #####: 3543:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 3543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3543-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3543-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3543-block  3
call    9 never executed
    $$$$$: 3543-block  4
call   10 never executed
    $$$$$: 3543-block  5
    #####: 3544:              << ";";
    %%%%%: 3544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3545:          else
    #####: 3546:            m << ch;
    %%%%%: 3546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3547:        }
    #####: 3548:        break;
    %%%%%: 3548-block  0
        -: 3549:    }
        -: 3550:  }
        -: 3551:
    #####: 3552:  return m.GetString();
    %%%%%: 3552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3552-block  1
    #####: 3553:}
    %%%%%: 3553-block  0
call    0 never executed
    $$$$$: 3553-block  1
call    1 never executed
        -: 3554:
        -: 3555:// Returns the given string with all characters invalid in XML removed.
        -: 3556:// Currently invalid characters are dropped from the string. An
        -: 3557:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3558:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 3559:    const std::string& str) {
    #####: 3560:  std::string output;
    %%%%%: 3560-block  0
call    0 never executed
    #####: 3561:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3562:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 3562-block  0
call    0 never executed
    %%%%%: 3562-block  1
call    1 never executed
    %%%%%: 3562-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3563:    if (IsValidXmlCharacter(*it))
    %%%%%: 3563-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3564:      output.push_back(*it);
    %%%%%: 3564-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3565:
    #####: 3566:  return output;
    %%%%%: 3566-block  0
    %%%%%: 3566-block  1
    =====: 3567:}
    $$$$$: 3567-block  0
call    0 never executed
        -: 3568:
        -: 3569:// The following routines generate an XML representation of a UnitTest
        -: 3570:// object.
        -: 3571://
        -: 3572:// This is how Google Test concepts map to the DTD:
        -: 3573://
        -: 3574:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 3575://   <testsuite name="testcase-name">  <-- corresponds to a TestCase object
        -: 3576://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 3577://       <failure message="...">...</failure>
        -: 3578://       <failure message="...">...</failure>
        -: 3579://       <failure message="...">...</failure>
        -: 3580://                                     <-- individual assertion failures
        -: 3581://     </testcase>
        -: 3582://   </testsuite>
        -: 3583:// </testsuites>
        -: 3584:
        -: 3585:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 3586:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 3587:  ::std::stringstream ss;
    %%%%%: 3587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3588:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 3588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3589:  return ss.str();
    %%%%%: 3589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3589-block  1
    #####: 3590:}
    %%%%%: 3590-block  0
call    0 never executed
    $$$$$: 3590-block  1
call    1 never executed
        -: 3591:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 3592:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 3593:#if defined(_MSC_VER)
        -: 3594:  return localtime_s(out, &seconds) == 0;
        -: 3595:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 3596:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 3597:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 3598:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 3598-block  0
call    0 never executed
    #####: 3599:  if (tm_ptr == NULL)
branch  0 never executed
branch  1 never executed
    #####: 3600:    return false;
    %%%%%: 3600-block  0
    #####: 3601:  *out = *tm_ptr;
    #####: 3602:  return true;
    %%%%%: 3602-block  0
        -: 3603:#else
        -: 3604:  return localtime_r(&seconds, out) != NULL;
        -: 3605:#endif
        -: 3606:}
        -: 3607:
        -: 3608:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 3609:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 3610:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 3611:  struct tm time_struct;
    #####: 3612:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 3612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3612-block  1
branch  3 never executed
branch  4 never executed
    #####: 3613:    return "";
    %%%%%: 3613-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3613-block  1
call    4 never executed
    $$$$$: 3613-block  2
call    5 never executed
    $$$$$: 3613-block  3
        -: 3614:  // YYYY-MM-DDThh:mm:ss
    #####: 3615:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 3615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3615-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3615-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 3615-block  3
call   11 never executed
    $$$$$: 3615-block  4
    $$$$$: 3615-block  5
call   12 never executed
    $$$$$: 3615-block  6
    $$$$$: 3615-block  7
call   13 never executed
    $$$$$: 3615-block  8
    $$$$$: 3615-block  9
    #####: 3616:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 3616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3616-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3616-block  3
call   12 never executed
    $$$$$: 3616-block  4
    $$$$$: 3616-block  5
call   13 never executed
    $$$$$: 3616-block  6
    $$$$$: 3616-block  7
call   14 never executed
    $$$$$: 3616-block  8
    #####: 3617:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 3617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3617-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3617-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3617-block  3
call   12 never executed
    $$$$$: 3617-block  4
    $$$$$: 3617-block  5
call   13 never executed
    $$$$$: 3617-block  6
    $$$$$: 3617-block  7
call   14 never executed
    $$$$$: 3617-block  8
    #####: 3618:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 3618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3618-block  3
call   12 never executed
    $$$$$: 3618-block  4
    $$$$$: 3618-block  5
call   13 never executed
    $$$$$: 3618-block  6
    $$$$$: 3618-block  7
call   14 never executed
    $$$$$: 3618-block  8
    #####: 3619:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 3619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3619-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 3619-block  3
call    9 never executed
    $$$$$: 3619-block  4
    $$$$$: 3619-block  5
call   10 never executed
    $$$$$: 3619-block  6
    #####: 3620:      String::FormatIntWidth2(time_struct.tm_sec);
    %%%%%: 3620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3620-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3620-block  2
call    7 never executed
    $$$$$: 3620-block  3
        -: 3621:}
        -: 3622:
        -: 3623:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 3624:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 3625:                                                     const char* data) {
    #####: 3626:  const char* segment = data;
    #####: 3627:  *stream << "<![CDATA[";
    %%%%%: 3627-block  0
call    0 never executed
        -: 3628:  for (;;) {
    #####: 3629:    const char* const next_segment = strstr(segment, "]]>");
    #####: 3630:    if (next_segment != NULL) {
    %%%%%: 3630-block  0
branch  0 never executed
branch  1 never executed
    #####: 3631:      stream->write(
    #####: 3632:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 3632-block  0
call    0 never executed
    #####: 3633:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 3634:      segment = next_segment + strlen("]]>");
        -: 3635:    } else {
    #####: 3636:      *stream << segment;
    %%%%%: 3636-block  0
call    0 never executed
    #####: 3637:      break;
        -: 3638:    }
    #####: 3639:  }
    %%%%%: 3639-block  0
    #####: 3640:  *stream << "]]>";
    %%%%%: 3640-block  0
call    0 never executed
    #####: 3641:}
        -: 3642:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 3643:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 3644:    std::ostream* stream,
        -: 3645:    const std::string& element_name,
        -: 3646:    const std::string& name,
        -: 3647:    const std::string& value) {
        -: 3648:  const std::vector<std::string>& allowed_names =
    #####: 3649:      GetReservedAttributesForElement(element_name);
    %%%%%: 3649-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3650:
    #####: 3651:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 3651-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3651-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3651-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3651-block  3
call   13 never executed
    %%%%%: 3651-block  4
call   14 never executed
    $$$$$: 3651-block  5
    $$$$$: 3651-block  6
call   15 never executed
    $$$$$: 3651-block  7
        -: 3652:                   allowed_names.end())
        -: 3653:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 3654:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3654-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3654-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3654-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3654-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3654-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3655:
    #####: 3656:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 3656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3656-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3656-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3656-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3656-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3656-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 3656-block  6
call   18 never executed
    $$$$$: 3656-block  7
call   19 never executed
    $$$$$: 3656-block  8
    #####: 3657:}
call    0 never executed
    $$$$$: 3657-block  0
call    1 never executed
        -: 3658:
        -: 3659:// Prints an XML representation of a TestInfo object.
        -: 3660:// TODO(wan): There is also value in printing properties with the plain printer.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3661:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 3662:                                                 const char* test_case_name,
        -: 3663:                                                 const TestInfo& test_info) {
    #####: 3664:  const TestResult& result = *test_info.result();
    %%%%%: 3664-block  0
call    0 never executed
    #####: 3665:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3665-block  0
        -: 3666:
    #####: 3667:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3668:    return;
    %%%%%: 3668-block  0
        -: 3669:  }
        -: 3670:
    #####: 3671:  *stream << "    <testcase";
    %%%%%: 3671-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3672:  OutputXmlAttribute(stream, kTestcase, "name", test_info.name());
    %%%%%: 3672-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3672-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3672-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3672-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 3672-block  4
call   16 never executed
    $$$$$: 3672-block  5
    $$$$$: 3672-block  6
call   17 never executed
    $$$$$: 3672-block  7
    $$$$$: 3672-block  8
call   18 never executed
    $$$$$: 3672-block  9
    $$$$$: 3672-block 10
call   19 never executed
    $$$$$: 3672-block 11
        -: 3673:
    #####: 3674:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3674-block  0
branch  3 never executed
branch  4 never executed
    #####: 3675:    OutputXmlAttribute(stream, kTestcase, "value_param",
    %%%%%: 3675-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3675-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3675-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3675-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3675-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 3675-block  5
call   18 never executed
    $$$$$: 3675-block  6
    $$$$$: 3675-block  7
call   19 never executed
    $$$$$: 3675-block  8
    $$$$$: 3675-block  9
call   20 never executed
    $$$$$: 3675-block 10
    $$$$$: 3675-block 11
call   21 never executed
    $$$$$: 3675-block 12
        -: 3676:                       test_info.value_param());
        -: 3677:  }
    #####: 3678:  if (test_info.type_param() != NULL) {
    %%%%%: 3678-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3678-block  1
branch  3 never executed
branch  4 never executed
    #####: 3679:    OutputXmlAttribute(stream, kTestcase, "type_param", test_info.type_param());
    %%%%%: 3679-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3679-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3679-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3679-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3679-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 3679-block  5
call   18 never executed
    $$$$$: 3679-block  6
    $$$$$: 3679-block  7
call   19 never executed
    $$$$$: 3679-block  8
    $$$$$: 3679-block  9
call   20 never executed
    $$$$$: 3679-block 10
    $$$$$: 3679-block 11
call   21 never executed
    $$$$$: 3679-block 12
        -: 3680:  }
        -: 3681:
    #####: 3682:  OutputXmlAttribute(stream, kTestcase, "status",
    %%%%%: 3682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3682-block  1
    %%%%%: 3682-block  2
    %%%%%: 3682-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3682-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3682-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3682-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 3682-block  7
call   17 never executed
    $$$$$: 3682-block  8
    $$$$$: 3682-block  9
call   18 never executed
    $$$$$: 3682-block 10
    $$$$$: 3682-block 11
call   19 never executed
    $$$$$: 3682-block 12
    $$$$$: 3682-block 13
call   20 never executed
    $$$$$: 3682-block 14
    #####: 3683:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 3684:  OutputXmlAttribute(stream, kTestcase, "time",
    %%%%%: 3684-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3684-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3684-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3684-block  3
call    9 never executed
    $$$$$: 3684-block  4
    $$$$$: 3684-block  5
call   10 never executed
    $$$$$: 3684-block  6
    #####: 3685:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 3685-block  0
call    5 never executed
    $$$$$: 3685-block  1
    #####: 3686:  OutputXmlAttribute(stream, kTestcase, "classname", test_case_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3686-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3686-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3686-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 3686-block  3
call   15 never executed
    $$$$$: 3686-block  4
    $$$$$: 3686-block  5
call   16 never executed
    $$$$$: 3686-block  6
    $$$$$: 3686-block  7
call   17 never executed
    $$$$$: 3686-block  8
    $$$$$: 3686-block  9
call   18 never executed
    $$$$$: 3686-block 10
        -: 3687:
    #####: 3688:  int failures = 0;
    #####: 3689:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 3689-block  0
    %%%%%: 3689-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3690:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 3690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3691:    if (part.failed()) {
    %%%%%: 3691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3692:      if (++failures == 1) {
    %%%%%: 3692-block  0
branch  0 never executed
branch  1 never executed
    #####: 3693:        *stream << ">\n";
    %%%%%: 3693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3694:      }
        -: 3695:      const std::string location =
        -: 3696:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 3697:                                                          part.line_number());
    %%%%%: 3697-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3698:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 3698-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3698-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3698-block  2
        -: 3699:      *stream << "      <failure message=\""
    #####: 3700:              << EscapeXmlAttribute(summary.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3700-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3700-block  1
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 3700-block  2
call   10 never executed
    $$$$$: 3700-block  3
    $$$$$: 3700-block  4
call   11 never executed
    $$$$$: 3700-block  5
    $$$$$: 3700-block  6
call   12 never executed
    $$$$$: 3700-block  7
    #####: 3701:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3701-block  0
call    3 never executed
    %%%%%: 3701-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3701-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3702:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3702-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 3702-block  1
    #####: 3703:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3703-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3703-block  1
call    7 never executed
    $$$$$: 3703-block  2
call    8 never executed
    $$$$$: 3703-block  3
    #####: 3704:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3705:    }
    %%%%%: 3705-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3705-block  1
call    3 never executed
    $$$$$: 3705-block  2
call    4 never executed
    $$$$$: 3705-block  3
call    5 never executed
        -: 3706:  }
        -: 3707:
    #####: 3708:  if (failures == 0 && result.test_property_count() == 0) {
    %%%%%: 3708-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3708-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3708-block  2
    %%%%%: 3708-block  3
    %%%%%: 3708-block  4
branch  5 never executed
branch  6 never executed
    #####: 3709:    *stream << " />\n";
    %%%%%: 3709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3710:  } else {
    #####: 3711:    if (failures == 0) {
    %%%%%: 3711-block  0
branch  0 never executed
branch  1 never executed
    #####: 3712:      *stream << ">\n";
    %%%%%: 3712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3713:    }
    #####: 3714:    OutputXmlTestProperties(stream, result);
    %%%%%: 3714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3715:    *stream << "    </testcase>\n";
    %%%%%: 3715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3716:  }
    #####: 3717:}
    %%%%%: 3717-block  0
    %%%%%: 3717-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 3717-block  2
call    3 never executed
        -: 3718:
        -: 3719:// Prints an XML representation of a TestCase object
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 3720:void XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream* stream,
        -: 3721:                                                const TestCase& test_case) {
    #####: 3722:  const std::string kTestsuite = "testsuite";
    %%%%%: 3722-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3722-block  1
    #####: 3723:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3723-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3724:  OutputXmlAttribute(stream, kTestsuite, "name", test_case.name());
    %%%%%: 3724-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3724-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3724-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3724-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 3724-block  4
call   16 never executed
    $$$$$: 3724-block  5
    $$$$$: 3724-block  6
call   17 never executed
    $$$$$: 3724-block  7
    $$$$$: 3724-block  8
call   18 never executed
    $$$$$: 3724-block  9
    $$$$$: 3724-block 10
call   19 never executed
    $$$$$: 3724-block 11
    #####: 3725:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 3725-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3725-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3725-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3725-block  3
call    9 never executed
    $$$$$: 3725-block  4
    $$$$$: 3725-block  5
call   10 never executed
    $$$$$: 3725-block  6
    #####: 3726:                     StreamableToString(test_case.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3726-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3726-block  1
call    7 never executed
    $$$$$: 3726-block  2
    $$$$$: 3726-block  3
    #####: 3727:  OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 3727-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3727-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3727-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3727-block  3
call    9 never executed
    $$$$$: 3727-block  4
    $$$$$: 3727-block  5
call   10 never executed
    $$$$$: 3727-block  6
    #####: 3728:                     StreamableToString(test_case.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3728-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3728-block  1
call    7 never executed
    $$$$$: 3728-block  2
    $$$$$: 3728-block  3
    #####: 3729:  OutputXmlAttribute(
    %%%%%: 3729-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3729-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3729-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3729-block  3
call    9 never executed
    $$$$$: 3729-block  4
    $$$$$: 3729-block  5
call   10 never executed
    $$$$$: 3729-block  6
        -: 3730:      stream, kTestsuite, "disabled",
    #####: 3731:      StreamableToString(test_case.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3731-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3731-block  1
call    7 never executed
    $$$$$: 3731-block  2
    $$$$$: 3731-block  3
    #####: 3732:  OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3732-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3732-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3732-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 3732-block  3
call   15 never executed
    $$$$$: 3732-block  4
    $$$$$: 3732-block  5
call   16 never executed
    $$$$$: 3732-block  6
    $$$$$: 3732-block  7
call   17 never executed
    $$$$$: 3732-block  8
    $$$$$: 3732-block  9
call   18 never executed
    $$$$$: 3732-block 10
    #####: 3733:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 3733-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3733-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3733-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3733-block  3
call    9 never executed
    $$$$$: 3733-block  4
    $$$$$: 3733-block  5
call   10 never executed
    $$$$$: 3733-block  6
    #####: 3734:                     FormatTimeInMillisAsSeconds(test_case.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 3734-block  0
call    5 never executed
    $$$$$: 3734-block  1
    #####: 3735:  *stream << TestPropertiesAsXmlAttributes(test_case.ad_hoc_test_result())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3735-block  0
call    4 never executed
    $$$$$: 3735-block  1
call    5 never executed
    $$$$$: 3735-block  2
    #####: 3736:          << ">\n";
    %%%%%: 3736-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3736-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3737:
    #####: 3738:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    %%%%%: 3738-block  0
    %%%%%: 3738-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3739:    if (test_case.GetTestInfo(i)->is_reportable())
    %%%%%: 3739-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3739-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3740:      OutputXmlTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    %%%%%: 3740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3740-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3741:  }
    #####: 3742:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 3742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3742-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3742-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3743:}
    %%%%%: 3743-block  0
call    0 never executed
    $$$$$: 3743-block  1
call    1 never executed
        -: 3744:
        -: 3745:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3746:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 3747:                                                const UnitTest& unit_test) {
    #####: 3748:  const std::string kTestsuites = "testsuites";
    %%%%%: 3748-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3748-block  1
        -: 3749:
    #####: 3750:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3751:  *stream << "<" << kTestsuites;
    %%%%%: 3751-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3751-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3752:
    #####: 3753:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 3753-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3753-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3753-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3753-block  3
call    9 never executed
    $$$$$: 3753-block  4
    $$$$$: 3753-block  5
call   10 never executed
    $$$$$: 3753-block  6
    #####: 3754:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 3754-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3754-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3754-block  2
call    7 never executed
    $$$$$: 3754-block  3
    $$$$$: 3754-block  4
    #####: 3755:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 3755-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3755-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3755-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3755-block  3
call    9 never executed
    $$$$$: 3755-block  4
    $$$$$: 3755-block  5
call   10 never executed
    $$$$$: 3755-block  6
    #####: 3756:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3756-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3756-block  1
call    7 never executed
    $$$$$: 3756-block  2
    $$$$$: 3756-block  3
    #####: 3757:  OutputXmlAttribute(
    %%%%%: 3757-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3757-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3757-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3757-block  3
call    9 never executed
    $$$$$: 3757-block  4
    $$$$$: 3757-block  5
call   10 never executed
    $$$$$: 3757-block  6
        -: 3758:      stream, kTestsuites, "disabled",
    #####: 3759:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3759-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3759-block  1
call    7 never executed
    $$$$$: 3759-block  2
    $$$$$: 3759-block  3
    #####: 3760:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3760-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3760-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3760-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 3760-block  3
call   15 never executed
    $$$$$: 3760-block  4
    $$$$$: 3760-block  5
call   16 never executed
    $$$$$: 3760-block  6
    $$$$$: 3760-block  7
call   17 never executed
    $$$$$: 3760-block  8
    $$$$$: 3760-block  9
call   18 never executed
    $$$$$: 3760-block 10
    #####: 3761:  OutputXmlAttribute(
    %%%%%: 3761-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3761-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3761-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3761-block  3
call    9 never executed
    $$$$$: 3761-block  4
    $$$$$: 3761-block  5
call   10 never executed
    $$$$$: 3761-block  6
        -: 3762:      stream, kTestsuites, "timestamp",
    #####: 3763:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 3763-block  0
call    5 never executed
    $$$$$: 3763-block  1
    #####: 3764:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 3764-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3764-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3764-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3764-block  3
call    9 never executed
    $$$$$: 3764-block  4
    $$$$$: 3764-block  5
call   10 never executed
    $$$$$: 3764-block  6
    #####: 3765:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 3765-block  0
call    5 never executed
    $$$$$: 3765-block  1
        -: 3766:
    #####: 3767:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 3768:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 3768-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3768-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3768-block  2
call    7 never executed
call    8 never executed
    $$$$$: 3768-block  3
call    9 never executed
    $$$$$: 3768-block  4
    $$$$$: 3768-block  5
call   10 never executed
    $$$$$: 3768-block  6
    #####: 3769:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 3769-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 3769-block  1
call    5 never executed
    $$$$$: 3769-block  2
    $$$$$: 3769-block  3
        -: 3770:  }
    #####: 3771:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 3771-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3771-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3771-block  2
call    7 never executed
    $$$$$: 3771-block  3
call    8 never executed
    $$$$$: 3771-block  4
        -: 3772:
    #####: 3773:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3773-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3773-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3773-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 3773-block  3
call   15 never executed
    $$$$$: 3773-block  4
    $$$$$: 3773-block  5
call   16 never executed
    $$$$$: 3773-block  6
    $$$$$: 3773-block  7
call   17 never executed
    $$$$$: 3773-block  8
    $$$$$: 3773-block  9
call   18 never executed
    $$$$$: 3773-block 10
    #####: 3774:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3775:
    #####: 3776:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    %%%%%: 3776-block  0
    %%%%%: 3776-block  1
    %%%%%: 3776-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3777:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0)
    %%%%%: 3777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3777-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3777-block  2
branch  6 never executed
branch  7 never executed
    #####: 3778:      PrintXmlTestCase(stream, *unit_test.GetTestCase(i));
    %%%%%: 3778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3778-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3779:  }
    #####: 3780:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 3780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3781:}
    %%%%%: 3781-block  0
call    0 never executed
    $$$$$: 3781-block  1
call    1 never executed
        -: 3782:
        -: 3783:// Produces a string representing the test properties in a result as space
        -: 3784:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 3785:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 3786:    const TestResult& result) {
    #####: 3787:  Message attributes;
    %%%%%: 3787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3788:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 3788-block  0
    %%%%%: 3788-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3789:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 3789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3790:    attributes << " " << property.key() << "="
    %%%%%: 3790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3790-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3790-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 3790-block  3
    #####: 3791:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 3791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3791-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3791-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3791-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3791-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 3791-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 3791-block  6
call   20 never executed
    $$$$$: 3791-block  7
    $$$$$: 3791-block  8
call   21 never executed
    $$$$$: 3791-block  9
    $$$$$: 3791-block 10
call   22 never executed
    $$$$$: 3791-block 11
        -: 3792:  }
    #####: 3793:  return attributes.GetString();
    %%%%%: 3793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3793-block  1
    #####: 3794:}
    %%%%%: 3794-block  0
call    0 never executed
    $$$$$: 3794-block  1
call    1 never executed
        -: 3795:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 3796:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 3797:    std::ostream* stream, const TestResult& result) {
    #####: 3798:  const std::string kProperties = "properties";
    %%%%%: 3798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3798-block  1
    #####: 3799:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 3799-block  0
        -: 3800:
    #####: 3801:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3802:    return;
    %%%%%: 3802-block  0
        -: 3803:  }
        -: 3804:
    #####: 3805:  *stream << "<" << kProperties << ">\n";
    %%%%%: 3805-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3805-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3805-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3806:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 3806-block  0
    %%%%%: 3806-block  1
    %%%%%: 3806-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3807:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 3807-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3808:    *stream << "<" << kProperty;
    %%%%%: 3808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3809:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 3809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3809-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3809-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3809-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3809-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 3809-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 3809-block  6
call   20 never executed
    $$$$$: 3809-block  7
    $$$$$: 3809-block  8
call   21 never executed
    $$$$$: 3809-block  9
    $$$$$: 3809-block 10
call   22 never executed
    $$$$$: 3809-block 11
    #####: 3810:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3810-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3810-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3810-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 3810-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 3810-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 3810-block  5
call   20 never executed
    $$$$$: 3810-block  6
    $$$$$: 3810-block  7
call   21 never executed
    $$$$$: 3810-block  8
    $$$$$: 3810-block  9
call   22 never executed
    $$$$$: 3810-block 10
    #####: 3811:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3812:  }
    #####: 3813:  *stream << "</" << kProperties << ">\n";
    %%%%%: 3813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3813-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3813-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3814:}
    %%%%%: 3814-block  0
    %%%%%: 3814-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3814-block  2
    %%%%%: 3814-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3814-block  4
call    6 never executed
    $$$$$: 3814-block  5
call    7 never executed
        -: 3815:
        -: 3816:// End XmlUnitTestResultPrinter
        -: 3817:
        -: 3818:
        -: 3819:// This class generates an JSON output file.
        -: 3820:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3821: public:
        -: 3822:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 3823:
        -: 3824:  virtual void OnTestIterationEnd(const UnitTest& unit_test, int iteration);
        -: 3825:
        -: 3826: private:
        -: 3827:  // Returns an JSON-escaped copy of the input string str.
        -: 3828:  static std::string EscapeJson(const std::string& str);
        -: 3829:
        -: 3830:  //// Verifies that the given attribute belongs to the given element and
        -: 3831:  //// streams the attribute as JSON.
        -: 3832:  static void OutputJsonKey(std::ostream* stream,
        -: 3833:                            const std::string& element_name,
        -: 3834:                            const std::string& name,
        -: 3835:                            const std::string& value,
        -: 3836:                            const std::string& indent,
        -: 3837:                            bool comma = true);
        -: 3838:  static void OutputJsonKey(std::ostream* stream,
        -: 3839:                            const std::string& element_name,
        -: 3840:                            const std::string& name,
        -: 3841:                            int value,
        -: 3842:                            const std::string& indent,
        -: 3843:                            bool comma = true);
        -: 3844:
        -: 3845:  // Streams a JSON representation of a TestInfo object.
        -: 3846:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 3847:                                 const char* test_case_name,
        -: 3848:                                 const TestInfo& test_info);
        -: 3849:
        -: 3850:  // Prints a JSON representation of a TestCase object
        -: 3851:  static void PrintJsonTestCase(::std::ostream* stream,
        -: 3852:                                const TestCase& test_case);
        -: 3853:
        -: 3854:  // Prints a JSON summary of unit_test to output stream out.
        -: 3855:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 3856:                                const UnitTest& unit_test);
        -: 3857:
        -: 3858:  // Produces a string representing the test properties in a result as
        -: 3859:  // a JSON dictionary.
        -: 3860:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 3861:                                          const std::string& indent);
        -: 3862:
        -: 3863:  // The output file.
        -: 3864:  const std::string output_file_;
        -: 3865:
        -: 3866:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 3867:};
        -: 3868:
        -: 3869:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3870:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 3871:    : output_file_(output_file) {
    %%%%%: 3871-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3871-block  1
call    5 never executed
    $$$$$: 3871-block  2
call    6 never executed
    $$$$$: 3871-block  3
    #####: 3872:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3873:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 3873-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3873-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3873-block  2
call    7 never executed
    $$$$$: 3873-block  3
call    8 never executed
    $$$$$: 3873-block  4
        -: 3874:  }
    #####: 3875:}
    %%%%%: 3875-block  0
    $$$$$: 3875-block  1
call    0 never executed
    $$$$$: 3875-block  2
call    1 never executed
        -: 3876:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3877:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3878:                                                  int /*iteration*/) {
    #####: 3879:  FILE* jsonout = NULL;
    #####: 3880:  FilePath output_file(output_file_);
    %%%%%: 3880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3881:  FilePath output_dir(output_file.RemoveFileName());
    %%%%%: 3881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3882:
    #####: 3883:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%: 3883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3883-block  1
branch  3 never executed
branch  4 never executed
    #####: 3884:    jsonout = posix::FOpen(output_file_.c_str(), "w");
    %%%%%: 3884-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3884-block  1
        -: 3885:  }
    #####: 3886:  if (jsonout == NULL) {
    %%%%%: 3886-block  0
branch  0 never executed
branch  1 never executed
        -: 3887:    // TODO(phosek): report the reason of the failure.
        -: 3888:    //
        -: 3889:    // We don't do it for now as:
        -: 3890:    //
        -: 3891:    //   1. There is no urgent need for it.
        -: 3892:    //   2. It's a bit involved to make the errno variable thread-safe on
        -: 3893:    //      all three operating systems (Linux, Windows, and Mac OS).
        -: 3894:    //   3. To interpret the meaning of errno in a thread-safe way,
        -: 3895:    //      we need the strerror_r() function, which is not available on
        -: 3896:    //      Windows.
    #####: 3897:    GTEST_LOG_(FATAL) << "Unable to open file \""
    %%%%%: 3897-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3897-block  1
call    3 never executed
    %%%%%: 3897-block  2
call    4 never executed
    $$$$$: 3897-block  3
call    5 never executed
    $$$$$: 3897-block  4
    #####: 3898:                      << output_file_ << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3898-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3898-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3899:  }
    #####: 3900:  std::stringstream stream;
    %%%%%: 3900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3901:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 3901-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3902:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3902-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3902-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3903:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3904:}
    %%%%%: 3904-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3904-block  1
call    3 never executed
    $$$$$: 3904-block  2
call    4 never executed
    $$$$$: 3904-block  3
call    5 never executed
        -: 3905:
        -: 3906:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3907:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 3908:  Message m;
    %%%%%: 3908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3909:
    #####: 3910:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 3910-block  0
    %%%%%: 3910-block  1
    %%%%%: 3910-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3911:    const char ch = str[i];
    %%%%%: 3911-block  0
call    0 never executed
    #####: 3912:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3913:      case '\\':
        -: 3914:      case '"':
        -: 3915:      case '/':
    #####: 3916:        m << '\\' << ch;
    %%%%%: 3916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3916-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3916-block  2
    #####: 3917:        break;
    %%%%%: 3917-block  0
    #####: 3918:      case '\b':
    #####: 3919:        m << "\\b";
    %%%%%: 3919-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3920:        break;
    %%%%%: 3920-block  0
    #####: 3921:      case '\t':
    #####: 3922:        m << "\\t";
    %%%%%: 3922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3923:        break;
    %%%%%: 3923-block  0
    #####: 3924:      case '\n':
    #####: 3925:        m << "\\n";
    %%%%%: 3925-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3926:        break;
    %%%%%: 3926-block  0
    #####: 3927:      case '\f':
    #####: 3928:        m << "\\f";
    %%%%%: 3928-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3929:        break;
    %%%%%: 3929-block  0
    #####: 3930:      case '\r':
    #####: 3931:        m << "\\r";
    %%%%%: 3931-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3932:        break;
    %%%%%: 3932-block  0
    #####: 3933:      default:
    #####: 3934:        if (ch < ' ') {
    %%%%%: 3934-block  0
branch  0 never executed
branch  1 never executed
    #####: 3935:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 3935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3935-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3935-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3935-block  3
call    9 never executed
    $$$$$: 3935-block  4
call   10 never executed
    $$$$$: 3935-block  5
        -: 3936:        } else {
    #####: 3937:          m << ch;
    %%%%%: 3937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3938:        }
    #####: 3939:        break;
    %%%%%: 3939-block  0
        -: 3940:    }
        -: 3941:  }
        -: 3942:
    #####: 3943:  return m.GetString();
    %%%%%: 3943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3943-block  1
    #####: 3944:}
    %%%%%: 3944-block  0
call    0 never executed
    $$$$$: 3944-block  1
call    1 never executed
        -: 3945:
        -: 3946:// The following routines generate an JSON representation of a UnitTest
        -: 3947:// object.
        -: 3948:
        -: 3949:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 3950:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 3951:  ::std::stringstream ss;
    %%%%%: 3951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3952:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 3952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3952-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3953:  return ss.str();
    %%%%%: 3953-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3953-block  1
    #####: 3954:}
    %%%%%: 3954-block  0
call    0 never executed
    $$$$$: 3954-block  1
call    1 never executed
        -: 3955:
        -: 3956:// Converts the given epoch time in milliseconds to a date string in the
        -: 3957:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 3958:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 3959:  struct tm time_struct;
    #####: 3960:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 3960-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3960-block  1
branch  3 never executed
branch  4 never executed
    #####: 3961:    return "";
    %%%%%: 3961-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3961-block  1
call    4 never executed
    $$$$$: 3961-block  2
call    5 never executed
    $$$$$: 3961-block  3
        -: 3962:  // YYYY-MM-DDThh:mm:ss
    #####: 3963:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 3963-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3963-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3963-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 3963-block  3
call   11 never executed
    $$$$$: 3963-block  4
    $$$$$: 3963-block  5
call   12 never executed
    $$$$$: 3963-block  6
    $$$$$: 3963-block  7
call   13 never executed
    $$$$$: 3963-block  8
    $$$$$: 3963-block  9
    #####: 3964:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 3964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3964-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3964-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3964-block  3
call   12 never executed
    $$$$$: 3964-block  4
    $$$$$: 3964-block  5
call   13 never executed
    $$$$$: 3964-block  6
    $$$$$: 3964-block  7
call   14 never executed
    $$$$$: 3964-block  8
    #####: 3965:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 3965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3965-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3965-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3965-block  3
call   12 never executed
    $$$$$: 3965-block  4
    $$$$$: 3965-block  5
call   13 never executed
    $$$$$: 3965-block  6
    $$$$$: 3965-block  7
call   14 never executed
    $$$$$: 3965-block  8
    #####: 3966:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 3966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3966-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3966-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 3966-block  3
call   12 never executed
    $$$$$: 3966-block  4
    $$$$$: 3966-block  5
call   13 never executed
    $$$$$: 3966-block  6
    $$$$$: 3966-block  7
call   14 never executed
    $$$$$: 3966-block  8
    #####: 3967:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 3967-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3967-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3967-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3967-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 3967-block  4
call   13 never executed
    $$$$$: 3967-block  5
    $$$$$: 3967-block  6
call   14 never executed
    $$$$$: 3967-block  7
    $$$$$: 3967-block  8
call   15 never executed
    $$$$$: 3967-block  9
    #####: 3968:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 3968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3968-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3968-block  2
call    7 never executed
    $$$$$: 3968-block  3
        -: 3969:}
        -: 3970:
function _ZN7testing8internalL6IndentEi called 0 returned 0% blocks executed 0%
    #####: 3971:static inline std::string Indent(int width) {
    #####: 3972:  return std::string(width, ' ');
    %%%%%: 3972-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3972-block  1
call    4 never executed
    %%%%%: 3972-block  2
    $$$$$: 3972-block  3
call    5 never executed
        -: 3973:}
        -: 3974:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 3975:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 3976:    std::ostream* stream,
        -: 3977:    const std::string& element_name,
        -: 3978:    const std::string& name,
        -: 3979:    const std::string& value,
        -: 3980:    const std::string& indent,
        -: 3981:    bool comma) {
        -: 3982:  const std::vector<std::string>& allowed_names =
    #####: 3983:      GetReservedAttributesForElement(element_name);
    %%%%%: 3983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3984:
    #####: 3985:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 3985-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3985-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3985-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 3985-block  3
call   13 never executed
    %%%%%: 3985-block  4
call   14 never executed
    $$$$$: 3985-block  5
    $$$$$: 3985-block  6
call   15 never executed
    $$$$$: 3985-block  7
        -: 3986:                   allowed_names.end())
        -: 3987:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 3988:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3988-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3988-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3988-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3988-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3988-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3989:
    #####: 3990:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 3990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3990-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3990-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 3990-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 3990-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 3990-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 3990-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 3990-block  7
call   21 never executed
    $$$$$: 3990-block  8
call   22 never executed
    $$$$$: 3990-block  9
    #####: 3991:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 3992:    *stream << ",\n";
    %%%%%: 3992-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3993:}
    %%%%%: 3993-block  0
call    0 never executed
    $$$$$: 3993-block  1
call    1 never executed
        -: 3994:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 3995:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 3996:    std::ostream* stream,
        -: 3997:    const std::string& element_name,
        -: 3998:    const std::string& name,
        -: 3999:    int value,
        -: 4000:    const std::string& indent,
        -: 4001:    bool comma) {
        -: 4002:  const std::vector<std::string>& allowed_names =
    #####: 4003:      GetReservedAttributesForElement(element_name);
    %%%%%: 4003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4004:
    #####: 4005:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4005-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4005-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4005-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4005-block  3
call   13 never executed
    %%%%%: 4005-block  4
call   14 never executed
    $$$$$: 4005-block  5
    $$$$$: 4005-block  6
call   15 never executed
    $$$$$: 4005-block  7
        -: 4006:                   allowed_names.end())
        -: 4007:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4008:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4008-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4008-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4008-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4008-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4008-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4009:
    #####: 4010:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4010-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4010-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4010-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4010-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4010-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4010-block  6
call   18 never executed
    $$$$$: 4010-block  7
call   19 never executed
    $$$$$: 4010-block  8
    #####: 4011:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4012:    *stream << ",\n";
    %%%%%: 4012-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4013:}
    %%%%%: 4013-block  0
call    0 never executed
    $$$$$: 4013-block  1
call    1 never executed
        -: 4014:
        -: 4015:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4016:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4017:                                                   const char* test_case_name,
        -: 4018:                                                   const TestInfo& test_info) {
    #####: 4019:  const TestResult& result = *test_info.result();
    %%%%%: 4019-block  0
call    0 never executed
    #####: 4020:  const std::string kTestcase = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4020-block  0
    #####: 4021:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4022:
    #####: 4023:  *stream << Indent(8) << "{\n";
    %%%%%: 4023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4023-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4023-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4023-block  3
call    9 never executed
    $$$$$: 4023-block  4
call   10 never executed
    $$$$$: 4023-block  5
    #####: 4024:  OutputJsonKey(stream, kTestcase, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4024-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4024-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4024-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4024-block  3
call   16 never executed
    $$$$$: 4024-block  4
    $$$$$: 4024-block  5
call   17 never executed
    $$$$$: 4024-block  6
    $$$$$: 4024-block  7
call   18 never executed
    $$$$$: 4024-block  8
    $$$$$: 4024-block  9
call   19 never executed
    $$$$$: 4024-block 10
        -: 4025:
    #####: 4026:  if (test_info.value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4026-block  0
branch  3 never executed
branch  4 never executed
    #####: 4027:    OutputJsonKey(stream, kTestcase, "value_param",
    %%%%%: 4027-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4027-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4027-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4027-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4027-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 4027-block  5
call   18 never executed
    $$$$$: 4027-block  6
    $$$$$: 4027-block  7
call   19 never executed
    $$$$$: 4027-block  8
    $$$$$: 4027-block  9
call   20 never executed
    $$$$$: 4027-block 10
    $$$$$: 4027-block 11
call   21 never executed
    $$$$$: 4027-block 12
        -: 4028:                  test_info.value_param(), kIndent);
        -: 4029:  }
    #####: 4030:  if (test_info.type_param() != NULL) {
    %%%%%: 4030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4030-block  1
branch  3 never executed
branch  4 never executed
    #####: 4031:    OutputJsonKey(stream, kTestcase, "type_param", test_info.type_param(),
    %%%%%: 4031-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4031-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4031-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4031-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4031-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$: 4031-block  5
call   18 never executed
    $$$$$: 4031-block  6
    $$$$$: 4031-block  7
call   19 never executed
    $$$$$: 4031-block  8
    $$$$$: 4031-block  9
call   20 never executed
    $$$$$: 4031-block 10
    $$$$$: 4031-block 11
call   21 never executed
    $$$$$: 4031-block 12
        -: 4032:                  kIndent);
        -: 4033:  }
        -: 4034:
    #####: 4035:  OutputJsonKey(stream, kTestcase, "status",
    %%%%%: 4035-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4035-block  1
    %%%%%: 4035-block  2
    %%%%%: 4035-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4035-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4035-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4035-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4035-block  7
call   17 never executed
    $$$$$: 4035-block  8
    $$$$$: 4035-block  9
call   18 never executed
    $$$$$: 4035-block 10
    $$$$$: 4035-block 11
call   19 never executed
    $$$$$: 4035-block 12
    $$$$$: 4035-block 13
call   20 never executed
    $$$$$: 4035-block 14
    #####: 4036:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4037:  OutputJsonKey(stream, kTestcase, "time",
    %%%%%: 4037-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4037-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4037-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4037-block  3
call    9 never executed
    $$$$$: 4037-block  4
    $$$$$: 4037-block  5
call   10 never executed
    $$$$$: 4037-block  6
    #####: 4038:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4038-block  0
call    5 never executed
    $$$$$: 4038-block  1
    #####: 4039:  OutputJsonKey(stream, kTestcase, "classname", test_case_name, kIndent, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4039-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4039-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4039-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4039-block  3
call   15 never executed
    $$$$$: 4039-block  4
    $$$$$: 4039-block  5
call   16 never executed
    $$$$$: 4039-block  6
    $$$$$: 4039-block  7
call   17 never executed
    $$$$$: 4039-block  8
    $$$$$: 4039-block  9
call   18 never executed
    $$$$$: 4039-block 10
    #####: 4040:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4040-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4040-block  1
call    6 never executed
    $$$$$: 4040-block  2
call    7 never executed
    $$$$$: 4040-block  3
        -: 4041:
    #####: 4042:  int failures = 0;
    #####: 4043:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4043-block  0
    %%%%%: 4043-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4044:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4044-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4045:    if (part.failed()) {
    %%%%%: 4045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4046:      *stream << ",\n";
    %%%%%: 4046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4047:      if (++failures == 1) {
    %%%%%: 4047-block  0
branch  0 never executed
branch  1 never executed
    #####: 4048:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4048-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4048-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4048-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4048-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4049:      }
        -: 4050:      const std::string location =
        -: 4051:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4052:                                                          part.line_number());
    %%%%%: 4052-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4053:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4053-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4053-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4053-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    $$$$$: 4053-block  3
    $$$$$: 4053-block  4
        -: 4054:      *stream << kIndent << "  {\n"
        -: 4055:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4056:              << kIndent << "    \"type\": \"\"\n"
    #####: 4057:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4057-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4057-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4057-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4057-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4057-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4057-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4057-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4057-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4057-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####: 4058:    }
    %%%%%: 4058-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4058-block  1
call    2 never executed
    $$$$$: 4058-block  2
call    3 never executed
        -: 4059:  }
        -: 4060:
    #####: 4061:  if (failures > 0)
    %%%%%: 4061-block  0
branch  0 never executed
branch  1 never executed
    #####: 4062:    *stream << "\n" << kIndent << "]";
    %%%%%: 4062-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4062-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4062-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4063:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4063-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4063-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4063-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4063-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4063-block  4
call   12 never executed
    $$$$$: 4063-block  5
call   13 never executed
    $$$$$: 4063-block  6
    #####: 4064:}
call    0 never executed
call    1 never executed
    $$$$$: 4064-block  0
call    2 never executed
    $$$$$: 4064-block  1
call    3 never executed
        -: 4065:
        -: 4066:// Prints an JSON representation of a TestCase object
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestCaseEPSoRKNS_8TestCaseE called 0 returned 0% blocks executed 0%
    #####: 4067:void JsonUnitTestResultPrinter::PrintJsonTestCase(std::ostream* stream,
        -: 4068:                                                  const TestCase& test_case) {
    #####: 4069:  const std::string kTestsuite = "testsuite";
    %%%%%: 4069-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4069-block  1
    #####: 4070:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4071:
    #####: 4072:  *stream << Indent(4) << "{\n";
    %%%%%: 4072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4072-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4072-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4072-block  3
call    9 never executed
    $$$$$: 4072-block  4
call   10 never executed
    $$$$$: 4072-block  5
    #####: 4073:  OutputJsonKey(stream, kTestsuite, "name", test_case.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4073-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4073-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4073-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4073-block  3
call   16 never executed
    $$$$$: 4073-block  4
    $$$$$: 4073-block  5
call   17 never executed
    $$$$$: 4073-block  6
    $$$$$: 4073-block  7
call   18 never executed
    $$$$$: 4073-block  8
    $$$$$: 4073-block  9
call   19 never executed
    $$$$$: 4073-block 10
    #####: 4074:  OutputJsonKey(stream, kTestsuite, "tests", test_case.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4074-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4074-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4074-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4074-block  3
call   12 never executed
    $$$$$: 4074-block  4
    $$$$$: 4074-block  5
call   13 never executed
    $$$$$: 4074-block  6
        -: 4075:                kIndent);
    #####: 4076:  OutputJsonKey(stream, kTestsuite, "failures", test_case.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4076-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4076-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4076-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4076-block  3
call   12 never executed
    $$$$$: 4076-block  4
    $$$$$: 4076-block  5
call   13 never executed
    $$$$$: 4076-block  6
        -: 4077:                kIndent);
    #####: 4078:  OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4078-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4078-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4078-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4078-block  3
call   12 never executed
    $$$$$: 4078-block  4
    $$$$$: 4078-block  5
call   13 never executed
    $$$$$: 4078-block  6
        -: 4079:                test_case.reportable_disabled_test_count(), kIndent);
    #####: 4080:  OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4080-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4080-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4080-block  2
call    9 never executed
    $$$$$: 4080-block  3
    $$$$$: 4080-block  4
call   10 never executed
    $$$$$: 4080-block  5
    #####: 4081:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4081-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4081-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4081-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4081-block  3
call    9 never executed
    $$$$$: 4081-block  4
    $$$$$: 4081-block  5
call   10 never executed
    $$$$$: 4081-block  6
    #####: 4082:                FormatTimeInMillisAsDuration(test_case.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4082-block  0
call    5 never executed
    $$$$$: 4082-block  1
        -: 4083:                false);
    #####: 4084:  *stream << TestPropertiesAsJson(test_case.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4084-block  0
call    4 never executed
    $$$$$: 4084-block  1
call    5 never executed
    $$$$$: 4084-block  2
    #####: 4085:          << ",\n";
    %%%%%: 4085-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4085-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4086:
    #####: 4087:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4087-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4087-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4087-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4088:
    #####: 4089:  bool comma = false;
    #####: 4090:  for (int i = 0; i < test_case.total_test_count(); ++i) {
    %%%%%: 4090-block  0
    %%%%%: 4090-block  1
    %%%%%: 4090-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4091:    if (test_case.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4091-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4091-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4092:      if (comma) {
    %%%%%: 4092-block  0
branch  0 never executed
branch  1 never executed
    #####: 4093:        *stream << ",\n";
    %%%%%: 4093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4094:      } else {
    #####: 4095:        comma = true;
    %%%%%: 4095-block  0
        -: 4096:      }
    #####: 4097:      OutputJsonTestInfo(stream, test_case.name(), *test_case.GetTestInfo(i));
    %%%%%: 4097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4097-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4098:    }
        -: 4099:  }
    #####: 4100:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4100-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4100-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4100-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4100-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4100-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4100-block  6
call   18 never executed
    $$$$$: 4100-block  7
call   19 never executed
    $$$$$: 4100-block  8
    #####: 4101:}
call    0 never executed
call    1 never executed
    $$$$$: 4101-block  0
call    2 never executed
    $$$$$: 4101-block  1
call    3 never executed
        -: 4102:
        -: 4103:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4104:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4105:                                                  const UnitTest& unit_test) {
    #####: 4106:  const std::string kTestsuites = "testsuites";
    %%%%%: 4106-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4106-block  1
    #####: 4107:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4108:  *stream << "{\n";
    %%%%%: 4108-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4109:
    #####: 4110:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4110-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4110-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4110-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4110-block  4
call   12 never executed
    $$$$$: 4110-block  5
    $$$$$: 4110-block  6
call   13 never executed
    $$$$$: 4110-block  7
        -: 4111:                kIndent);
    #####: 4112:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4112-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4112-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4112-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4112-block  3
call   12 never executed
    $$$$$: 4112-block  4
    $$$$$: 4112-block  5
call   13 never executed
    $$$$$: 4112-block  6
        -: 4113:                kIndent);
    #####: 4114:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4114-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4114-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4114-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4114-block  3
call   12 never executed
    $$$$$: 4114-block  4
    $$$$$: 4114-block  5
call   13 never executed
    $$$$$: 4114-block  6
        -: 4115:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4116:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4116-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4116-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4116-block  2
call    9 never executed
    $$$$$: 4116-block  3
    $$$$$: 4116-block  4
call   10 never executed
    $$$$$: 4116-block  5
    #####: 4117:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4118:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4118-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4118-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4118-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4118-block  3
call   10 never executed
    $$$$$: 4118-block  4
    $$$$$: 4118-block  5
call   11 never executed
    $$$$$: 4118-block  6
        -: 4119:                  kIndent);
        -: 4120:  }
    #####: 4121:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4121-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4121-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4121-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4121-block  3
call    9 never executed
    $$$$$: 4121-block  4
    $$$$$: 4121-block  5
call   10 never executed
    $$$$$: 4121-block  6
    #####: 4122:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4122-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4122-block  1
call    5 never executed
    $$$$$: 4122-block  2
        -: 4123:                kIndent);
    #####: 4124:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4124-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4124-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4124-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4124-block  3
call    9 never executed
    $$$$$: 4124-block  4
    $$$$$: 4124-block  5
call   10 never executed
    $$$$$: 4124-block  6
    #####: 4125:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4125-block  0
call    5 never executed
    $$$$$: 4125-block  1
        -: 4126:                false);
        -: 4127:
    #####: 4128:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4128-block  0
call    4 never executed
    $$$$$: 4128-block  1
call    5 never executed
    $$$$$: 4128-block  2
    #####: 4129:          << ",\n";
    %%%%%: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4129-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4130:
    #####: 4131:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4131-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4131-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4131-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4131-block  3
call   15 never executed
    $$$$$: 4131-block  4
    $$$$$: 4131-block  5
call   16 never executed
    $$$$$: 4131-block  6
    $$$$$: 4131-block  7
call   17 never executed
    $$$$$: 4131-block  8
    $$$$$: 4131-block  9
call   18 never executed
    $$$$$: 4131-block 10
    #####: 4132:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4132-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4132-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4132-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4133:
    #####: 4134:  bool comma = false;
    #####: 4135:  for (int i = 0; i < unit_test.total_test_case_count(); ++i) {
    %%%%%: 4135-block  0
    %%%%%: 4135-block  1
    %%%%%: 4135-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4136:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0) {
    %%%%%: 4136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4136-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4136-block  2
branch  6 never executed
branch  7 never executed
    #####: 4137:      if (comma) {
    %%%%%: 4137-block  0
branch  0 never executed
branch  1 never executed
    #####: 4138:        *stream << ",\n";
    %%%%%: 4138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4139:      } else {
    #####: 4140:        comma = true;
    %%%%%: 4140-block  0
        -: 4141:      }
    #####: 4142:      PrintJsonTestCase(stream, *unit_test.GetTestCase(i));
    %%%%%: 4142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4142-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4143:    }
        -: 4144:  }
        -: 4145:
    #####: 4146:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 4146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4146-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4146-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4146-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4147:}
    %%%%%: 4147-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4147-block  1
call    2 never executed
    $$$$$: 4147-block  2
call    3 never executed
        -: 4148:
        -: 4149:// Produces a string representing the test properties in a result as
        -: 4150:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4151:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4152:    const TestResult& result, const std::string& indent) {
    #####: 4153:  Message attributes;
    %%%%%: 4153-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4154:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4154-block  0
    %%%%%: 4154-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4155:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4156:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 4156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4156-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4156-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4156-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4156-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 4156-block  5
    #####: 4157:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4157-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4157-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4157-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4157-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4157-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4157-block  6
call   20 never executed
    $$$$$: 4157-block  7
    $$$$$: 4157-block  8
call   21 never executed
    $$$$$: 4157-block  9
    $$$$$: 4157-block 10
call   22 never executed
    $$$$$: 4157-block 11
        -: 4158:  }
    #####: 4159:  return attributes.GetString();
    %%%%%: 4159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4159-block  1
    #####: 4160:}
    %%%%%: 4160-block  0
call    0 never executed
    $$$$$: 4160-block  1
call    1 never executed
        -: 4161:
        -: 4162:// End JsonUnitTestResultPrinter
        -: 4163:
        -: 4164:#if GTEST_CAN_STREAM_RESULTS_
        -: 4165:
        -: 4166:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4167:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4168:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4169:// in both time and space -- important as the input str may contain an
        -: 4170:// arbitrarily long test failure message and stack trace.
        -: 4171:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4172:  std::string result;
        -: 4173:  result.reserve(strlen(str) + 1);
        -: 4174:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4175:    switch (ch) {
        -: 4176:      case '%':
        -: 4177:      case '=':
        -: 4178:      case '&':
        -: 4179:      case '\n':
        -: 4180:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4181:        break;
        -: 4182:      default:
        -: 4183:        result.push_back(ch);
        -: 4184:        break;
        -: 4185:    }
        -: 4186:  }
        -: 4187:  return result;
        -: 4188:}
        -: 4189:
        -: 4190:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4191:  GTEST_CHECK_(sockfd_ == -1)
        -: 4192:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4193:
        -: 4194:  addrinfo hints;
        -: 4195:  memset(&hints, 0, sizeof(hints));
        -: 4196:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
        -: 4197:  hints.ai_socktype = SOCK_STREAM;
        -: 4198:  addrinfo* servinfo = NULL;
        -: 4199:
        -: 4200:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4201:  // the given host name.
        -: 4202:  const int error_num = getaddrinfo(
        -: 4203:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4204:  if (error_num != 0) {
        -: 4205:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4206:                        << gai_strerror(error_num);
        -: 4207:  }
        -: 4208:
        -: 4209:  // Loop through all the results and connect to the first we can.
        -: 4210:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != NULL;
        -: 4211:       cur_addr = cur_addr->ai_next) {
        -: 4212:    sockfd_ = socket(
        -: 4213:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
        -: 4214:    if (sockfd_ != -1) {
        -: 4215:      // Connect the client socket to the server socket.
        -: 4216:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4217:        close(sockfd_);
        -: 4218:        sockfd_ = -1;
        -: 4219:      }
        -: 4220:    }
        -: 4221:  }
        -: 4222:
        -: 4223:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4224:
        -: 4225:  if (sockfd_ == -1) {
        -: 4226:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4227:                        << host_name_ << ":" << port_num_;
        -: 4228:  }
        -: 4229:}
        -: 4230:
        -: 4231:// End of class Streaming Listener
        -: 4232:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4233:
        -: 4234:// class OsStackTraceGetter
        -: 4235:
        -: 4236:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4237:    "... " GTEST_NAME_ " internal frames ...";
        -: 4238:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4239:std::string OsStackTraceGetter::CurrentStackTrace(int /*max_depth*/,
        -: 4240:                                                  int /*skip_count*/) {
    #####: 4241:  return "";
    %%%%%: 4241-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4241-block  1
call    4 never executed
    %%%%%: 4241-block  2
    $$$$$: 4241-block  3
call    5 never executed
        -: 4242:}
        -: 4243:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 65 returned 100% blocks executed 100%
       65: 4244:void OsStackTraceGetter::UponLeavingGTest() {}
        -: 4245:
        -: 4246:// A helper class that creates the premature-exit file in its
        -: 4247:// constructor and deletes the file in its destructor.
        -: 4248:class ScopedPrematureExitFile {
        -: 4249: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 53%
        1: 4250:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       1*: 4251:      : premature_exit_filepath_(premature_exit_filepath ?
        1: 4251-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 4251-block  1
        1: 4251-block  2
        1: 4251-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4251-block  4
call    6 returned 1
    $$$$$: 4251-block  5
call    7 never executed
    $$$$$: 4251-block  6
call    8 never executed
        -: 4252:                                 premature_exit_filepath : "") {
        -: 4253:    // If a path to the premature-exit file is specified...
        1: 4254:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 4255:      // create the file with a single "0" character in it.  I/O
        -: 4256:      // errors are ignored as there's nothing better we can do and we
        -: 4257:      // don't want to fail the test because of this.
    #####: 4258:      FILE* pfile = posix::FOpen(premature_exit_filepath, "w");
    %%%%%: 4258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4259:      fwrite("0", 1, 1, pfile);
    %%%%%: 4259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4260:      fclose(pfile);
    %%%%%: 4260-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4261:    }
        1: 4262:  }
        1: 4262-block  0
    $$$$$: 4262-block  1
call    0 never executed
        -: 4263:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 4264:  ~ScopedPrematureExitFile() {
        1: 4265:    if (!premature_exit_filepath_.empty()) {
        1: 4265-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4266:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 4266-block  0
call    0 never executed
call    1 never executed
    #####: 4267:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 4268:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 4268-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4269:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4270:                          << retval;
call    0 never executed
        -: 4271:      }
        -: 4272:    }
        1: 4273:  }
        1: 4273-block  0
call    0 returned 1
        -: 4274:
        -: 4275: private:
        -: 4276:  const std::string premature_exit_filepath_;
        -: 4277:
        -: 4278:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 4279:};
        -: 4280:
        -: 4281:}  // namespace internal
        -: 4282:
        -: 4283:// class TestEventListeners
        -: 4284:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 4285:TestEventListeners::TestEventListeners()
        1: 4286:    : repeater_(new internal::TestEventRepeater()),
        1: 4286-block  0
call    0 returned 1
call    1 returned 1
        1: 4287:      default_result_printer_(NULL),
        1: 4288:      default_xml_generator_(NULL) {
        1: 4289:}
        -: 4290:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 4291:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 4291-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4291-block  1
call    2 never executed
        -: 4292:
        -: 4293:// Returns the standard listener responsible for the default console
        -: 4294:// output.  Can be removed from the listeners list to shut down default
        -: 4295:// console output.  Note that removing this object from the listener list
        -: 4296:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 4297:void TestEventListeners::Append(TestEventListener* listener) {
        1: 4298:  repeater_->Append(listener);
        1: 4298-block  0
call    0 returned 1
        1: 4299:}
        -: 4300:
        -: 4301:// Removes the given event listener from the list and returns it.  It then
        -: 4302:// becomes the caller's responsibility to delete the listener. Returns
        -: 4303:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 4304:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 4305:  if (listener == default_result_printer_)
        1: 4305-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4306:    default_result_printer_ = NULL;
        1: 4306-block  0
    #####: 4307:  else if (listener == default_xml_generator_)
    %%%%%: 4307-block  0
branch  0 never executed
branch  1 never executed
    #####: 4308:    default_xml_generator_ = NULL;
    %%%%%: 4308-block  0
        1: 4309:  return repeater_->Release(listener);
        1: 4309-block  0
call    0 returned 1
        -: 4310:}
        -: 4311:
        -: 4312:// Returns repeater that broadcasts the TestEventListener events to all
        -: 4313:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 17 returned 100% blocks executed 100%
       17: 4314:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       17: 4314-block  0
        -: 4315:
        -: 4316:// Sets the default_result_printer attribute to the provided listener.
        -: 4317:// The listener is also added to the listener list and previous
        -: 4318:// default_result_printer is removed from it and deleted. The listener can
        -: 4319:// also be NULL in which case it will not be added to the list. Does
        -: 4320:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 4321:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 4322:  if (default_result_printer_ != listener) {
        1: 4322-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4323:    // It is an error to pass this method a listener that is already in the
        -: 4324:    // list.
       1*: 4325:    delete Release(default_result_printer_);
        1: 4325-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 4325-block  1
call    3 never executed
        1: 4326:    default_result_printer_ = listener;
        1: 4327:    if (listener != NULL)
        1: 4327-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4328:      Append(listener);
        1: 4328-block  0
call    0 returned 1
        -: 4329:  }
        1: 4330:}
        -: 4331:
        -: 4332:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 4333:// listener is also added to the listener list and previous
        -: 4334:// default_xml_generator is removed from it and deleted. The listener can
        -: 4335:// also be NULL in which case it will not be added to the list. Does
        -: 4336:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 4337:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 4338:  if (default_xml_generator_ != listener) {
    %%%%%: 4338-block  0
branch  0 never executed
branch  1 never executed
        -: 4339:    // It is an error to pass this method a listener that is already in the
        -: 4340:    // list.
    #####: 4341:    delete Release(default_xml_generator_);
    %%%%%: 4341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4341-block  1
call    3 never executed
    #####: 4342:    default_xml_generator_ = listener;
    #####: 4343:    if (listener != NULL)
    %%%%%: 4343-block  0
branch  0 never executed
branch  1 never executed
    #####: 4344:      Append(listener);
    %%%%%: 4344-block  0
call    0 never executed
        -: 4345:  }
    #####: 4346:}
        -: 4347:
        -: 4348:// Controls whether events will be forwarded by the repeater to the
        -: 4349:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 4350:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 4351:  return repeater_->forwarding_enabled();
    %%%%%: 4351-block  0
call    0 never executed
        -: 4352:}
        -: 4353:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 4354:void TestEventListeners::SuppressEventForwarding() {
    #####: 4355:  repeater_->set_forwarding_enabled(false);
    %%%%%: 4355-block  0
call    0 never executed
    #####: 4356:}
        -: 4357:
        -: 4358:// class UnitTest
        -: 4359:
        -: 4360:// Gets the singleton UnitTest object.  The first time this method is
        -: 4361:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 4362:// calls will return the same object.
        -: 4363://
        -: 4364:// We don't protect this under mutex_ as a user is not supposed to
        -: 4365:// call this before main() starts, from which point on the return
        -: 4366:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 162 returned 100% blocks executed 82%
      162: 4367:UnitTest* UnitTest::GetInstance() {
        -: 4368:  // When compiled with MSVC 7.1 in optimized mode, destroying the
        -: 4369:  // UnitTest object upon exiting the program messes up the exit code,
        -: 4370:  // causing successful tests to appear failed.  We have to use a
        -: 4371:  // different implementation in this case to bypass the compiler bug.
        -: 4372:  // This implementation makes the compiler happy, at the cost of
        -: 4373:  // leaking the UnitTest object.
        -: 4374:
        -: 4375:  // CodeGear C++Builder insists on a public destructor for the
        -: 4376:  // default implementation.  Use this implementation to keep good OO
        -: 4377:  // design with private destructor.
        -: 4378:
        -: 4379:#if (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 4380:  static UnitTest* const instance = new UnitTest;
        -: 4381:  return instance;
        -: 4382:#else
      162: 4383:  static UnitTest instance;
      162: 4383-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 161
        1: 4383-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 4383-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 4383-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 4383-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 4383-block  5
call   12 never executed
      162: 4384:  return &instance;
      162: 4384-block  0
      162: 4384-block  1
        -: 4385:#endif  // (_MSC_VER == 1310 && !defined(_DEBUG)) || defined(__BORLANDC__)
        -: 4386:}
        -: 4387:
        -: 4388:// Gets the number of successful test cases.
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 4389:int UnitTest::successful_test_case_count() const {
    #####: 4390:  return impl()->successful_test_case_count();
    %%%%%: 4390-block  0
call    0 never executed
call    1 never executed
        -: 4391:}
        -: 4392:
        -: 4393:// Gets the number of failed test cases.
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 4394:int UnitTest::failed_test_case_count() const {
    #####: 4395:  return impl()->failed_test_case_count();
    %%%%%: 4395-block  0
call    0 never executed
call    1 never executed
        -: 4396:}
        -: 4397:
        -: 4398:// Gets the number of all test cases.
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 4399:int UnitTest::total_test_case_count() const {
    #####: 4400:  return impl()->total_test_case_count();
    %%%%%: 4400-block  0
call    0 never executed
call    1 never executed
        -: 4401:}
        -: 4402:
        -: 4403:// Gets the number of all test cases that contain at least one test
        -: 4404:// that should run.
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 4405:int UnitTest::test_case_to_run_count() const {
        2: 4406:  return impl()->test_case_to_run_count();
        2: 4406-block  0
call    0 returned 2
call    1 returned 2
        -: 4407:}
        -: 4408:
        -: 4409:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 4410:int UnitTest::successful_test_count() const {
        1: 4411:  return impl()->successful_test_count();
        1: 4411-block  0
call    0 returned 1
call    1 returned 1
        -: 4412:}
        -: 4413:
        -: 4414:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 1 returned 100% blocks executed 100%
        1: 4415:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
        1: 4415-block  0
call    0 returned 1
call    1 returned 1
        -: 4416:
        -: 4417:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 4418:int UnitTest::reportable_disabled_test_count() const {
        1: 4419:  return impl()->reportable_disabled_test_count();
        1: 4419-block  0
call    0 returned 1
call    1 returned 1
        -: 4420:}
        -: 4421:
        -: 4422:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4423:int UnitTest::disabled_test_count() const {
    #####: 4424:  return impl()->disabled_test_count();
    %%%%%: 4424-block  0
call    0 never executed
call    1 never executed
        -: 4425:}
        -: 4426:
        -: 4427:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4428:int UnitTest::reportable_test_count() const {
    #####: 4429:  return impl()->reportable_test_count();
    %%%%%: 4429-block  0
call    0 never executed
call    1 never executed
        -: 4430:}
        -: 4431:
        -: 4432:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 4433:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 4433-block  0
call    0 never executed
call    1 never executed
        -: 4434:
        -: 4435:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 4436:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 4436-block  0
call    0 returned 2
call    1 returned 2
        -: 4437:
        -: 4438:// Gets the time of the test program start, in ms from the start of the
        -: 4439:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 4440:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 4441:    return impl()->start_timestamp();
    %%%%%: 4441-block  0
call    0 never executed
call    1 never executed
        -: 4442:}
        -: 4443:
        -: 4444:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 4445:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 4446:  return impl()->elapsed_time();
        1: 4446-block  0
call    0 returned 1
call    1 returned 1
        -: 4447:}
        -: 4448:
        -: 4449:// Returns true iff the unit test passed (i.e. all test cases passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 4450:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 4450-block  0
call    0 returned 1
call    1 returned 1
        -: 4451:
        -: 4452:// Returns true iff the unit test failed (i.e. some test case failed
        -: 4453:// or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 4454:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 4454-block  0
call    0 never executed
call    1 never executed
        -: 4455:
        -: 4456:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 4457:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 4458:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 4459:  return impl()->GetTestCase(i);
    %%%%%: 4459-block  0
call    0 never executed
call    1 never executed
        -: 4460:}
        -: 4461:
        -: 4462:// Returns the TestResult containing information on test failures and
        -: 4463:// properties logged outside of individual test cases.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 4464:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 4465:  return *impl()->ad_hoc_test_result();
    %%%%%: 4465-block  0
call    0 never executed
call    1 never executed
        -: 4466:}
        -: 4467:
        -: 4468:// Gets the i-th test case among all the test cases. i can range from 0 to
        -: 4469:// total_test_case_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest18GetMutableTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 4470:TestCase* UnitTest::GetMutableTestCase(int i) {
    #####: 4471:  return impl()->GetMutableTestCase(i);
    %%%%%: 4471-block  0
call    0 never executed
call    1 never executed
        -: 4472:}
        -: 4473:
        -: 4474:// Returns the list of event listeners that can be used to track events
        -: 4475:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 16 returned 100% blocks executed 100%
       16: 4476:TestEventListeners& UnitTest::listeners() {
       16: 4477:  return *impl()->listeners();
       16: 4477-block  0
call    0 returned 16
call    1 returned 16
        -: 4478:}
        -: 4479:
        -: 4480:// Registers and returns a global test environment.  When a test
        -: 4481:// program is run, all global test environments will be set-up in the
        -: 4482:// order they were registered.  After all tests in the program have
        -: 4483:// finished, all global test environments will be torn-down in the
        -: 4484:// *reverse* order they were registered.
        -: 4485://
        -: 4486:// The UnitTest object takes ownership of the given environment.
        -: 4487://
        -: 4488:// We don't protect this under mutex_, as we only support calling it
        -: 4489:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4490:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 4491:  if (env == NULL) {
    %%%%%: 4491-block  0
branch  0 never executed
branch  1 never executed
    #####: 4492:    return NULL;
    %%%%%: 4492-block  0
        -: 4493:  }
        -: 4494:
    #####: 4495:  impl_->environments().push_back(env);
    %%%%%: 4495-block  0
call    0 never executed
call    1 never executed
    #####: 4496:  return env;
        -: 4497:}
        -: 4498:
        -: 4499:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 4500:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 4501:// this to report their results.  The user code should use the
        -: 4502:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 4503:void UnitTest::AddTestPartResult(
        -: 4504:    TestPartResult::Type result_type,
        -: 4505:    const char* file_name,
        -: 4506:    int line_number,
        -: 4507:    const std::string& message,
        -: 4508:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4509:  Message msg;
    %%%%%: 4509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4510:  msg << message;
    %%%%%: 4510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4511:
    #####: 4512:  internal::MutexLock lock(&mutex_);
    %%%%%: 4512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4513:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 4513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4513-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4514:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 4514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4514-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4514-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4515:
    #####: 4516:    for (int i = static_cast<int>(impl_->gtest_trace_stack().size());
    %%%%%: 4516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4516-block  1
call    3 never executed
    #####: 4517:         i > 0; --i) {
    %%%%%: 4517-block  0
branch  0 never executed
branch  1 never executed
    #####: 4518:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 4518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4518-block  1
call    3 never executed
    #####: 4519:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4519-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4519-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4519-block  2
call    9 never executed
    $$$$$: 4519-block  3
call   10 never executed
    $$$$$: 4519-block  4
    #####: 4520:          << " " << trace.message;
    %%%%%: 4520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4520-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4521:    }
        -: 4522:  }
        -: 4523:
    #####: 4524:  if (os_stack_trace.c_str() != NULL && !os_stack_trace.empty()) {
    %%%%%: 4524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4524-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4524-block  2
    %%%%%: 4524-block  3
    %%%%%: 4524-block  4
branch  6 never executed
branch  7 never executed
    #####: 4525:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 4525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4525-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4526:  }
        -: 4527:
        -: 4528:  const TestPartResult result =
        -: 4529:    TestPartResult(result_type, file_name, line_number,
    #####: 4530:                   msg.GetString().c_str());
    %%%%%: 4530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4530-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 4530-block  2
    #####: 4531:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4532:      ReportTestPartResult(result);
    %%%%%: 4532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4533:
    #####: 4534:  if (result_type != TestPartResult::kSuccess) {
    %%%%%: 4534-block  0
branch  0 never executed
branch  1 never executed
        -: 4535:    // gtest_break_on_failure takes precedence over
        -: 4536:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 4537:    // in the code (perhaps in order to use Google Test assertions
        -: 4538:    // with another testing framework) and specify the former on the
        -: 4539:    // command line for debugging.
    #####: 4540:    if (GTEST_FLAG(break_on_failure)) {
    %%%%%: 4540-block  0
branch  0 never executed
branch  1 never executed
        -: 4541:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 4542:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 4543:      // when a failure happens and both the --gtest_break_on_failure and
        -: 4544:      // the --gtest_catch_exceptions flags are specified.
    #####: 4545:      DebugBreak();
    %%%%%: 4545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4546:#else
        -: 4547:      // Dereference NULL through a volatile pointer to prevent the compiler
        -: 4548:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 4549:      // portability: Symbian doesn't implement abort() well, and some debuggers
        -: 4550:      // don't correctly trap abort().
        -: 4551:      *static_cast<volatile int*>(NULL) = 1;
        -: 4552:#endif  // GTEST_OS_WINDOWS
    #####: 4553:    } else if (GTEST_FLAG(throw_on_failure)) {
    %%%%%: 4553-block  0
branch  0 never executed
branch  1 never executed
        -: 4554:#if GTEST_HAS_EXCEPTIONS
    #####: 4555:      throw internal::GoogleTestFailureException(result);
    %%%%%: 4555-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4555-block  1
call    4 never executed
    $$$$$: 4555-block  2
call    5 never executed
        -: 4556:#else
        -: 4557:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 4558:      // that cannot be suppressed in VC 7.1 or below.
        -: 4559:      exit(1);
        -: 4560:#endif
        -: 4561:    }
        -: 4562:  }
    #####: 4563:}
    %%%%%: 4563-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4563-block  1
call    3 never executed
    $$$$$: 4563-block  2
call    4 never executed
    $$$$$: 4563-block  3
call    5 never executed
        -: 4564:
        -: 4565:// Adds a TestProperty to the current TestResult object when invoked from
        -: 4566:// inside a test, to current TestCase's ad_hoc_test_result_ when invoked
        -: 4567:// from SetUpTestCase or TearDownTestCase, or to the global property set
        -: 4568:// when invoked elsewhere.  If the result already contains a property with
        -: 4569:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 4570:void UnitTest::RecordProperty(const std::string& key,
        -: 4571:                              const std::string& value) {
    #####: 4572:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 4572-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4572-block  1
call    4 never executed
    $$$$$: 4572-block  2
call    5 never executed
    #####: 4573:}
        -: 4574:
        -: 4575:// Runs all tests in this UnitTest object and prints the result.
        -: 4576:// Returns 0 if successful, or 1 otherwise.
        -: 4577://
        -: 4578:// We don't protect this under mutex_, as we only support calling it
        -: 4579:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 4580:int UnitTest::Run() {
        -: 4581:  const bool in_death_test_child_process =
        1: 4582:      internal::GTEST_FLAG(internal_run_death_test).length() > 0;
        1: 4582-block  0
call    0 returned 1
        -: 4583:
        -: 4584:  // Google Test implements this protocol for catching that a test
        -: 4585:  // program exits before returning control to Google Test:
        -: 4586:  //
        -: 4587:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 4588:  //      is specified by the environment variable
        -: 4589:  //      TEST_PREMATURE_EXIT_FILE.
        -: 4590:  //   2. When Google Test has finished its work, it deletes the file.
        -: 4591:  //
        -: 4592:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 4593:  // running a Google-Test-based test program and check the existence
        -: 4594:  // of the file at the end of the test execution to see if it has
        -: 4595:  // exited prematurely.
        -: 4596:
        -: 4597:  // If we are in the child process of a death test, don't
        -: 4598:  // create/delete the premature exit file, as doing so is unnecessary
        -: 4599:  // and will confuse the parent process.  Otherwise, create/delete
        -: 4600:  // the file upon entering/leaving this function.  If the program
        -: 4601:  // somehow exits before this function has a chance to return, the
        -: 4602:  // premature-exit file will be left undeleted, causing a test runner
        -: 4603:  // that understands the premature-exit-file protocol to report the
        -: 4604:  // test as having failed.
        -: 4605:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 4606:      in_death_test_child_process ?
       1*: 4607:      NULL : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 4607-block  0
        1: 4607-block  1
call    2 returned 1
        1: 4607-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 4608:
        -: 4609:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 4610:  // used for the duration of the program.
        1: 4611:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
        1: 4611-block  0
call    0 returned 1
call    1 returned 1
        -: 4612:
        -: 4613:#if GTEST_HAS_SEH
        -: 4614:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 4615:  // tests or this is executing in the context of death test child
        -: 4616:  // process. In either case the user does not want to see pop-up dialogs
        -: 4617:  // about crashes - they are expected.
        -: 4618:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 4619:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 4620:    // SetErrorMode doesn't exist on CE.
        -: 4621:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 4622:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 4623:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 4624:
        -: 4625:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 4626:    // Death test children can be terminated with _abort().  On Windows,
        -: 4627:    // _abort() can show a dialog with a warning message.  This forces the
        -: 4628:    // abort message to go to stderr instead.
        -: 4629:    _set_error_mode(_OUT_TO_STDERR);
        -: 4630:# endif
        -: 4631:
        -: 4632:# if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE
        -: 4633:    // In the debug version, Visual Studio pops up a separate dialog
        -: 4634:    // offering a choice to debug the aborted program. We need to suppress
        -: 4635:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 4636:    // executed. Google Test will notify the user of any unexpected
        -: 4637:    // failure via stderr.
        -: 4638:    //
        -: 4639:    // VC++ doesn't define _set_abort_behavior() prior to the version 8.0.
        -: 4640:    // Users of prior VC versions shall suffer the agony and pain of
        -: 4641:    // clicking through the countless debug dialogs.
        -: 4642:    // TODO(vladl@google.com): find a way to suppress the abort dialog() in the
        -: 4643:    // debug mode when compiled with VC 7.1 or lower.
        -: 4644:    if (!GTEST_FLAG(break_on_failure))
        -: 4645:      _set_abort_behavior(
        -: 4646:          0x0,                                    // Clear the following flags:
        -: 4647:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 4648:# endif
        -: 4649:  }
        -: 4650:#endif  // GTEST_HAS_SEH
        -: 4651:
        1: 4652:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 4653:      impl(),
        -: 4654:      &internal::UnitTestImpl::RunAllTests,
       2*: 4655:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 4655-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4655-block  1
    %%%%%: 4655-block  2
        1: 4655-block  3
        1: 4656:}
        1: 4656-block  0
call    0 returned 1
    $$$$$: 4656-block  1
call    1 never executed
        -: 4657:
        -: 4658:// Returns the working directory when the first TEST() or TEST_F() was
        -: 4659:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 4660:const char* UnitTest::original_working_dir() const {
    #####: 4661:  return impl_->original_working_dir_.c_str();
    %%%%%: 4661-block  0
call    0 never executed
        -: 4662:}
        -: 4663:
        -: 4664:// Returns the TestCase object for the test that's currently running,
        -: 4665:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 4666:const TestCase* UnitTest::current_test_case() const
        -: 4667:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4668:  internal::MutexLock lock(&mutex_);
    %%%%%: 4668-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4669:  return impl_->current_test_case();
    %%%%%: 4669-block  0
call    0 never executed
    %%%%%: 4669-block  1
    #####: 4670:}
call    0 never executed
        -: 4671:
        -: 4672:// Returns the TestInfo object for the test that's currently running,
        -: 4673:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 4674:const TestInfo* UnitTest::current_test_info() const
        -: 4675:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4676:  internal::MutexLock lock(&mutex_);
    %%%%%: 4676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4677:  return impl_->current_test_info();
    %%%%%: 4677-block  0
call    0 never executed
    %%%%%: 4677-block  1
    #####: 4678:}
call    0 never executed
        -: 4679:
        -: 4680:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 4681:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 4681-block  0
call    0 never executed
        -: 4682:
        -: 4683:// Returns ParameterizedTestCaseRegistry object used to keep track of
        -: 4684:// value-parameterized tests and instantiate and register them.
        -: 4685:internal::ParameterizedTestCaseRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 4686:    UnitTest::parameterized_test_registry()
        -: 4687:        GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4688:  return impl_->parameterized_test_registry();
    %%%%%: 4688-block  0
call    0 never executed
        -: 4689:}
        -: 4690:
        -: 4691:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 4692:UnitTest::UnitTest() {
        1: 4692-block  0
call    0 returned 1
        1: 4693:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4693-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 4693-block  1
call    6 never executed
        1: 4694:}
        1: 4694-block  0
    $$$$$: 4694-block  1
call    0 never executed
        -: 4695:
        -: 4696:// Destructor of UnitTest.
    #####: 4697:UnitTest::~UnitTest() {
    #####: 4698:  delete impl_;
    #####: 4699:}
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 4697:UnitTest::~UnitTest() {
        -: 4698:  delete impl_;
    #####: 4699:}
    %%%%%: 4699-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 4697:UnitTest::~UnitTest() {
    #####: 4698:  delete impl_;
    %%%%%: 4698-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4698-block  1
call    2 never executed
    #####: 4699:}
    %%%%%: 4699-block  0
call    0 never executed
------------------
        -: 4700:
        -: 4701:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 4702:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 4703:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 4704:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4705:  internal::MutexLock lock(&mutex_);
    %%%%%: 4705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4706:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 4706-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4706-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4707:}
    %%%%%: 4707-block  0
call    0 never executed
    $$$$$: 4707-block  1
call    1 never executed
        -: 4708:
        -: 4709:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 4710:void UnitTest::PopGTestTrace()
        -: 4711:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 4712:  internal::MutexLock lock(&mutex_);
    %%%%%: 4712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4713:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 4713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4713-block  1
call    3 never executed
    #####: 4714:}
call    0 never executed
    $$$$$: 4714-block  0
call    1 never executed
        -: 4715:
        -: 4716:namespace internal {
        -: 4717:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 45%
        1: 4718:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 4719:    : parent_(parent),
        -: 4720:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 4721:      default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 4722:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        -: 4723:      GTEST_DISABLE_MSC_WARNINGS_POP_()
        1: 4724:      global_test_part_result_repoter_(
        -: 4725:          &default_global_test_part_result_reporter_),
        1: 4726:      per_thread_test_part_result_reporter_(
        1: 4726-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 4726-block  1
        -: 4727:          &default_per_thread_test_part_result_reporter_),
        1: 4728:      parameterized_test_registry_(),
call    0 returned 1
        1: 4729:      parameterized_tests_registered_(false),
        1: 4730:      last_death_test_case_(-1),
        1: 4731:      current_test_case_(NULL),
        1: 4732:      current_test_info_(NULL),
        1: 4733:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4734:      os_stack_trace_getter_(NULL),
        1: 4735:      post_flag_parse_init_performed_(false),
        1: 4736:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 4737:      random_(0),  // Will be reseeded before first use.
        1: 4737-block  0
call    0 returned 1
        1: 4738:      start_timestamp_(0),
        1: 4739:      elapsed_time_(0),
        -: 4740:#if GTEST_HAS_DEATH_TEST
        1: 4741:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4741-block  0
call    3 returned 1
call    4 returned 1
        -: 4742:#endif
        -: 4743:      // Will be overridden by the flag before first use.
        6: 4744:      catch_exceptions_(false) {
        1: 4744-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4744-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        1: 4744-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 4745:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 4745-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 4745-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 4746:}
        1: 4746-block  0
    $$$$$: 4746-block  1
call    0 never executed
    $$$$$: 4746-block  2
call    1 never executed
    $$$$$: 4746-block  3
call    2 never executed
    $$$$$: 4746-block  4
call    3 never executed
    $$$$$: 4746-block  5
call    4 never executed
    $$$$$: 4746-block  6
call    5 never executed
    $$$$$: 4746-block  7
call    6 never executed
    $$$$$: 4746-block  8
call    7 never executed
    $$$$$: 4746-block  9
call    8 never executed
    $$$$$: 4746-block 10
call    9 never executed
    $$$$$: 4746-block 11
call   10 never executed
    $$$$$: 4746-block 12
call   11 never executed
    $$$$$: 4746-block 13
call   12 never executed
    $$$$$: 4746-block 14
call   13 never executed
        -: 4747:
    #####: 4748:UnitTestImpl::~UnitTestImpl() {
        -: 4749:  // Deletes every TestCase.
    #####: 4750:  ForEach(test_cases_, internal::Delete<TestCase>);
        -: 4751:
        -: 4752:  // Deletes every Environment.
    #####: 4753:  ForEach(environments_, internal::Delete<Environment>);
        -: 4754:
    #####: 4755:  delete os_stack_trace_getter_;
    #####: 4756:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 4748:UnitTestImpl::~UnitTestImpl() {
        -: 4749:  // Deletes every TestCase.
        -: 4750:  ForEach(test_cases_, internal::Delete<TestCase>);
        -: 4751:
        -: 4752:  // Deletes every Environment.
        -: 4753:  ForEach(environments_, internal::Delete<Environment>);
        -: 4754:
        -: 4755:  delete os_stack_trace_getter_;
    #####: 4756:}
    %%%%%: 4756-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 4748:UnitTestImpl::~UnitTestImpl() {
        -: 4749:  // Deletes every TestCase.
    #####: 4750:  ForEach(test_cases_, internal::Delete<TestCase>);
    %%%%%: 4750-block  0
call    0 never executed
        -: 4751:
        -: 4752:  // Deletes every Environment.
    #####: 4753:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 4754:
    #####: 4755:  delete os_stack_trace_getter_;
branch  0 never executed
branch  1 never executed
    %%%%%: 4755-block  0
call    2 never executed
    #####: 4756:}
    %%%%%: 4756-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
------------------
        -: 4757:
        -: 4758:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 4759:// context of a test, to current test case's ad_hoc_test_result when invoke
        -: 4760:// from SetUpTestCase/TearDownTestCase, or to the global property set
        -: 4761:// otherwise.  If the result already contains a property with the same key,
        -: 4762:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 4763:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 4764:  std::string xml_element;
    %%%%%: 4764-block  0
call    0 never executed
        -: 4765:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 4766:
    #####: 4767:  if (current_test_info_ != NULL) {
branch  0 never executed
branch  1 never executed
    #####: 4768:    xml_element = "testcase";
    %%%%%: 4768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4769:    test_result = &(current_test_info_->result_);
    %%%%%: 4769-block  0
    #####: 4770:  } else if (current_test_case_ != NULL) {
    %%%%%: 4770-block  0
branch  0 never executed
branch  1 never executed
    #####: 4771:    xml_element = "testsuite";
    %%%%%: 4771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4772:    test_result = &(current_test_case_->ad_hoc_test_result_);
    %%%%%: 4772-block  0
        -: 4773:  } else {
    #####: 4774:    xml_element = "testsuites";
    %%%%%: 4774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4775:    test_result = &ad_hoc_test_result_;
    %%%%%: 4775-block  0
        -: 4776:  }
    #####: 4777:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 4777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4778:}
    %%%%%: 4778-block  0
call    0 never executed
    $$$$$: 4778-block  1
call    1 never executed
        -: 4779:
        -: 4780:#if GTEST_HAS_DEATH_TEST
        -: 4781:// Disables event forwarding if the control is currently in a death test
        -: 4782:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 4783:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 4784:  if (internal_run_death_test_flag_.get() != NULL)
        1: 4784-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4785:    listeners()->SuppressEventForwarding();
    %%%%%: 4785-block  0
call    0 never executed
call    1 never executed
        1: 4786:}
        -: 4787:#endif  // GTEST_HAS_DEATH_TEST
        -: 4788:
        -: 4789:// Initializes event listeners performing XML output as specified by
        -: 4790:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 4791:void UnitTestImpl::ConfigureXmlOutput() {
        1: 4792:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 4792-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4793:  if (output_format == "xml") {
        1: 4793-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4794:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 4794-block  0
call    0 never executed
    %%%%%: 4794-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4795:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4795-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4795-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4795-block  2
call   10 never executed
    $$$$$: 4795-block  3
call   11 never executed
    $$$$$: 4795-block  4
call   12 never executed
    $$$$$: 4795-block  5
        1: 4796:  } else if (output_format == "json") {
        1: 4796-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4797:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 4797-block  0
call    0 never executed
    %%%%%: 4797-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4798:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4798-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4798-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4798-block  2
call   10 never executed
    $$$$$: 4798-block  3
call   11 never executed
    $$$$$: 4798-block  4
call   12 never executed
    $$$$$: 4798-block  5
        1: 4799:  } else if (output_format != "") {
        1: 4799-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 4799-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 4800:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 4800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4800-block  1
call    3 never executed
    %%%%%: 4800-block  2
call    4 never executed
    $$$$$: 4800-block  3
call    5 never executed
    $$$$$: 4800-block  4
    #####: 4801:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4801-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4801-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4802:  }
        1: 4803:}
        1: 4803-block  0
call    0 returned 1
    $$$$$: 4803-block  1
call    1 never executed
        -: 4804:
        -: 4805:#if GTEST_CAN_STREAM_RESULTS_
        -: 4806:// Initializes event listeners for streaming test results in string form.
        -: 4807:// Must not be called before InitGoogleTest.
        -: 4808:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 4809:  const std::string& target = GTEST_FLAG(stream_result_to);
        -: 4810:  if (!target.empty()) {
        -: 4811:    const size_t pos = target.find(':');
        -: 4812:    if (pos != std::string::npos) {
        -: 4813:      listeners()->Append(new StreamingListener(target.substr(0, pos),
        -: 4814:                                                target.substr(pos+1)));
        -: 4815:    } else {
        -: 4816:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 4817:                          << "\" ignored.";
        -: 4818:    }
        -: 4819:  }
        -: 4820:}
        -: 4821:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 4822:
        -: 4823:// Performs initialization dependent upon flag values obtained in
        -: 4824:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 4825:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 4826:// this function is also called from RunAllTests.  Since this function can be
        -: 4827:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 100%
        2: 4828:void UnitTestImpl::PostFlagParsingInit() {
        -: 4829:  // Ensures that this function does not execute more than once.
        2: 4830:  if (!post_flag_parse_init_performed_) {
        2: 4830-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 4831:    post_flag_parse_init_performed_ = true;
        -: 4832:
        -: 4833:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 4834:    // Register to send notifications about key process state changes.
        -: 4835:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 4836:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 4837:
        -: 4838:#if GTEST_HAS_DEATH_TEST
        1: 4839:    InitDeathTestSubprocessControlInfo();
        1: 4839-block  0
call    0 returned 1
        1: 4840:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 4841:#endif  // GTEST_HAS_DEATH_TEST
        -: 4842:
        -: 4843:    // Registers parameterized tests. This makes parameterized tests
        -: 4844:    // available to the UnitTest reflection API without running
        -: 4845:    // RUN_ALL_TESTS.
        1: 4846:    RegisterParameterizedTests();
call    0 returned 1
        -: 4847:
        -: 4848:    // Configures listeners for XML output. This makes it possible for users
        -: 4849:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 4850:    ConfigureXmlOutput();
call    0 returned 1
        -: 4851:
        -: 4852:#if GTEST_CAN_STREAM_RESULTS_
        -: 4853:    // Configures listeners for streaming test results to the specified server.
        -: 4854:    ConfigureStreamingOutput();
        -: 4855:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 4856:  }
        2: 4857:}
        -: 4858:
        -: 4859:// A predicate that checks the name of a TestCase against a known
        -: 4860:// value.
        -: 4861://
        -: 4862:// This is used for implementation of the UnitTest class only.  We put
        -: 4863:// it in the anonymous namespace to prevent polluting the outer
        -: 4864:// namespace.
        -: 4865://
        -: 4866:// TestCaseNameIs is copyable.
        -: 4867:class TestCaseNameIs {
        -: 4868: public:
        -: 4869:  // Constructor.
function _ZN7testing8internal14TestCaseNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 100%
       11: 4870:  explicit TestCaseNameIs(const std::string& name)
       11: 4871:      : name_(name) {}
       11: 4871-block  0
call    0 returned 11
        -: 4872:
        -: 4873:  // Returns true iff the name of test_case matches name_.
function _ZNK7testing8internal14TestCaseNameIsclEPKNS_8TestCaseE called 28 returned 100% blocks executed 100%
       28: 4874:  bool operator()(const TestCase* test_case) const {
       28: 4875:    return test_case != NULL && strcmp(test_case->name(), name_.c_str()) == 0;
       28: 4875-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28: 4875-block  1
call    2 returned 28
call    3 returned 28
branch  4 taken 6 (fallthrough)
branch  5 taken 22
        6: 4875-block  2
       22: 4875-block  3
       28: 4875-block  4
        -: 4876:  }
        -: 4877:
        -: 4878: private:
        -: 4879:  std::string name_;
        -: 4880:};
        -: 4881:
        -: 4882:// Finds and returns a TestCase with the given name.  If one doesn't
        -: 4883:// exist, creates one and returns it.  It's the CALLER'S
        -: 4884:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 4885:// TESTS ARE NOT SHUFFLED.
        -: 4886://
        -: 4887:// Arguments:
        -: 4888://
        -: 4889://   test_case_name: name of the test case
        -: 4890://   type_param:     the name of the test case's type parameter, or NULL if
        -: 4891://                   this is not a typed or a type-parameterized test case.
        -: 4892://   set_up_tc:      pointer to the function that sets up the test case
        -: 4893://   tear_down_tc:   pointer to the function that tears down the test case
function _ZN7testing8internal12UnitTestImpl11GetTestCaseEPKcS3_PFvvES5_ called 11 returned 100% blocks executed 54%
       11: 4894:TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,
        -: 4895:                                    const char* type_param,
        -: 4896:                                    Test::SetUpTestCaseFunc set_up_tc,
        -: 4897:                                    Test::TearDownTestCaseFunc tear_down_tc) {
        -: 4898:  // Can we find a TestCase with the given name?
        -: 4899:  const std::vector<TestCase*>::const_iterator test_case =
       11: 4900:      std::find_if(test_cases_.begin(), test_cases_.end(),
       11: 4900-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
       22: 4901:                   TestCaseNameIs(test_case_name));
       11: 4901-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11: 4901-block  1
call    4 returned 11
branch  5 taken 11 (fallthrough)
branch  6 taken 0 (throw)
       11: 4901-block  2
call    7 returned 11
call    8 returned 11
call    9 returned 11
call   10 returned 11
    $$$$$: 4901-block  3
call   11 never executed
    $$$$$: 4901-block  4
    $$$$$: 4901-block  5
call   12 never executed
    $$$$$: 4901-block  6
    $$$$$: 4901-block  7
call   13 never executed
    $$$$$: 4901-block  8
        -: 4902:
       11: 4903:  if (test_case != test_cases_.end())
call    0 returned 11
call    1 returned 11
branch  2 taken 6 (fallthrough)
branch  3 taken 5
        6: 4904:    return *test_case;
        6: 4904-block  0
call    0 returned 6
        -: 4905:
        -: 4906:  // No.  Let's create one.
        -: 4907:  TestCase* const new_test_case =
        5: 4908:      new TestCase(test_case_name, type_param, set_up_tc, tear_down_tc);
        5: 4908-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 4908-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 4908-block  2
call    6 never executed
        -: 4909:
        -: 4910:  // Is this a death test case?
        5: 4911:  if (internal::UnitTestOptions::MatchesFilter(test_case_name,
        5: 4911-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 4911-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5: 4911-block  2
call    7 returned 5
call    8 returned 5
branch  9 taken 0 (fallthrough)
branch 10 taken 5
    $$$$$: 4911-block  3
call   11 never executed
    $$$$$: 4911-block  4
    $$$$$: 4911-block  5
call   12 never executed
    $$$$$: 4911-block  6
        -: 4912:                                               kDeathTestCaseFilter)) {
        -: 4913:    // Yes.  Inserts the test case after the last death test case
        -: 4914:    // defined so far.  This only works when the test cases haven't
        -: 4915:    // been shuffled.  Otherwise we may end up running a death test
        -: 4916:    // after a non-death test.
    #####: 4917:    ++last_death_test_case_;
    #####: 4918:    test_cases_.insert(test_cases_.begin() + last_death_test_case_,
    %%%%%: 4918-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4918-block  1
    $$$$$: 4918-block  2
    $$$$$: 4918-block  3
    $$$$$: 4918-block  4
        -: 4919:                       new_test_case);
        -: 4920:  } else {
        -: 4921:    // No.  Appends to the end of the list.
        5: 4922:    test_cases_.push_back(new_test_case);
        5: 4922-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 4923:  }
        -: 4924:
        5: 4925:  test_case_indices_.push_back(static_cast<int>(test_case_indices_.size()));
        5: 4925-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 4925-block  1
        5: 4926:  return new_test_case;
        5: 4926-block  0
        -: 4927:}
        -: 4928:
        -: 4929:// Helpers for setting up / tearing down the given environment.  They
        -: 4930:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4931:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 4931-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 4932:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 4932-block  0
call    0 never executed
        -: 4933:
        -: 4934:// Runs all tests in this UnitTest object, prints the result, and
        -: 4935:// returns true if all tests are successful.  If any exception is
        -: 4936:// thrown during a test, the test is considered to be failed, but the
        -: 4937:// rest of the tests will still be run.
        -: 4938://
        -: 4939:// When parameterized tests are enabled, it expands and registers
        -: 4940:// parameterized tests first in RegisterParameterizedTests().
        -: 4941:// All other functions called from RunAllTests() may safely assume that
        -: 4942:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 79%
        1: 4943:bool UnitTestImpl::RunAllTests() {
        -: 4944:  // True iff Google Test is initialized before RUN_ALL_TESTS() is called.
        1: 4945:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 4945-block  0
call    0 returned 1
        -: 4946:
        -: 4947:  // Do not run any test if the --help flag was specified.
        1: 4948:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 4949:    return true;
    %%%%%: 4949-block  0
        -: 4950:
        -: 4951:  // Repeats the call to the post-flag parsing initialization in case the
        -: 4952:  // user didn't call InitGoogleTest.
        1: 4953:  PostFlagParsingInit();
        1: 4953-block  0
call    0 returned 1
        -: 4954:
        -: 4955:  // Even if sharding is not on, test runners may want to use the
        -: 4956:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 4957:  // protocol.
        1: 4958:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 4959:
        -: 4960:  // True iff we are in a subprocess for running a thread-safe-style
        -: 4961:  // death test.
        1: 4962:  bool in_subprocess_for_death_test = false;
        -: 4963:
        -: 4964:#if GTEST_HAS_DEATH_TEST
        1: 4965:  in_subprocess_for_death_test = (internal_run_death_test_flag_.get() != NULL);
call    0 returned 1
        -: 4966:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 4967:  if (in_subprocess_for_death_test) {
        -: 4968:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 4969:  }
        -: 4970:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 4971:#endif  // GTEST_HAS_DEATH_TEST
        -: 4972:
        1: 4973:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 4974:                                        in_subprocess_for_death_test);
        -: 4975:
        -: 4976:  // Compares the full test names with the filter to decide which
        -: 4977:  // tests to run.
       1*: 4978:  const bool has_tests_to_run = FilterTests(should_shard
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 4978-block  0
        1: 4978-block  1
        1: 4978-block  2
call    2 returned 1
        -: 4979:                                              ? HONOR_SHARDING_PROTOCOL
        1: 4980:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 4981:
        -: 4982:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 4983:  if (GTEST_FLAG(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4984:    // This must be called *after* FilterTests() has been called.
    #####: 4985:    ListTestsMatchingFilter();
    %%%%%: 4985-block  0
call    0 never executed
    #####: 4986:    return true;
        -: 4987:  }
        -: 4988:
        1: 4989:  random_seed_ = GTEST_FLAG(shuffle) ?
        1: 4989-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 4989-block  1
    #####: 4990:      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;
    %%%%%: 4990-block  0
call    0 never executed
        -: 4991:
        -: 4992:  // True iff at least one test has failed.
        1: 4993:  bool failed = false;
        -: 4994:
        1: 4995:  TestEventListener* repeater = listeners()->repeater();
        1: 4995-block  0
call    0 returned 1
call    1 returned 1
        -: 4996:
        1: 4997:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 4998:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 4999:
        -: 5000:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5001:  // when we are inside the subprocess of a death test.
       1*: 5002:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5002-block  0
        1: 5002-block  1
        -: 5003:  // Repeats forever if the repeat count is negative.
        1: 5004:  const bool forever = repeat < 0;
        2: 5005:  for (int i = 0; forever || i != repeat; i++) {
        1: 5005-block  0
        1: 5005-block  1
        2: 5005-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5005-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5006:    // We want to preserve failures generated by ad-hoc test
        -: 5007:    // assertions executed before RUN_ALL_TESTS().
        1: 5008:    ClearNonAdHocTestResult();
        1: 5008-block  0
call    0 returned 1
        -: 5009:
        1: 5010:    const TimeInMillis start = GetTimeInMillis();
call    0 returned 1
        -: 5011:
        -: 5012:    // Shuffles test cases and tests if requested.
        1: 5013:    if (has_tests_to_run && GTEST_FLAG(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5013-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5014:      random()->Reseed(random_seed_);
    %%%%%: 5014-block  0
call    0 never executed
call    1 never executed
        -: 5015:      // This should be done before calling OnTestIterationStart(),
        -: 5016:      // such that a test event listener can see the actual test order
        -: 5017:      // in the event.
    #####: 5018:      ShuffleTests();
call    0 never executed
        -: 5019:    }
        -: 5020:
        -: 5021:    // Tells the unit test event listeners that the tests are about to start.
        1: 5022:    repeater->OnTestIterationStart(*parent_, i);
        1: 5022-block  0
call    0 returned 1
        -: 5023:
        -: 5024:    // Runs each test case if there is at least one test to run.
        1: 5025:    if (has_tests_to_run) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5026:      // Sets up all environments beforehand.
        1: 5027:      repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5027-block  0
call    0 returned 1
        1: 5028:      ForEach(environments_, SetUpEnvironment);
call    0 returned 1
        1: 5029:      repeater->OnEnvironmentsSetUpEnd(*parent_);
call    0 returned 1
        -: 5030:
        -: 5031:      // Runs the tests only if there was no fatal failure during global
        -: 5032:      // set-up.
        1: 5033:      if (!Test::HasFatalFailure()) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        6: 5034:        for (int test_index = 0; test_index < total_test_case_count();
        1: 5034-block  0
        6: 5034-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        -: 5035:             test_index++) {
        5: 5036:          GetMutableTestCase(test_index)->Run();
        5: 5036-block  0
call    0 returned 5
call    1 returned 5
        -: 5037:        }
        -: 5038:      }
        -: 5039:
        -: 5040:      // Tears down all environments in reverse order afterwards.
        1: 5041:      repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5041-block  0
call    0 returned 1
        1: 5042:      std::for_each(environments_.rbegin(), environments_.rend(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5042-block  0
        -: 5043:                    TearDownEnvironment);
        1: 5044:      repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5044-block  0
call    0 returned 1
        -: 5045:    }
        -: 5046:
        1: 5047:    elapsed_time_ = GetTimeInMillis() - start;
        1: 5047-block  0
call    0 returned 1
        -: 5048:
        -: 5049:    // Tells the unit test event listener that the tests have just finished.
        1: 5050:    repeater->OnTestIterationEnd(*parent_, i);
call    0 returned 1
        -: 5051:
        -: 5052:    // Gets the result and clears it.
        1: 5053:    if (!Passed()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5054:      failed = true;
    %%%%%: 5054-block  0
        -: 5055:    }
        -: 5056:
        -: 5057:    // Restores the original test order after the iteration.  This
        -: 5058:    // allows the user to quickly repro a failure that happens in the
        -: 5059:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5060:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5061:    // case the user somehow changes the value of the flag somewhere
        -: 5062:    // (it's always safe to unshuffle the tests).
        1: 5063:    UnshuffleTests();
        1: 5063-block  0
call    0 returned 1
        -: 5064:
        1: 5065:    if (GTEST_FLAG(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5066:      // Picks a new random seed for each iteration.
    #####: 5067:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5067-block  0
call    0 never executed
        -: 5068:    }
        -: 5069:  }
        -: 5070:
        1: 5071:  repeater->OnTestProgramEnd(*parent_);
        1: 5071-block  0
call    0 returned 1
        -: 5072:
        1: 5073:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5074:    ColoredPrintf(
    %%%%%: 5074-block  0
call    0 never executed
        -: 5075:        COLOR_RED,
        -: 5076:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5077:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5078:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5079:        " will start to enforce the valid usage. "
        -: 5080:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5081:#if GTEST_FOR_GOOGLE_
        -: 5082:    ColoredPrintf(COLOR_RED,
        -: 5083:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5084:#endif  // GTEST_FOR_GOOGLE_
        -: 5085:  }
        -: 5086:
        1: 5087:  return !failed;
        1: 5087-block  0
        -: 5088:}
        -: 5089:
        -: 5090:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5091:// if the variable is present. If a file already exists at this location, this
        -: 5092:// function will write over it. If the variable is present, but the file cannot
        -: 5093:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 5094:void WriteToShardStatusFileIfNeeded() {
        1: 5095:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5095-block  0
call    0 returned 1
        1: 5096:  if (test_shard_file != NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5097:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5097-block  0
call    0 never executed
    #####: 5098:    if (file == NULL) {
branch  0 never executed
branch  1 never executed
    #####: 5099:      ColoredPrintf(COLOR_RED,
    %%%%%: 5099-block  0
call    0 never executed
        -: 5100:                    "Could not write to the test shard status file \"%s\" "
        -: 5101:                    "specified by the %s environment variable.\n",
        -: 5102:                    test_shard_file, kTestShardStatusFile);
    #####: 5103:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 5104:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5105:    }
    #####: 5106:    fclose(file);
    %%%%%: 5106-block  0
call    0 never executed
        -: 5107:  }
        1: 5108:}
        -: 5109:
        -: 5110:// Checks whether sharding is enabled by examining the relevant
        -: 5111:// environment variable values. If the variables are present,
        -: 5112:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5113:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5114:// disabled because it must only be applied to the original test
        -: 5115:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 5116:bool ShouldShard(const char* total_shards_env,
        -: 5117:                 const char* shard_index_env,
        -: 5118:                 bool in_subprocess_for_death_test) {
        2: 5119:  if (in_subprocess_for_death_test) {
        2: 5119-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5120:    return false;
    %%%%%: 5120-block  0
        -: 5121:  }
        -: 5122:
        2: 5123:  const Int32 total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5123-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5124:  const Int32 shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5124-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5125:
        2: 5126:  if (total_shards == -1 && shard_index == -1) {
        2: 5126-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5126-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5127:    return false;
        2: 5127-block  0
    #####: 5128:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5128-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5128-block  1
branch  2 never executed
branch  3 never executed
    #####: 5129:    const Message msg = Message()
    %%%%%: 5129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5129-block  1
    #####: 5130:      << "Invalid environment variables: you have "
    %%%%%: 5130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5131:      << kTestShardIndex << " = " << shard_index
    %%%%%: 5131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5131-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5132:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 5132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5132-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5132-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5132-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5133:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5133-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5133-block  1
call    7 never executed
    $$$$$: 5133-block  2
call    8 never executed
    $$$$$: 5133-block  3
    #####: 5134:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5134-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5135:    exit(EXIT_FAILURE);
    %%%%%: 5135-block  0
call    0 never executed
    #####: 5136:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5136-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5136-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5136-block  2
call    4 never executed
    #####: 5137:    const Message msg = Message()
    %%%%%: 5137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5137-block  1
    #####: 5138:      << "Invalid environment variables: you have "
    %%%%%: 5138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5139:      << kTestTotalShards << " = " << total_shards
    %%%%%: 5139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5139-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5139-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5140:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5140-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5140-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5140-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5141:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5141-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5141-block  1
call    7 never executed
    $$$$$: 5141-block  2
call    8 never executed
    $$$$$: 5141-block  3
    #####: 5142:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5142-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5143:    exit(EXIT_FAILURE);
    %%%%%: 5143-block  0
call    0 never executed
    #####: 5144:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 5144-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5144-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5144-block  2
call    4 never executed
    #####: 5145:    const Message msg = Message()
    %%%%%: 5145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5145-block  1
    #####: 5146:      << "Invalid environment variables: we require 0 <= "
    %%%%%: 5146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5147:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 5147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5147-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5147-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5148:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 5148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5148-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5148-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5148-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5149:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 5149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5149-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5149-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5149-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5149-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5149-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 5150:    ColoredPrintf(COLOR_RED, msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5150-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5150-block  1
call    7 never executed
    $$$$$: 5150-block  2
call    8 never executed
    $$$$$: 5150-block  3
    #####: 5151:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5151-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5152:    exit(EXIT_FAILURE);
    %%%%%: 5152-block  0
call    0 never executed
    =====: 5153:  }
    $$$$$: 5153-block  0
call    0 never executed
        -: 5154:
    #####: 5155:  return total_shards > 1;
    %%%%%: 5155-block  0
        -: 5156:}
        -: 5157:
        -: 5158:// Parses the environment variable var as an Int32. If it is unset,
        -: 5159:// returns default_val. If it is not an Int32, prints an error
        -: 5160:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 5161:Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {
        4: 5162:  const char* str_val = posix::GetEnv(var);
        4: 5162-block  0
call    0 returned 4
        4: 5163:  if (str_val == NULL) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5164:    return default_val;
        4: 5164-block  0
        -: 5165:  }
        -: 5166:
        -: 5167:  Int32 result;
    #####: 5168:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 5168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5168-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5168-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5168-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5168-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 5168-block  5
call   15 never executed
    $$$$$: 5168-block  6
        -: 5169:                  str_val, &result)) {
    #####: 5170:    exit(EXIT_FAILURE);
    %%%%%: 5170-block  0
call    0 never executed
        -: 5171:  }
    #####: 5172:  return result;
    %%%%%: 5172-block  0
        -: 5173:}
        -: 5174:
        -: 5175:// Given the total number of shards, the shard index, and the test id,
        -: 5176:// returns true iff the test should be run on this shard. The test id is
        -: 5177:// some arbitrary but unique non-negative integer assigned to each test
        -: 5178:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 5179:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 5180:  return (test_id % total_shards) == shard_index;
    %%%%%: 5180-block  0
        -: 5181:}
        -: 5182:
        -: 5183:// Compares the name of each test with the user-specified filter to
        -: 5184:// decide whether the test should be run, then records the result in
        -: 5185:// each TestCase and TestInfo object.
        -: 5186:// If shard_tests == true, further filters tests based on sharding
        -: 5187:// variables in the environment - see
        -: 5188:// https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md .
        -: 5189:// Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 69%
        1: 5190:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 5191:  const Int32 total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5191-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5191-block  1
    #####: 5192:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 5192-block  0
call    0 never executed
        1: 5193:  const Int32 shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5193-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5193-block  1
    #####: 5194:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 5194-block  0
call    0 never executed
        -: 5195:
        -: 5196:  // num_runnable_tests are the number of tests that will
        -: 5197:  // run across all shards (i.e., match filter and are not disabled).
        -: 5198:  // num_selected_tests are the number of tests to be run on
        -: 5199:  // this shard.
        1: 5200:  int num_runnable_tests = 0;
        1: 5201:  int num_selected_tests = 0;
        6: 5202:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 5202-block  0
        6: 5202-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        5: 5203:    TestCase* const test_case = test_cases_[i];
        5: 5203-block  0
call    0 returned 5
        5: 5204:    const std::string &test_case_name = test_case->name();
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5: 5204-block  0
call    5 returned 5
    $$$$$: 5204-block  1
call    6 never executed
    $$$$$: 5204-block  2
        5: 5205:    test_case->set_should_run(false);
call    0 returned 5
        -: 5206:
       16: 5207:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
       16: 5207-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 11
branch  3 taken 5 (fallthrough)
       11: 5208:      TestInfo* const test_info = test_case->test_info_list()[j];
       11: 5208-block  0
call    0 returned 11
call    1 returned 11
       11: 5209:      const std::string test_name(test_info->name());
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5209-block  0
        -: 5210:      // A test is disabled if test case name or test name matches
        -: 5211:      // kDisableTestFilter.
        -: 5212:      const bool is_disabled =
       11: 5213:          internal::UnitTestOptions::MatchesFilter(test_case_name,
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
      22*: 5214:                                                   kDisableTestFilter) ||
       11: 5214-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
    %%%%%: 5214-block  1
       11: 5214-block  2
       11: 5215:          internal::UnitTestOptions::MatchesFilter(test_name,
       11: 5215-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 5215-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 11
       11: 5216:                                                   kDisableTestFilter);
       11: 5217:      test_info->is_disabled_ = is_disabled;
        -: 5218:
        -: 5219:      const bool matches_filter =
       11: 5220:          internal::UnitTestOptions::FilterMatchesTest(test_case_name,
       11: 5220-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -: 5221:                                                       test_name);
       11: 5222:      test_info->matches_filter_ = matches_filter;
        -: 5223:
       11: 5224:      const bool is_runnable =
      11*: 5225:          (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&
       11: 5225-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 5225-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11: 5225-block  2
branch  4 taken 11 (fallthrough)
branch  5 taken 0
       11: 5225-block  3
    %%%%%: 5225-block  4
        -: 5226:          matches_filter;
        -: 5227:
        -: 5228:      const bool is_in_another_shard =
      11*: 5229:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       11: 5229-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%: 5229-block  1
       11: 5229-block  2
    #####: 5230:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 5230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       11: 5231:      test_info->is_in_another_shard_ = is_in_another_shard;
      11*: 5232:      const bool is_selected = is_runnable && !is_in_another_shard;
       11: 5232-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 5232-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 0
       11: 5232-block  2
    %%%%%: 5232-block  3
        -: 5233:
       11: 5234:      num_runnable_tests += is_runnable;
       11: 5235:      num_selected_tests += is_selected;
        -: 5236:
       11: 5237:      test_info->should_run_ = is_selected;
      11*: 5238:      test_case->set_should_run(test_case->should_run() || is_selected);
       11: 5238-block  0
call    0 returned 11
branch  1 taken 5 (fallthrough)
branch  2 taken 6
        5: 5238-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 0
       11: 5238-block  2
    %%%%%: 5238-block  3
       11: 5238-block  4
call    5 returned 11
       11: 5239:    }
call    0 returned 11
    $$$$$: 5239-block  0
call    1 never executed
        5: 5240:  }
        5: 5240-block  0
call    0 returned 5
    $$$$$: 5240-block  1
call    1 never executed
        1: 5241:  return num_selected_tests;
        1: 5241-block  0
        1: 5241-block  1
        -: 5242:}
        -: 5243:
        -: 5244:// Prints the given C-string on a single line by replacing all '\n'
        -: 5245:// characters with string "\\n".  If the output takes more than
        -: 5246:// max_length characters, only prints the first max_length characters
        -: 5247:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 5248:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 5249:  if (str != NULL) {
    %%%%%: 5249-block  0
branch  0 never executed
branch  1 never executed
    #####: 5250:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 5250-block  0
    %%%%%: 5250-block  1
    %%%%%: 5250-block  2
branch  0 never executed
branch  1 never executed
    #####: 5251:      if (i >= max_length) {
    %%%%%: 5251-block  0
branch  0 never executed
branch  1 never executed
    #####: 5252:        printf("...");
    %%%%%: 5252-block  0
call    0 never executed
    #####: 5253:        break;
        -: 5254:      }
    #####: 5255:      if (*str == '\n') {
    %%%%%: 5255-block  0
branch  0 never executed
branch  1 never executed
    #####: 5256:        printf("\\n");
    %%%%%: 5256-block  0
call    0 never executed
    #####: 5257:        i += 2;
        -: 5258:      } else {
    #####: 5259:        printf("%c", *str);
    %%%%%: 5259-block  0
call    0 never executed
    #####: 5260:        ++i;
        -: 5261:      }
        -: 5262:    }
        -: 5263:  }
    #####: 5264:}
        -: 5265:
        -: 5266:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 5267:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 5268:  // Print at most this many characters for each type/value parameter.
    #####: 5269:  const int kMaxParamLength = 250;
        -: 5270:
    #####: 5271:  for (size_t i = 0; i < test_cases_.size(); i++) {
    %%%%%: 5271-block  0
    %%%%%: 5271-block  1
    %%%%%: 5271-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5272:    const TestCase* const test_case = test_cases_[i];
    %%%%%: 5272-block  0
call    0 never executed
    #####: 5273:    bool printed_test_case_name = false;
        -: 5274:
    #####: 5275:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
    %%%%%: 5275-block  0
    %%%%%: 5275-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5276:      const TestInfo* const test_info =
    #####: 5277:          test_case->test_info_list()[j];
    %%%%%: 5277-block  0
call    0 never executed
call    1 never executed
    #####: 5278:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 5279:        if (!printed_test_case_name) {
    %%%%%: 5279-block  0
branch  0 never executed
branch  1 never executed
    #####: 5280:          printed_test_case_name = true;
    #####: 5281:          printf("%s.", test_case->name());
    %%%%%: 5281-block  0
call    0 never executed
call    1 never executed
    #####: 5282:          if (test_case->type_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5283:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 5283-block  0
call    0 never executed
        -: 5284:            // We print the type parameter on a single line to make
        -: 5285:            // the output easy to parse by a program.
    #####: 5286:            PrintOnOneLine(test_case->type_param(), kMaxParamLength);
call    0 never executed
call    1 never executed
        -: 5287:          }
    #####: 5288:          printf("\n");
    %%%%%: 5288-block  0
call    0 never executed
        -: 5289:        }
    #####: 5290:        printf("  %s", test_info->name());
    %%%%%: 5290-block  0
call    0 never executed
call    1 never executed
    #####: 5291:        if (test_info->value_param() != NULL) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5292:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 5292-block  0
call    0 never executed
        -: 5293:          // We print the value parameter on a single line to make the
        -: 5294:          // output easy to parse by a program.
    #####: 5295:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
call    0 never executed
call    1 never executed
        -: 5296:        }
    #####: 5297:        printf("\n");
    %%%%%: 5297-block  0
call    0 never executed
        -: 5298:      }
        -: 5299:    }
        -: 5300:  }
    #####: 5301:  fflush(stdout);
    %%%%%: 5301-block  0
call    0 never executed
call    1 never executed
    #####: 5302:}
        -: 5303:
        -: 5304:// Sets the OS stack trace getter.
        -: 5305://
        -: 5306:// Does nothing if the input and the current OS stack trace getter are
        -: 5307:// the same; otherwise, deletes the old getter and makes the input the
        -: 5308:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 5309:void UnitTestImpl::set_os_stack_trace_getter(
        -: 5310:    OsStackTraceGetterInterface* getter) {
    #####: 5311:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 5311-block  0
branch  0 never executed
branch  1 never executed
    #####: 5312:    delete os_stack_trace_getter_;
    %%%%%: 5312-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5312-block  1
call    2 never executed
    #####: 5313:    os_stack_trace_getter_ = getter;
    %%%%%: 5313-block  0
        -: 5314:  }
    #####: 5315:}
        -: 5316:
        -: 5317:// Returns the current OS stack trace getter if it is not NULL;
        -: 5318:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 5319:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 65 returned 100% blocks executed 100%
       65: 5320:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       65: 5321:  if (os_stack_trace_getter_ == NULL) {
       65: 5321-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 64
        -: 5322:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 5323:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 5324:#else
        1: 5325:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 5325-block  0
call    0 returned 1
call    1 returned 1
        -: 5326:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 5327:  }
        -: 5328:
       65: 5329:  return os_stack_trace_getter_;
       65: 5329-block  0
        -: 5330:}
        -: 5331:
        -: 5332:// Returns the TestResult for the test that's currently running, or
        -: 5333:// the TestResult for the ad hoc test if no test is running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 23 returned 100% blocks executed 100%
       23: 5334:TestResult* UnitTestImpl::current_test_result() {
       23: 5335:  return current_test_info_ ?
       23: 5335-block  0
branch  0 taken 22 (fallthrough)
branch  1 taken 1
        1: 5335-block  1
       23: 5336:      &(current_test_info_->result_) : &ad_hoc_test_result_;
       22: 5336-block  0
       23: 5336-block  1
        -: 5337:}
        -: 5338:
        -: 5339:// Shuffles all test cases, and the tests within each test case,
        -: 5340:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 5341:void UnitTestImpl::ShuffleTests() {
        -: 5342:  // Shuffles the death test cases.
    #####: 5343:  ShuffleRange(random(), 0, last_death_test_case_ + 1, &test_case_indices_);
    %%%%%: 5343-block  0
call    0 never executed
call    1 never executed
        -: 5344:
        -: 5345:  // Shuffles the non-death test cases.
    #####: 5346:  ShuffleRange(random(), last_death_test_case_ + 1,
call    0 never executed
call    1 never executed
    #####: 5347:               static_cast<int>(test_cases_.size()), &test_case_indices_);
call    0 never executed
        -: 5348:
        -: 5349:  // Shuffles the tests inside each test case.
    #####: 5350:  for (size_t i = 0; i < test_cases_.size(); i++) {
    %%%%%: 5350-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5351:    test_cases_[i]->ShuffleTests(random());
    %%%%%: 5351-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5352:  }
    #####: 5353:}
        -: 5354:
        -: 5355:// Restores the test cases and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 5356:void UnitTestImpl::UnshuffleTests() {
        6: 5357:  for (size_t i = 0; i < test_cases_.size(); i++) {
        1: 5357-block  0
        6: 5357-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        -: 5358:    // Unshuffles the tests in each test case.
        5: 5359:    test_cases_[i]->UnshuffleTests();
        5: 5359-block  0
call    0 returned 5
call    1 returned 5
        -: 5360:    // Resets the index of each test case.
        5: 5361:    test_case_indices_[i] = static_cast<int>(i);
call    0 returned 5
        -: 5362:  }
        1: 5363:}
        -: 5364:
        -: 5365:// Returns the current OS stack trace as an std::string.
        -: 5366://
        -: 5367:// The maximum number of stack frames to be included is specified by
        -: 5368:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 5369:// specifies the number of top frames to be skipped, which doesn't
        -: 5370:// count against the number of frames to be included.
        -: 5371://
        -: 5372:// For example, if Foo() calls Bar(), which in turn calls
        -: 5373:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 5374:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 5375:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 5376:                                            int skip_count) {
        -: 5377:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 5378:  // to what the user really wants to skip.
    #####: 5379:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 5379-block  0
call    0 never executed
call    1 never executed
        -: 5380:}
        -: 5381:
        -: 5382:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 5383:// suppress unreachable code warnings.
        -: 5384:namespace {
        -: 5385:class ClassUniqueToAlwaysTrue {};
        -: 5386:}
        -: 5387:
function _ZN7testing8internal6IsTrueEb called 95 returned 100% blocks executed 100%
       95: 5388:bool IsTrue(bool condition) { return condition; }
       95: 5388-block  0
        -: 5389:
function _ZN7testing8internal10AlwaysTrueEv called 4 returned 100% blocks executed 67%
        4: 5390:bool AlwaysTrue() {
        -: 5391:#if GTEST_HAS_EXCEPTIONS
        -: 5392:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 5393:  // but it makes the compiler think that it may throw.
        4: 5394:  if (IsTrue(false))
        4: 5394-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####: 5395:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 5395-block  0
call    0 never executed
call    1 never executed
        -: 5396:#endif  // GTEST_HAS_EXCEPTIONS
        4: 5397:  return true;
        4: 5397-block  0
        -: 5398:}
        -: 5399:
        -: 5400:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 5401:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 5402:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 5403:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 5404:  const size_t prefix_len = strlen(prefix);
    #####: 5405:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 5405-block  0
branch  0 never executed
branch  1 never executed
    #####: 5406:    *pstr += prefix_len;
    #####: 5407:    return true;
    %%%%%: 5407-block  0
        -: 5408:  }
    #####: 5409:  return false;
    %%%%%: 5409-block  0
        -: 5410:}
        -: 5411:
        -: 5412:// Parses a string as a command line flag.  The string should have
        -: 5413:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 5414:// part can be omitted.
        -: 5415://
        -: 5416:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 5417:static const char* ParseFlagValue(const char* str, const char* flag,
        -: 5418:                                  bool def_optional) {
        -: 5419:  // str and flag must not be NULL.
       4*: 5420:  if (str == NULL || flag == NULL) return NULL;
        4: 5420-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5420-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 5420-block  2
        -: 5421:
        -: 5422:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        8: 5423:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
        4: 5423-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 5423-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 5423-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
    $$$$$: 5423-block  3
    $$$$$: 5423-block  4
    $$$$$: 5423-block  5
        4: 5424:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 5425:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return NULL;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 5425-block  0
        -: 5426:
        -: 5427:  // Skips the flag name.
        1: 5428:  const char* flag_end = str + flag_len;
        -: 5429:
        -: 5430:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 5431:  if (def_optional && (flag_end[0] == '\0')) {
        1: 5431-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5431-block  1
branch  2 never executed
branch  3 never executed
    #####: 5432:    return flag_end;
    %%%%%: 5432-block  0
        -: 5433:  }
        -: 5434:
        -: 5435:  // If def_optional is true and there are more characters after the
        -: 5436:  // flag name, or if def_optional is false, there must be a '=' after
        -: 5437:  // the flag name.
       1*: 5438:  if (flag_end[0] != '=') return NULL;
        1: 5438-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5438-block  1
        -: 5439:
        -: 5440:  // Returns the string after "=".
        1: 5441:  return flag_end + 1;
        1: 5441-block  0
        4: 5442:}
        4: 5442-block  0
call    0 returned 4
        -: 5443:
        -: 5444:// Parses a string for a bool flag, in the form of either
        -: 5445:// "--flag=value" or "--flag".
        -: 5446://
        -: 5447:// In the former case, the value is taken as true as long as it does
        -: 5448:// not start with '0', 'f', or 'F'.
        -: 5449://
        -: 5450:// In the latter case, the value is taken as true.
        -: 5451://
        -: 5452:// On success, stores the value of the flag in *value, and returns
        -: 5453:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL13ParseBoolFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 5454:static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {
        -: 5455:  // Gets the value of the flag as a string.
        3: 5456:  const char* const value_str = ParseFlagValue(str, flag, true);
        3: 5456-block  0
call    0 returned 3
        -: 5457:
        -: 5458:  // Aborts if the parsing failed.
        3: 5459:  if (value_str == NULL) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 5459-block  0
        -: 5460:
        -: 5461:  // Converts the string value to a bool.
    #####: 5462:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 5462-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5462-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 5462-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 5462-block  3
    %%%%%: 5462-block  4
    #####: 5463:  return true;
    %%%%%: 5463-block  0
        -: 5464:}
        -: 5465:
        -: 5466:// Parses a string for an Int32 flag, in the form of
        -: 5467:// "--flag=value".
        -: 5468://
        -: 5469:// On success, stores the value of the flag in *value, and returns
        -: 5470:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal14ParseInt32FlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 5471:bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {
        -: 5472:  // Gets the value of the flag as a string.
    #####: 5473:  const char* const value_str = ParseFlagValue(str, flag, false);
    %%%%%: 5473-block  0
call    0 never executed
        -: 5474:
        -: 5475:  // Aborts if the parsing failed.
    #####: 5476:  if (value_str == NULL) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 5476-block  0
        -: 5477:
        -: 5478:  // Sets *value to the value of the flag.
    #####: 5479:  return ParseInt32(Message() << "The value of flag --" << flag,
    %%%%%: 5479-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5479-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5479-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5479-block  3
call   10 never executed
    $$$$$: 5479-block  4
call   11 never executed
    #####: 5480:                    value_str, value);
    %%%%%: 5480-block  0
        -: 5481:}
        -: 5482:
        -: 5483:// Parses a string for a string flag, in the form of
        -: 5484:// "--flag=value".
        -: 5485://
        -: 5486:// On success, stores the value of the flag in *value, and returns
        -: 5487:// true.  On failure, returns false without changing *value.
        -: 5488:template <typename String>
function _ZN7testing8internalL15ParseStringFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 5489:static bool ParseStringFlag(const char* str, const char* flag, String* value) {
        -: 5490:  // Gets the value of the flag as a string.
        1: 5491:  const char* const value_str = ParseFlagValue(str, flag, false);
        1: 5491-block  0
call    0 returned 1
        -: 5492:
        -: 5493:  // Aborts if the parsing failed.
       1*: 5494:  if (value_str == NULL) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5494-block  0
        -: 5495:
        -: 5496:  // Sets *value to the value of the flag.
        1: 5497:  *value = value_str;
        1: 5497-block  0
call    0 returned 1
        1: 5498:  return true;
        -: 5499:}
        -: 5500:
        -: 5501:// Determines whether a string has a prefix that Google Test uses for its
        -: 5502:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 5503:// If Google Test detects that a command line flag has its prefix but is not
        -: 5504:// recognized, it will print its help message. Flags starting with
        -: 5505:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 5506:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 5507:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 5508:  return (SkipPrefix("--", &str) ||
    %%%%%: 5508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5509:          SkipPrefix("-", &str) ||
    %%%%%: 5509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5510:          SkipPrefix("/", &str)) &&
    %%%%%: 5510-block  0
call    0 never executed
    #####: 5511:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 5511-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5511-block  1
    %%%%%: 5511-block  2
    #####: 5512:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 5512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5513:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 5513-block  0
call    0 never executed
    %%%%%: 5513-block  1
        -: 5514:}
        -: 5515:
        -: 5516:// Prints a string containing code-encoded text.  The following escape
        -: 5517:// sequences can be used in the string to control the text color:
        -: 5518://
        -: 5519://   @@    prints a single '@' character.
        -: 5520://   @R    changes the color to red.
        -: 5521://   @G    changes the color to green.
        -: 5522://   @Y    changes the color to yellow.
        -: 5523://   @D    changes to the default terminal text color.
        -: 5524://
        -: 5525:// TODO(wan@google.com): Write tests for this once we add stdout
        -: 5526:// capturing to Google Test.
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 5527:static void PrintColorEncoded(const char* str) {
    #####: 5528:  GTestColor color = COLOR_DEFAULT;  // The current color.
    %%%%%: 5528-block  0
        -: 5529:
        -: 5530:  // Conceptually, we split the string into segments divided by escape
        -: 5531:  // sequences.  Then we print one segment at a time.  At the end of
        -: 5532:  // each iteration, the str pointer advances to the beginning of the
        -: 5533:  // next segment.
        -: 5534:  for (;;) {
    #####: 5535:    const char* p = strchr(str, '@');
    #####: 5536:    if (p == NULL) {
    %%%%%: 5536-block  0
branch  0 never executed
branch  1 never executed
    #####: 5537:      ColoredPrintf(color, "%s", str);
    %%%%%: 5537-block  0
call    0 never executed
    #####: 5538:      return;
    %%%%%: 5538-block  0
        -: 5539:    }
        -: 5540:
    #####: 5541:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 5541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5541-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5541-block  2
call    8 never executed
call    9 never executed
    $$$$$: 5541-block  3
call   10 never executed
    $$$$$: 5541-block  4
    $$$$$: 5541-block  5
call   11 never executed
        -: 5542:
    #####: 5543:    const char ch = p[1];
    #####: 5544:    str = p + 2;
    #####: 5545:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 5546:      ColoredPrintf(color, "@");
    %%%%%: 5546-block  0
call    0 never executed
    #####: 5547:    } else if (ch == 'D') {
    %%%%%: 5547-block  0
branch  0 never executed
branch  1 never executed
    #####: 5548:      color = COLOR_DEFAULT;
    %%%%%: 5548-block  0
    #####: 5549:    } else if (ch == 'R') {
    %%%%%: 5549-block  0
branch  0 never executed
branch  1 never executed
    #####: 5550:      color = COLOR_RED;
    %%%%%: 5550-block  0
    #####: 5551:    } else if (ch == 'G') {
    %%%%%: 5551-block  0
branch  0 never executed
branch  1 never executed
    #####: 5552:      color = COLOR_GREEN;
    %%%%%: 5552-block  0
    #####: 5553:    } else if (ch == 'Y') {
    %%%%%: 5553-block  0
branch  0 never executed
branch  1 never executed
    #####: 5554:      color = COLOR_YELLOW;
    %%%%%: 5554-block  0
        -: 5555:    } else {
    #####: 5556:      --str;
    %%%%%: 5556-block  0
        -: 5557:    }
    #####: 5558:  }
    %%%%%: 5558-block  0
        -: 5559:}
        -: 5560:
        -: 5561:static const char kColorEncodedHelpMessage[] =
        -: 5562:"This program contains tests written using " GTEST_NAME_ ". You can use the\n"
        -: 5563:"following command line flags to control its behavior:\n"
        -: 5564:"\n"
        -: 5565:"Test Selection:\n"
        -: 5566:"  @G--" GTEST_FLAG_PREFIX_ "list_tests@D\n"
        -: 5567:"      List the names of all tests instead of running them. The name of\n"
        -: 5568:"      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 5569:"  @G--" GTEST_FLAG_PREFIX_ "filter=@YPOSTIVE_PATTERNS"
        -: 5570:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 5571:"      Run only the tests whose name matches one of the positive patterns but\n"
        -: 5572:"      none of the negative patterns. '?' matches any single character; '*'\n"
        -: 5573:"      matches any substring; ':' separates two patterns.\n"
        -: 5574:"  @G--" GTEST_FLAG_PREFIX_ "also_run_disabled_tests@D\n"
        -: 5575:"      Run all disabled tests too.\n"
        -: 5576:"\n"
        -: 5577:"Test Execution:\n"
        -: 5578:"  @G--" GTEST_FLAG_PREFIX_ "repeat=@Y[COUNT]@D\n"
        -: 5579:"      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 5580:"  @G--" GTEST_FLAG_PREFIX_ "shuffle@D\n"
        -: 5581:"      Randomize tests' orders on every iteration.\n"
        -: 5582:"  @G--" GTEST_FLAG_PREFIX_ "random_seed=@Y[NUMBER]@D\n"
        -: 5583:"      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 5584:"      99999, or 0 to use a seed based on the current time).\n"
        -: 5585:"\n"
        -: 5586:"Test Output:\n"
        -: 5587:"  @G--" GTEST_FLAG_PREFIX_ "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 5588:"      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 5589:"  -@G-" GTEST_FLAG_PREFIX_ "print_time=0@D\n"
        -: 5590:"      Don't print the elapsed time of each test.\n"
        -: 5591:"  @G--" GTEST_FLAG_PREFIX_ "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G"
        -: 5592:    GTEST_PATH_SEP_ "@Y|@G:@YFILE_PATH]@D\n"
        -: 5593:"      Generate a JSON or XML report in the given directory or with the given\n"
        -: 5594:"      file name. @YFILE_PATH@D defaults to @Gtest_details.xml@D.\n"
        -: 5595:# if GTEST_CAN_STREAM_RESULTS_
        -: 5596:"  @G--" GTEST_FLAG_PREFIX_ "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 5597:"      Stream test results to the given server.\n"
        -: 5598:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5599:"\n"
        -: 5600:"Assertion Behavior:\n"
        -: 5601:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 5602:"  @G--" GTEST_FLAG_PREFIX_ "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 5603:"      Set the default death test style.\n"
        -: 5604:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 5605:"  @G--" GTEST_FLAG_PREFIX_ "break_on_failure@D\n"
        -: 5606:"      Turn assertion failures into debugger break-points.\n"
        -: 5607:"  @G--" GTEST_FLAG_PREFIX_ "throw_on_failure@D\n"
        -: 5608:"      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 5609:"      test framework.\n"
        -: 5610:"  @G--" GTEST_FLAG_PREFIX_ "catch_exceptions=0@D\n"
        -: 5611:"      Do not report exceptions as test failures. Instead, allow them\n"
        -: 5612:"      to crash the program or throw a pop-up (on Windows).\n"
        -: 5613:"\n"
        -: 5614:"Except for @G--" GTEST_FLAG_PREFIX_ "list_tests@D, you can alternatively set "
        -: 5615:    "the corresponding\n"
        -: 5616:"environment variable of a flag (all letters in upper-case). For example, to\n"
        -: 5617:"disable colored text output, you can either specify @G--" GTEST_FLAG_PREFIX_
        -: 5618:    "color=no@D or set\n"
        -: 5619:"the @G" GTEST_FLAG_PREFIX_UPPER_ "COLOR@D environment variable to @Gno@D.\n"
        -: 5620:"\n"
        -: 5621:"For more information, please read the " GTEST_NAME_ " documentation at\n"
        -: 5622:"@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_ "\n"
        -: 5623:"(not one in your own code or tests), please report it to\n"
        -: 5624:"@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 5625:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 28%
        1: 5626:static bool ParseGoogleTestFlag(const char* const arg) {
        1: 5627:  return ParseBoolFlag(arg, kAlsoRunDisabledTestsFlag,
        1: 5627-block  0
call    0 returned 1
        1: 5628:                       &GTEST_FLAG(also_run_disabled_tests)) ||
        1: 5629:      ParseBoolFlag(arg, kBreakOnFailureFlag,
        1: 5629-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 5630:                    &GTEST_FLAG(break_on_failure)) ||
        1: 5631:      ParseBoolFlag(arg, kCatchExceptionsFlag,
        1: 5631-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 5632:                    &GTEST_FLAG(catch_exceptions)) ||
       1*: 5633:      ParseStringFlag(arg, kColorFlag, &GTEST_FLAG(color)) ||
        1: 5633-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5634:      ParseStringFlag(arg, kDeathTestStyleFlag,
    %%%%%: 5634-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5635:                      &GTEST_FLAG(death_test_style)) ||
    #####: 5636:      ParseBoolFlag(arg, kDeathTestUseFork,
    %%%%%: 5636-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5637:                    &GTEST_FLAG(death_test_use_fork)) ||
    #####: 5638:      ParseStringFlag(arg, kFilterFlag, &GTEST_FLAG(filter)) ||
    %%%%%: 5638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5639:      ParseStringFlag(arg, kInternalRunDeathTestFlag,
    %%%%%: 5639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5640:                      &GTEST_FLAG(internal_run_death_test)) ||
    #####: 5641:      ParseBoolFlag(arg, kListTestsFlag, &GTEST_FLAG(list_tests)) ||
    %%%%%: 5641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5642:      ParseStringFlag(arg, kOutputFlag, &GTEST_FLAG(output)) ||
    %%%%%: 5642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5643:      ParseBoolFlag(arg, kPrintTimeFlag, &GTEST_FLAG(print_time)) ||
    %%%%%: 5643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5644:      ParseBoolFlag(arg, kPrintUTF8Flag, &GTEST_FLAG(print_utf8)) ||
    %%%%%: 5644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5645:      ParseInt32Flag(arg, kRandomSeedFlag, &GTEST_FLAG(random_seed)) ||
    %%%%%: 5645-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5646:      ParseInt32Flag(arg, kRepeatFlag, &GTEST_FLAG(repeat)) ||
    %%%%%: 5646-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5647:      ParseBoolFlag(arg, kShuffleFlag, &GTEST_FLAG(shuffle)) ||
    %%%%%: 5647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5648:      ParseInt32Flag(arg, kStackTraceDepthFlag,
    %%%%%: 5648-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5649:                     &GTEST_FLAG(stack_trace_depth)) ||
    #####: 5650:      ParseStringFlag(arg, kStreamResultToFlag,
    %%%%%: 5650-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       2*: 5651:                      &GTEST_FLAG(stream_result_to)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5651-block  0
    %%%%%: 5651-block  1
    #####: 5652:      ParseBoolFlag(arg, kThrowOnFailureFlag,
    %%%%%: 5652-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5653:                    &GTEST_FLAG(throw_on_failure));
        1: 5653-block  0
        -: 5654:}
        -: 5655:
        -: 5656:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5657:static void LoadFlagsFromFile(const std::string& path) {
    #####: 5658:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 5658-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5659:  if (!flagfile) {
    %%%%%: 5659-block  0
branch  0 never executed
branch  1 never executed
    #####: 5660:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG(flagfile)
    %%%%%: 5660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5660-block  1
call    3 never executed
    %%%%%: 5660-block  2
call    4 never executed
    $$$$$: 5660-block  3
call    5 never executed
    $$$$$: 5660-block  4
    #####: 5661:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5661-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5661-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5662:  }
    #####: 5663:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 5663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5664:  posix::FClose(flagfile);
    %%%%%: 5664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5665:  std::vector<std::string> lines;
    %%%%%: 5665-block  0
call    0 never executed
    #####: 5666:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5667:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 5667-block  0
    %%%%%: 5667-block  1
    %%%%%: 5667-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5668:    if (lines[i].empty())
    %%%%%: 5668-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5669:      continue;
    %%%%%: 5669-block  0
    #####: 5670:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 5670-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5670-block  1
branch  5 never executed
branch  6 never executed
    #####: 5671:      g_help_flag = true;
    %%%%%: 5671-block  0
        -: 5672:  }
    #####: 5673:}
    %%%%%: 5673-block  0
call    0 never executed
call    1 never executed
    $$$$$: 5673-block  1
call    2 never executed
    $$$$$: 5673-block  2
call    3 never executed
        -: 5674:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 5675:
        -: 5676:// Parses the command line for Google Test flags, without initializing
        -: 5677:// other parts of Google Test.  The type parameter CharType can be
        -: 5678:// instantiated to either char or wchar_t.
        -: 5679:template <typename CharType>
       1*: 5680:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 5681:  for (int i = 1; i < *argc; i++) {
       1*: 5682:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 5683:    const char* const arg = arg_string.c_str();
        -: 5684:
        -: 5685:    using internal::ParseBoolFlag;
        -: 5686:    using internal::ParseInt32Flag;
        -: 5687:    using internal::ParseStringFlag;
        -: 5688:
       1*: 5689:    bool remove_flag = false;
       1*: 5690:    if (ParseGoogleTestFlag(arg)) {
       1*: 5691:      remove_flag = true;
        -: 5692:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5693:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    #####: 5694:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    #####: 5695:      remove_flag = true;
        -: 5696:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5697:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 5698:               arg_string == "-?" || arg_string == "/?" ||
    #####: 5699:               HasGoogleTestFlagPrefix(arg)) {
        -: 5700:      // Both help flag and unrecognized Google Test flags (excluding
        -: 5701:      // internal ones) trigger help display.
    #####: 5702:      g_help_flag = true;
        -: 5703:    }
        -: 5704:
       1*: 5705:    if (remove_flag) {
        -: 5706:      // Shift the remainder of the argv list left by one.  Note
        -: 5707:      // that argv has (*argc + 1) elements, the last one always being
        -: 5708:      // NULL.  The following loop moves the trailing NULL element as
        -: 5709:      // well.
       2*: 5710:      for (int j = i; j != *argc; j++) {
       1*: 5711:        argv[j] = argv[j + 1];
        -: 5712:      }
        -: 5713:
        -: 5714:      // Decrements the argument count.
       1*: 5715:      (*argc)--;
        -: 5716:
        -: 5717:      // We also need to decrement the iterator as we just removed
        -: 5718:      // an element.
       1*: 5719:      i--;
        -: 5720:    }
        -: 5721:  }
        -: 5722:
       1*: 5723:  if (g_help_flag) {
        -: 5724:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 5725:    // latter may not be called at all if the user is using Google
        -: 5726:    // Test with another testing framework.
    #####: 5727:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 5728:  }
       1*: 5729:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 5680:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 5681:  for (int i = 1; i < *argc; i++) {
    %%%%%: 5681-block  0
    %%%%%: 5681-block  1
call    0 never executed
    %%%%%: 5681-block  2
branch  1 never executed
branch  2 never executed
    $$$$$: 5681-block  3
call    3 never executed
    #####: 5682:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 5682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5683:    const char* const arg = arg_string.c_str();
    %%%%%: 5683-block  0
call    0 never executed
        -: 5684:
        -: 5685:    using internal::ParseBoolFlag;
        -: 5686:    using internal::ParseInt32Flag;
        -: 5687:    using internal::ParseStringFlag;
        -: 5688:
    #####: 5689:    bool remove_flag = false;
    #####: 5690:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5690-block  0
branch  3 never executed
branch  4 never executed
    #####: 5691:      remove_flag = true;
    %%%%%: 5691-block  0
        -: 5692:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5693:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 5693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5693-block  1
branch  3 never executed
branch  4 never executed
    #####: 5694:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 5694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5695:      remove_flag = true;
    %%%%%: 5695-block  0
        -: 5696:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5697:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 5697-block  0
call    0 never executed
    %%%%%: 5697-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5698:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 5698-block  0
call    2 never executed
    %%%%%: 5698-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5698-block  2
    %%%%%: 5698-block  3
    %%%%%: 5698-block  4
branch  8 never executed
branch  9 never executed
    #####: 5699:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 5699-block  0
call    0 never executed
        -: 5700:      // Both help flag and unrecognized Google Test flags (excluding
        -: 5701:      // internal ones) trigger help display.
    #####: 5702:      g_help_flag = true;
    %%%%%: 5702-block  0
        -: 5703:    }
        -: 5704:
    #####: 5705:    if (remove_flag) {
    %%%%%: 5705-block  0
branch  0 never executed
branch  1 never executed
        -: 5706:      // Shift the remainder of the argv list left by one.  Note
        -: 5707:      // that argv has (*argc + 1) elements, the last one always being
        -: 5708:      // NULL.  The following loop moves the trailing NULL element as
        -: 5709:      // well.
    #####: 5710:      for (int j = i; j != *argc; j++) {
    %%%%%: 5710-block  0
    %%%%%: 5710-block  1
branch  0 never executed
branch  1 never executed
    #####: 5711:        argv[j] = argv[j + 1];
    %%%%%: 5711-block  0
        -: 5712:      }
        -: 5713:
        -: 5714:      // Decrements the argument count.
    #####: 5715:      (*argc)--;
        -: 5716:
        -: 5717:      // We also need to decrement the iterator as we just removed
        -: 5718:      // an element.
    #####: 5719:      i--;
    %%%%%: 5719-block  0
        -: 5720:    }
        -: 5721:  }
        -: 5722:
    #####: 5723:  if (g_help_flag) {
    %%%%%: 5723-block  0
branch  0 never executed
branch  1 never executed
        -: 5724:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 5725:    // latter may not be called at all if the user is using Google
        -: 5726:    // Test with another testing framework.
    #####: 5727:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 5727-block  0
call    0 never executed
        -: 5728:  }
    #####: 5729:}
    %%%%%: 5729-block  0
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 45%
        1: 5680:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 5681:  for (int i = 1; i < *argc; i++) {
        1: 5681-block  0
        1: 5681-block  1
call    0 returned 1
        2: 5681-block  2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
    $$$$$: 5681-block  3
call    3 never executed
        1: 5682:    const std::string arg_string = StreamableToString(argv[i]);
        1: 5682-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5683:    const char* const arg = arg_string.c_str();
        1: 5683-block  0
call    0 returned 1
        -: 5684:
        -: 5685:    using internal::ParseBoolFlag;
        -: 5686:    using internal::ParseInt32Flag;
        -: 5687:    using internal::ParseStringFlag;
        -: 5688:
        1: 5689:    bool remove_flag = false;
        1: 5690:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5690-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5691:      remove_flag = true;
        1: 5691-block  0
        -: 5692:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5693:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 5693-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5693-block  1
branch  3 never executed
branch  4 never executed
    #####: 5694:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 5694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5695:      remove_flag = true;
    %%%%%: 5695-block  0
        -: 5696:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 5697:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 5697-block  0
call    0 never executed
    %%%%%: 5697-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5698:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 5698-block  0
call    2 never executed
    %%%%%: 5698-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5698-block  2
    %%%%%: 5698-block  3
    %%%%%: 5698-block  4
branch  8 never executed
branch  9 never executed
    #####: 5699:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 5699-block  0
call    0 never executed
        -: 5700:      // Both help flag and unrecognized Google Test flags (excluding
        -: 5701:      // internal ones) trigger help display.
    #####: 5702:      g_help_flag = true;
    %%%%%: 5702-block  0
        -: 5703:    }
        -: 5704:
        1: 5705:    if (remove_flag) {
        1: 5705-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5706:      // Shift the remainder of the argv list left by one.  Note
        -: 5707:      // that argv has (*argc + 1) elements, the last one always being
        -: 5708:      // NULL.  The following loop moves the trailing NULL element as
        -: 5709:      // well.
        2: 5710:      for (int j = i; j != *argc; j++) {
        1: 5710-block  0
        2: 5710-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 5711:        argv[j] = argv[j + 1];
        1: 5711-block  0
        -: 5712:      }
        -: 5713:
        -: 5714:      // Decrements the argument count.
        1: 5715:      (*argc)--;
        -: 5716:
        -: 5717:      // We also need to decrement the iterator as we just removed
        -: 5718:      // an element.
        1: 5719:      i--;
        1: 5719-block  0
        -: 5720:    }
        -: 5721:  }
        -: 5722:
        1: 5723:  if (g_help_flag) {
        1: 5723-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5724:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 5725:    // latter may not be called at all if the user is using Google
        -: 5726:    // Test with another testing framework.
    #####: 5727:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 5727-block  0
call    0 never executed
        -: 5728:  }
        1: 5729:}
        1: 5729-block  0
------------------
        -: 5730:
        -: 5731:// Parses the command line for Google Test flags, without initializing
        -: 5732:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 5733:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 5734:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 5734-block  0
call    0 returned 1
        1: 5735:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 5736:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 5737:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 5737-block  0
call    0 never executed
    #####: 5738:}
        -: 5739:
        -: 5740:// The internal implementation of InitGoogleTest().
        -: 5741://
        -: 5742:// The type parameter CharType can be instantiated to either char or
        -: 5743:// wchar_t.
        -: 5744:template <typename CharType>
       1*: 5745:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 5746:  // We don't want to run the initialization code twice.
       1*: 5747:  if (GTestIsInitialized()) return;
        -: 5748:
       1*: 5749:  if (*argc <= 0) return;
        -: 5750:
       1*: 5751:  g_argvs.clear();
       3*: 5752:  for (int i = 0; i != *argc; i++) {
       2*: 5753:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 5754:  }
        -: 5755:
       1*: 5756:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 5757:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 5758:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 5745:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 5746:  // We don't want to run the initialization code twice.
    #####: 5747:  if (GTestIsInitialized()) return;
    %%%%%: 5747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5747-block  1
        -: 5748:
    #####: 5749:  if (*argc <= 0) return;
    %%%%%: 5749-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5749-block  1
        -: 5750:
    #####: 5751:  g_argvs.clear();
    %%%%%: 5751-block  0
call    0 never executed
    #####: 5752:  for (int i = 0; i != *argc; i++) {
    %%%%%: 5752-block  0
branch  0 never executed
branch  1 never executed
    #####: 5753:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 5753-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5753-block  1
call    4 never executed
    $$$$$: 5753-block  2
call    5 never executed
        -: 5754:  }
        -: 5755:
    #####: 5756:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 5756-block  0
call    0 never executed
    #####: 5757:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 5758:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 5745:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 5746:  // We don't want to run the initialization code twice.
       1*: 5747:  if (GTestIsInitialized()) return;
        1: 5747-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5747-block  1
        -: 5748:
       1*: 5749:  if (*argc <= 0) return;
        1: 5749-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5749-block  1
        -: 5750:
        1: 5751:  g_argvs.clear();
        1: 5751-block  0
call    0 returned 1
        3: 5752:  for (int i = 0; i != *argc; i++) {
        3: 5752-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 5753:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 5753-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 5753-block  1
call    4 returned 2
    $$$$$: 5753-block  2
call    5 never executed
        -: 5754:  }
        -: 5755:
        1: 5756:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 5756-block  0
call    0 returned 1
        1: 5757:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 5758:}
------------------
        -: 5759:
        -: 5760:}  // namespace internal
        -: 5761:
        -: 5762:// Initializes Google Test.  This must be called before calling
        -: 5763:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 5764:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 5765:// seen, it is removed from argv, and *argc is decremented.
        -: 5766://
        -: 5767:// No value is returned.  Instead, the Google Test flag variables are
        -: 5768:// updated.
        -: 5769://
        -: 5770:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 5771:void InitGoogleTest(int* argc, char** argv) {
        -: 5772:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 5773:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 5774:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 5775:  internal::InitGoogleTestImpl(argc, argv);
        1: 5775-block  0
call    0 returned 1
        -: 5776:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 5777:}
        -: 5778:
        -: 5779:// This overloaded version can be used in Windows programs compiled in
        -: 5780:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 5781:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 5782:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 5783:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 5784:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 5785:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 5785-block  0
call    0 never executed
        -: 5786:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 5787:}
        -: 5788:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 5789:std::string TempDir() {
        -: 5790:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 5791:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 5792:#endif
        -: 5793:
        -: 5794:#if GTEST_OS_WINDOWS_MOBILE
        -: 5795:  return "\\temp\\";
        -: 5796:#elif GTEST_OS_WINDOWS
    #####: 5797:  const char* temp_dir = internal::posix::GetEnv("TEMP");
    %%%%%: 5797-block  0
call    0 never executed
    #####: 5798:  if (temp_dir == NULL || temp_dir[0] == '\0')
branch  0 never executed
branch  1 never executed
    %%%%%: 5798-block  0
branch  2 never executed
branch  3 never executed
    #####: 5799:    return "\\temp\\";
    %%%%%: 5799-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5799-block  1
call    4 never executed
    $$$$$: 5799-block  2
call    5 never executed
    $$$$$: 5799-block  3
    #####: 5800:  else if (temp_dir[strlen(temp_dir) - 1] == '\\')
    %%%%%: 5800-block  0
branch  0 never executed
branch  1 never executed
    #####: 5801:    return temp_dir;
    %%%%%: 5801-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5801-block  1
call    4 never executed
    $$$$$: 5801-block  2
call    5 never executed
    $$$$$: 5801-block  3
        -: 5802:  else
    #####: 5803:    return std::string(temp_dir) + "\\";
    %%%%%: 5803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5803-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5803-block  2
call    7 never executed
call    8 never executed
    $$$$$: 5803-block  3
call    9 never executed
    $$$$$: 5803-block  4
    $$$$$: 5803-block  5
call   10 never executed
    $$$$$: 5803-block  6
        -: 5804:#elif GTEST_OS_LINUX_ANDROID
        -: 5805:  return "/sdcard/";
        -: 5806:#else
        -: 5807:  return "/tmp/";
        -: 5808:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 5809:}
        -: 5810:
        -: 5811:// Class ScopedTrace
        -: 5812:
        -: 5813:// Pushes the given source file location and message onto a per-thread
        -: 5814:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5815:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 5816:  internal::TraceInfo trace;
    %%%%%: 5816-block  0
call    0 never executed
    #####: 5817:  trace.file = file;
    #####: 5818:  trace.line = line;
    #####: 5819:  trace.message.swap(message);
call    0 never executed
        -: 5820:
    #####: 5821:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5821-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5822:}
    %%%%%: 5822-block  0
call    0 never executed
    $$$$$: 5822-block  1
call    1 never executed
        -: 5823:
        -: 5824:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 5825:ScopedTrace::~ScopedTrace()
        -: 5826:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 5827:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 5827-block  0
call    0 never executed
call    1 never executed
    #####: 5828:}
        -: 5829:
        -: 5830:}  // namespace testing
